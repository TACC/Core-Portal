import React, { useEffect, useState } from 'react';
import {
  Button,
  FormGroup,
  Label,
  Input,
  FormText,
  Badge,
  InputGroup,
  InputGroupAddon,
} from 'reactstrap';

import { useField, FieldArray, Field } from 'formik';
import PropTypes from 'prop-types';
import './FormField.scss';

/** A limited-choice wrapper for `FormField` */
const FormFieldWrapper = ({ children, type }) => {
  let wrapper;

  switch (type) {
    case 'InputGroup':
      wrapper = <InputGroup>{children}</InputGroup>;
      break;

    case 'FormGroup':
    default:
      wrapper = <FormGroup>{children}</FormGroup>;
  }

  return wrapper;
};
FormFieldWrapper.propTypes = {
  /** The content for the wrapper */
  children: PropTypes.node.isRequired,
  /** Which wrapper to use */
  type: PropTypes.oneOf(['InputGroup', 'FormGroup', '']),
};
FormFieldWrapper.defaultProps = {
  type: 'FormGroup',
};

/** Basic input wrapper to isolate select modal state */
const FormInputWrapper = ({
  children,
  agaveFile,
  index,
  selectCallback,
  hasAddon,
  addonType,
  addon,
  SelectModal,
}) => {
  // const [openAgaveFileModal, setOpenAgaveFileModal] = useState(false);
  const [openAgaveFileModal, setOpenAgaveFileModal] = useState({default: false});

  useEffect(() => {
    console.log(openAgaveFileModal);
    console.log(index);
  }, [openAgaveFileModal]);

  return agaveFile ? (
    <>
      <SelectModal
        isOpen={openAgaveFileModal['']}
        toggle={() => {
          setOpenAgaveFileModal((prevState) => !prevState);
        }}
        onSelect={(system, path) => {
          // helpers.setValue(`agave://${system}${path}`);
          selectCallback(`agave://${system}${path}`);
        }}
      />

      <InputGroup>
        <InputGroupAddon addonType="prepend">
          <Button
            size="sm"
            color="secondary"
            type="button"
            onClick={() => setOpenAgaveFileModal(true)}
          >
            Select
          </Button>
        </InputGroupAddon>
        {children}
      </InputGroup>
    </>
  ) : (
    <>
      {hasAddon && addonType === 'prepend' ? addon : null}
      <InputGroup>{children}</InputGroup>
      {hasAddon && addonType === 'append' ? addon : null}
    </>
  );
};

FormInputWrapper.propTypes = {
  /** The content for the wrapper */
  children: PropTypes.node.isRequired,
  agaveFile: PropTypes.bool,
  SelectModal: PropTypes.func,
  /** An [`<InputGroupAddon>`](https://reactstrap.github.io/components/input-group/) to add */
  addon: PropTypes.node,
  /** The [`<InputGroupAddon>` `addonType`](https://reactstrap.github.io/components/input-group/) to add */
  addonType: PropTypes.oneOf(['prepend', 'append']),
};

/**
 * A standard form field that supports some customization and presets.
 *
 * Customizations:
 * - providing an `<InputGroupAddon>` (can not use with "Agave File Selector")
 *
 * Presets:
 * - Agave File Selector (requires `agaveFile` and `SelectModal`)
 */
const FormField = ({
  addon,
  addonType,
  label,
  description,
  required,
  agaveFile,
  SelectModal,
  ...props
}) => {
  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]
  // which we can spread on <input> and also replace ErrorMessage entirely.
  const [field, meta, helpers] = useField(props);
  // console.log(field);
  // console.log(props);
  // const [openAgaveFileModal, setOpenAgaveFileModal] = useState(false);
  // props.type = 'array';
  const { id, name, multiInput, maxitems, minitems } = props;

  const hasAddon = addon !== undefined;
  const wrapperType = hasAddon ? 'InputGroup' : '';

  //
  // const deleteInputItem = (inputItem) => {
  //   if (minitems < inputItems.length) {
  //     setInputItems(inputItems.filter(ii => ii.id != inputItem.id));
  //   }
  // };

  const FieldLabel = () => (
    <Label
      className="form-field__label"
      for={id || name}
      size="sm"
      style={{ display: 'flex', alignItems: 'center' }}
    >
      {label}{' '}
      {required ? (
        <Badge color="danger" style={{ marginLeft: '10px' }}>
          Required
        </Badge>
      ) : null}
    </Label>
  );
  const FieldNote = () => (
    <>
      {meta.touched && meta.error ? (
        <div className="form-field__validation-error">{meta.error}</div>
      ) : (
        description && (
          <FormText className="form-field__help" color="muted">
            {description}
          </FormText>
        )
      )}
    </>
  );

  const SingleFormInput = () => {
    return (
      <FormInputWrapper
        agaveFile={agaveFile}
        selectCallback={(value) => helpers.setValue(value)}
        hasAddon={hasAddon}
        addonType={addonType}
        addon={addon}
        index="lkjdf"
        SelectModal={SelectModal}
      >
        <Input {...field} {...props} bsSize="sm" />;
      </FormInputWrapper>
    );
  };

  const MultiFormInput = () => {
    // field.value = Array(2).fill('');

    return (
      <FieldArray
        name={name}
        render={(arrayHelpers) => (
          <div>
            {field.value &&
            Array.isArray(field.value) &&
            field.value.length > 0 ? (
              field.value.map((_, index) => (
                <div key={index}>
                  <FormInputWrapper
                    agaveFile={agaveFile}
                    selectCallback={(value) => {
                      arrayHelpers.remove(index);
                      arrayHelpers.insert(value, index);
                    }}
                    index={index}
                    hasAddon={hasAddon}
                    addonType={addonType}
                    addon={addon}
                    SelectModal={SelectModal}
                  >
                    <Input
                      tag={Field}
                      name={`${name}.${index}`}
                      type={props.type}
                      component="input"
                      bsSize="sm"
                    />
                    <InputGroupAddon addonType="append">
                      <Button
                        size="sm"
                        color="secondary"
                        type="button"
                        onClick={() => arrayHelpers.remove(index)}
                      >
                        X
                      </Button>
                    </InputGroupAddon>
                  </FormInputWrapper>
                </div>
              ))
            ) : (
              <div>No Inputs</div>
            )}

            <Button color="link" onClick={() => arrayHelpers.push('')}>
              <b>+ Add File Input</b>
            </Button>
          </div>
        )}
      />
    );
  };

  // const MultiFormInput = () => {
  //   field.value = Array(2).fill('');

  //   return (
  //     <FieldArray
  //       name={name}
  //       render={(arrayHelpers) => (
  //         <div>
  //           {field.value &&
  //           Array.isArray(field.value) &&
  //           field.value.length > 0 ? (
  //             field.value.map((_, index) => (
  //               <div key={index}>
  //                 <FormInputWrapper>
  //                   <Field name={`${name}.${index}`} component={SimpleInput} />
  //                   <InputGroupAddon addonType="append">
  //                     <Button
  //                       size="sm"
  //                       color="secondary"
  //                       type="button"
  //                       onClick={() => arrayHelpers.remove(index)}
  //                     >
  //                       X
  //                     </Button>
  //                   </InputGroupAddon>
  //                 </FormInputWrapper>
  //               </div>
  //             ))
  //           ) : (
  //             <div>No Inputs</div>
  //           )}

  //           <Button color="link" onClick={() => arrayHelpers.push('')}>
  //             <b>+ Add File Input</b>
  //           </Button>
  //         </div>
  //       )}
  //     />
  //   );
  // };

  // MultiFormPrepend = () =>

  // Allowing ineffectual prop combinations would lead to confusion
  if (addon && agaveFile) {
    throw new Error(
      'You must not pass `addon` and `agaveFile`, because `agaveFile` triggers its own field add-on',
    );
  }
  if ((!agaveFile && SelectModal) || (agaveFile && !SelectModal)) {
    throw new Error('An `agaveFile` and a `SelectModal` must both be passed');
  }

  return (
    <>
      {label && hasAddon ? <FieldLabel /> : null}
      <FormFieldWrapper type={wrapperType}>
        {label && !hasAddon ? <FieldLabel /> : null}
        {multiInput ? <MultiFormInput /> : <SingleFormInput />}
        {!hasAddon ? <FieldNote /> : null}
      </FormFieldWrapper>
      {hasAddon ? <FieldNote /> : null}
    </>
  );
};

FormField.propTypes = {
  id: PropTypes.string,
  name: PropTypes.string,
  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  description: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),
  required: PropTypes.bool,
  agaveFile: PropTypes.bool,
  SelectModal: PropTypes.func,
  /** An [`<InputGroupAddon>`](https://reactstrap.github.io/components/input-group/) to add */
  addon: PropTypes.node,
  /** The [`<InputGroupAddon>` `addonType`](https://reactstrap.github.io/components/input-group/) to add */
  addonType: PropTypes.oneOf(['prepend', 'append']),
};
FormField.defaultProps = {
  id: undefined,
  name: undefined,
  label: undefined,
  description: undefined,
  required: false,
  agaveFile: undefined,
  SelectModal: undefined,
  addon: undefined,
  addonType: undefined,
};

export default FormField;
