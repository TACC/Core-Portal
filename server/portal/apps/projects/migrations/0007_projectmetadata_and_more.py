# Generated by Django 4.2.11 on 2024-09-16 20:40

from django.conf import settings
import django.core.serializers.json
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import portal.apps.projects.models.project_metadata


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('projects', '0006_rename_projectmetadata_legacyprojectmetadata'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProjectMetadata',
            fields=[
                ('uuid', models.CharField(default=portal.apps.projects.models.project_metadata.uuid_pk, editable=False, max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Metadata namespace, e.g. 'designsafe.project'", max_length=100, validators=[django.core.validators.MinLengthValidator(1)])),
                ('value', models.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder, help_text='JSON document containing file metadata, including title/description')),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('base_project', models.ForeignKey(help_text='Base project containing this entity.For top-level project metadata, this is `self`.', on_delete=django.db.models.deletion.CASCADE, to='projects.projectmetadata')),
                ('users', models.ManyToManyField(help_text='Users who have access to a project.', related_name='projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(models.F('value__projectId'), name='value_project_id'), models.Index(fields=['name'], name='projects_pr_name_5382e9_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='projectmetadata',
            constraint=models.UniqueConstraint(models.F('value__projectId'), condition=models.Q(('name', 'drp.project')), name='unique_id_per_project'),
        ),
        migrations.AddConstraint(
            model_name='projectmetadata',
            constraint=models.UniqueConstraint(condition=models.Q(('name', 'drp.project.graph')), fields=('base_project_id',), name='unique_graph_per_project'),
        ),
        migrations.AddConstraint(
            model_name='projectmetadata',
            constraint=models.CheckConstraint(check=models.Q(('name', 'drp.project'), ('value__projectId__isnull', True), _negated=True), name='base_projectId_not_null'),
        ),
    ]
