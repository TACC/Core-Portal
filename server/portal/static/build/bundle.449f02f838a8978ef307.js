/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/static/build/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 51);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ngDesignsafeDirectives = __webpack_require__(24);\n\nvar _ngDesignsafeFilters = __webpack_require__(25);\n\nvar _ngModernizr = __webpack_require__(26);\n\nvar _workspace = __webpack_require__(43);\n\nvar _data_depot = __webpack_require__(18);\n\nvar _search = __webpack_require__(32);\n\nfunction config($httpProvider, $locationProvider, $urlMatcherFactoryProvider) {\n  'ngInject';\n\n  $locationProvider.html5Mode({ enabled: true, requireBase: true, rewriteLinks: false });\n  // $urlMatcherFactoryProvider.strictMode(false);\n  $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n  $httpProvider.defaults.xsrfCookieName = 'csrftoken';\n  $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';\n}\n\nvar mod = angular.module('portal', ['ngCookies', 'httpi', 'ui.bootstrap', 'ui.router', 'schemaForm', 'dndLists', 'xeditable', 'pascalprecht.translate', 'ngStorage', 'ngWebSocket', 'ngMaterial', 'ng.modernizr', 'django.context', 'portal.directives', 'portal.filters', 'portal.workspace', 'portal.data_depot', 'portal.search']).config(config);\n\nexports.default = mod;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvbWFpbi5tb2R1bGUuanM/N2Q4OSJdLCJuYW1lcyI6WyJjb25maWciLCIkaHR0cFByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCIkdXJsTWF0Y2hlckZhY3RvcnlQcm92aWRlciIsImh0bWw1TW9kZSIsImVuYWJsZWQiLCJyZXF1aXJlQmFzZSIsInJld3JpdGVMaW5rcyIsImRlZmF1bHRzIiwiaGVhZGVycyIsImNvbW1vbiIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtb2QiLCJhbmd1bGFyIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxTQUFTQSxNQUFULENBQWdCQyxhQUFoQixFQUErQkMsaUJBQS9CLEVBQWtEQywwQkFBbEQsRUFBOEU7QUFDN0U7O0FBQ0FELG9CQUFrQkUsU0FBbEIsQ0FBNEIsRUFBRUMsU0FBUyxJQUFYLEVBQWlCQyxhQUFhLElBQTlCLEVBQW9DQyxjQUFjLEtBQWxELEVBQTVCO0FBQ0E7QUFDQU4sZ0JBQWNPLFFBQWQsQ0FBdUJDLE9BQXZCLENBQStCQyxNQUEvQixDQUFzQyxrQkFBdEMsSUFBNEQsZ0JBQTVEO0FBQ0FULGdCQUFjTyxRQUFkLENBQXVCRyxjQUF2QixHQUF3QyxXQUF4QztBQUNBVixnQkFBY08sUUFBZCxDQUF1QkksY0FBdkIsR0FBd0MsYUFBeEM7QUFDQTs7QUFFRCxJQUFJQyxNQUFNQyxRQUFRQyxNQUFSLENBQWUsUUFBZixFQUF5QixDQUNqQyxXQURpQyxFQUVqQyxPQUZpQyxFQUdqQyxjQUhpQyxFQUlqQyxXQUppQyxFQUtqQyxZQUxpQyxFQU1qQyxVQU5pQyxFQU9qQyxXQVBpQyxFQVFqQyx3QkFSaUMsRUFTakMsV0FUaUMsRUFVakMsYUFWaUMsRUFXakMsWUFYaUMsRUFZakMsY0FaaUMsRUFhakMsZ0JBYmlDLEVBY2pDLG1CQWRpQyxFQWVqQyxnQkFmaUMsRUFnQmpDLGtCQWhCaUMsRUFpQmpDLG1CQWpCaUMsRUFrQmpDLGVBbEJpQyxDQUF6QixFQW1CUGYsTUFuQk8sQ0FtQkFBLE1BbkJBLENBQVY7O2tCQXFCZWEsRyIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHttb2QgYXMgZGlyZWN0aXZlc30gZnJvbSAnLi9uZy1kZXNpZ25zYWZlLWRpcmVjdGl2ZXMnO1xuaW1wb3J0IHttb2QgYXMgZmlsdGVyc30gZnJvbSAnLi9uZy1kZXNpZ25zYWZlLWZpbHRlcnMnO1xuaW1wb3J0IHttb2QgYXMgbmdfbW9kZXJuaXplcn0gZnJvbSAnLi9uZy1tb2Rlcm5penInO1xuaW1wb3J0IHttb2QgYXMgd29ya3NwYWNlfSBmcm9tICcuL3dvcmtzcGFjZSc7XG5pbXBvcnQge21vZCBhcyBkYXRhX2RlcG90fSBmcm9tICcuL2RhdGFfZGVwb3QnO1xuaW1wb3J0IHttb2QgYXMgc2VhcmNofSBmcm9tICcuL3NlYXJjaCc7XG5cbmZ1bmN0aW9uIGNvbmZpZygkaHR0cFByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlciwgJHVybE1hdGNoZXJGYWN0b3J5UHJvdmlkZXIpIHtcbiAnbmdJbmplY3QnO1xuICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh7IGVuYWJsZWQ6IHRydWUsIHJlcXVpcmVCYXNlOiB0cnVlLCByZXdyaXRlTGlua3M6IGZhbHNlfSk7XG4gLy8gJHVybE1hdGNoZXJGYWN0b3J5UHJvdmlkZXIuc3RyaWN0TW9kZShmYWxzZSk7XG4gJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1SZXF1ZXN0ZWQtV2l0aCddID0gJ1hNTEh0dHBSZXF1ZXN0JztcbiAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLnhzcmZDb29raWVOYW1lID0gJ2NzcmZ0b2tlbic7XG4gJGh0dHBQcm92aWRlci5kZWZhdWx0cy54c3JmSGVhZGVyTmFtZSA9ICdYLUNTUkZUb2tlbic7XG59XG5cbmxldCBtb2QgPSBhbmd1bGFyLm1vZHVsZSgncG9ydGFsJywgW1xuICAnbmdDb29raWVzJyxcbiAgJ2h0dHBpJyxcbiAgJ3VpLmJvb3RzdHJhcCcsXG4gICd1aS5yb3V0ZXInLFxuICAnc2NoZW1hRm9ybScsXG4gICdkbmRMaXN0cycsXG4gICd4ZWRpdGFibGUnLFxuICAncGFzY2FscHJlY2h0LnRyYW5zbGF0ZScsXG4gICduZ1N0b3JhZ2UnLFxuICAnbmdXZWJTb2NrZXQnLFxuICAnbmdNYXRlcmlhbCcsXG4gICduZy5tb2Rlcm5penInLFxuICAnZGphbmdvLmNvbnRleHQnLFxuICAncG9ydGFsLmRpcmVjdGl2ZXMnLFxuICAncG9ydGFsLmZpbHRlcnMnLFxuICAncG9ydGFsLndvcmtzcGFjZScsXG4gICdwb3J0YWwuZGF0YV9kZXBvdCcsXG4gICdwb3J0YWwuc2VhcmNoJyxcbl0pLmNvbmZpZyhjb25maWcpO1xuXG5leHBvcnQgZGVmYXVsdCBtb2Q7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvbWFpbi5tb2R1bGUuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = CommunityDataCtrl;\nfunction CommunityDataCtrl($scope, $state, $stateParams, Django, DataBrowserService) {\n  'ngInject';\n\n  var options = {\n    system: $stateParams.systemId,\n    path: $stateParams.filePath || '/'\n  };\n  $scope.data = {\n    customRoot: {\n      name: 'Community Data',\n      href: $state.href('db.communityData', { systemId: $stateParams.systemId,\n        filePath: '/' })\n    }\n  };\n  DataBrowserService.apiParams.fileMgr = 'shared';\n  DataBrowserService.apiParams.baseUrl = '/api/data-depot/files';\n  DataBrowserService.apiParams.searchState = 'dataSearch';\n\n  $scope.browser = DataBrowserService.state();\n  DataBrowserService.browse(options).then(function (resp) {\n    $scope.browser = DataBrowserService.state();\n  });\n\n  $scope.state = {\n    loadingMore: false,\n    reachedEnd: false,\n    page: 0\n  };\n\n  // if (! $scope.browser.error){\n  //   $scope.browser.listing.href = $state.href('communityData', {\n  //     system: $scope.browser.listing.system,\n  //     filePath: $scope.browser.listing.path\n  //   });\n  //   _.each($scope.browser.listing.children, function (child) {\n  //     child.href = $state.href('communityData', {system: child.system, filePath: child.path});\n  //   });\n  // }\n\n\n  $scope.resolveBreadcrumbHref = function (trailItem) {\n    return $state.href('db.communityData', { systemId: $scope.browser.listing.system, filePath: trailItem.path });\n  };\n\n  $scope.scrollToTop = function () {\n    return;\n  };\n  $scope.scrollToBottom = function () {\n    DataBrowserService.scrollToBottom();\n  };\n\n  $scope.onBrowse = function ($event, file) {\n    $event.preventDefault();\n    $event.stopPropagation();\n\n    var systemId = file.system || file.systemId;\n    var filePath;\n    if (file.path == '/') {\n      filePath = file.path + file.name;\n    } else {\n      filePath = file.path;\n    }\n    if (file.type === 'file') {\n      DataBrowserService.preview(file, $scope.browser.listing);\n    } else {\n      $state.go('db.communityData', { systemId: file.system, filePath: file.path });\n    }\n  };\n\n  $scope.onSelect = function ($event, file) {\n    $event.preventDefault();\n    $event.stopPropagation();\n\n    if ($event.ctrlKey || $event.metaKey) {\n      var selectedIndex = $scope.browser.selected.indexOf(file);\n      if (selectedIndex > -1) {\n        DataBrowserService.deselect([file]);\n      } else {\n        DataBrowserService.select([file]);\n      }\n    } else if ($event.shiftKey && $scope.browser.selected.length > 0) {\n      var lastFile = $scope.browser.selected[$scope.browser.selected.length - 1];\n      var lastIndex = $scope.browser.listing.children.indexOf(lastFile);\n      var fileIndex = $scope.browser.listing.children.indexOf(file);\n      var min = Math.min(lastIndex, fileIndex);\n      var max = Math.max(lastIndex, fileIndex);\n      DataBrowserService.select($scope.browser.listing.children.slice(min, max + 1));\n    } else if (typeof file._ui !== 'undefined' && file._ui.selected) {\n      DataBrowserService.deselect([file]);\n    } else {\n      DataBrowserService.select([file], true);\n    }\n  };\n\n  $scope.showFullPath = function (item) {\n    if ($scope.browser.listing.path != '$PUBLIC' && item.parentPath() != $scope.browser.listing.path && item.parentPath() != '/') {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  $scope.onDetail = function ($event, file) {\n    $event.stopPropagation();\n    DataBrowserService.preview(file, $scope.browser.listing);\n  };\n\n  $scope.renderName = function (file) {\n    if (typeof file.metadata === 'undefined' || file.metadata === null || _.isEmpty(file.metadata)) {\n      return file.name;\n    }\n    var pathComps = file.path.split('/');\n    var experiment_re = /^experiment/;\n    if (file.path[0] === '/' && pathComps.length === 2) {\n      return file.metadata.project.title;\n    } else if (file.path[0] !== '/' && pathComps.length === 2 && experiment_re.test(file.name.toLowerCase())) {\n      return file.metadata.experiments[0].title;\n    }\n    return file.name;\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DataDepotNavCtrl;\nfunction DataDepotNavCtrl($scope, $rootScope, $state, Django, SystemsService) {\n  'ngInject';\n\n  $scope.routerItems = [];\n  SystemsService.listing().then(function (resp) {\n    var com_data = _.find(resp, { name: 'Community Data' });\n    var my_data = _.find(resp, { name: \"My Data\" });\n    $scope.routerItems.push({\n      name: 'My Data',\n      collapsible: false,\n      state: 'db.myData({systemId:\"' + my_data.systemId + '\", filePath:\"\"})',\n      description: 'Private directory for your data',\n      icon: 'fa-user'\n    });\n    $scope.routerItems.push({\n      name: 'My Projects',\n      collapsible: false,\n      state: 'db.projects.list',\n      description: 'Group access to shared directories',\n      icon: 'fa-briefcase'\n    });\n    $scope.routerItems.push({\n      name: 'Community Data',\n      collapsible: false,\n      state: 'db.communityData({systemId:\"' + com_data.systemId + '\", filePath:\"/\"})',\n      description: 'Non-curated user-contributed data',\n      icon: 'fa-users'\n    });\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvZGF0YV9kZXBvdC9jb250cm9sbGVycy9kYXRhLWRlcG90LW5hdi5qcz84MDUzIl0sIm5hbWVzIjpbIkRhdGFEZXBvdE5hdkN0cmwiLCIkc2NvcGUiLCIkcm9vdFNjb3BlIiwiJHN0YXRlIiwiRGphbmdvIiwiU3lzdGVtc1NlcnZpY2UiLCJyb3V0ZXJJdGVtcyIsImxpc3RpbmciLCJ0aGVuIiwicmVzcCIsImNvbV9kYXRhIiwiXyIsImZpbmQiLCJuYW1lIiwibXlfZGF0YSIsInB1c2giLCJjb2xsYXBzaWJsZSIsInN0YXRlIiwic3lzdGVtSWQiLCJkZXNjcmlwdGlvbiIsImljb24iXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUF3QkEsZ0I7QUFBVCxTQUFTQSxnQkFBVCxDQUEwQkMsTUFBMUIsRUFBa0NDLFVBQWxDLEVBQThDQyxNQUE5QyxFQUFzREMsTUFBdEQsRUFBOERDLGNBQTlELEVBQThFO0FBQzNGOztBQUNBSixTQUFPSyxXQUFQLEdBQXFCLEVBQXJCO0FBQ0FELGlCQUFlRSxPQUFmLEdBQXlCQyxJQUF6QixDQUE4QixVQUFVQyxJQUFWLEVBQWdCO0FBQzVDLFFBQUlDLFdBQVdDLEVBQUVDLElBQUYsQ0FBT0gsSUFBUCxFQUFhLEVBQUNJLE1BQU0sZ0JBQVAsRUFBYixDQUFmO0FBQ0EsUUFBSUMsVUFBVUgsRUFBRUMsSUFBRixDQUFPSCxJQUFQLEVBQWEsRUFBQ0ksTUFBTSxTQUFQLEVBQWIsQ0FBZDtBQUNBWixXQUFPSyxXQUFQLENBQW1CUyxJQUFuQixDQUNFO0FBQ0VGLFlBQU0sU0FEUjtBQUVFRyxtQkFBYSxLQUZmO0FBR0VDLGFBQU8sMEJBQTBCSCxRQUFRSSxRQUFsQyxHQUE0QyxrQkFIckQ7QUFJRUMsbUJBQWEsaUNBSmY7QUFLRUMsWUFBTTtBQUxSLEtBREY7QUFTQW5CLFdBQU9LLFdBQVAsQ0FBbUJTLElBQW5CLENBQ0k7QUFDRUYsWUFBTSxhQURSO0FBRUVHLG1CQUFhLEtBRmY7QUFHRUMsYUFBTyxrQkFIVDtBQUlFRSxtQkFBYSxvQ0FKZjtBQUtFQyxZQUFNO0FBTFIsS0FESjtBQVNBbkIsV0FBT0ssV0FBUCxDQUFtQlMsSUFBbkIsQ0FDSTtBQUNFRixZQUFNLGdCQURSO0FBRUVHLG1CQUFhLEtBRmY7QUFHRUMsYUFBTyxpQ0FBaUNQLFNBQVNRLFFBQTFDLEdBQXFELG1CQUg5RDtBQUlFQyxtQkFBYSxtQ0FKZjtBQUtFQyxZQUFNO0FBTFIsS0FESjtBQVNELEdBOUJEO0FBZ0NEIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEYXRhRGVwb3ROYXZDdHJsKCRzY29wZSwgJHJvb3RTY29wZSwgJHN0YXRlLCBEamFuZ28sIFN5c3RlbXNTZXJ2aWNlKSB7XG4gICduZ0luamVjdCc7XG4gICRzY29wZS5yb3V0ZXJJdGVtcyA9IFtdO1xuICBTeXN0ZW1zU2VydmljZS5saXN0aW5nKCkudGhlbihmdW5jdGlvbiAocmVzcCkge1xuICAgIHZhciBjb21fZGF0YSA9IF8uZmluZChyZXNwLCB7bmFtZTogJ0NvbW11bml0eSBEYXRhJ30pO1xuICAgIHZhciBteV9kYXRhID0gXy5maW5kKHJlc3AsIHtuYW1lOiBcIk15IERhdGFcIn0pO1xuICAgICRzY29wZS5yb3V0ZXJJdGVtcy5wdXNoKFxuICAgICAge1xuICAgICAgICBuYW1lOiAnTXkgRGF0YScsXG4gICAgICAgIGNvbGxhcHNpYmxlOiBmYWxzZSxcbiAgICAgICAgc3RhdGU6ICdkYi5teURhdGEoe3N5c3RlbUlkOlwiJyArIG15X2RhdGEuc3lzdGVtSWQgKydcIiwgZmlsZVBhdGg6XCJcIn0pJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdQcml2YXRlIGRpcmVjdG9yeSBmb3IgeW91ciBkYXRhJyxcbiAgICAgICAgaWNvbjogJ2ZhLXVzZXInXG4gICAgICB9XG4gICAgKTtcbiAgICAkc2NvcGUucm91dGVySXRlbXMucHVzaChcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdNeSBQcm9qZWN0cycsXG4gICAgICAgICAgY29sbGFwc2libGU6IGZhbHNlLFxuICAgICAgICAgIHN0YXRlOiAnZGIucHJvamVjdHMubGlzdCcsXG4gICAgICAgICAgZGVzY3JpcHRpb246ICdHcm91cCBhY2Nlc3MgdG8gc2hhcmVkIGRpcmVjdG9yaWVzJyxcbiAgICAgICAgICBpY29uOiAnZmEtYnJpZWZjYXNlJ1xuICAgICAgICB9XG4gICAgKTtcbiAgICAkc2NvcGUucm91dGVySXRlbXMucHVzaChcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdDb21tdW5pdHkgRGF0YScsXG4gICAgICAgICAgY29sbGFwc2libGU6IGZhbHNlLFxuICAgICAgICAgIHN0YXRlOiAnZGIuY29tbXVuaXR5RGF0YSh7c3lzdGVtSWQ6XCInICsgY29tX2RhdGEuc3lzdGVtSWQgKyAnXCIsIGZpbGVQYXRoOlwiL1wifSknLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnTm9uLWN1cmF0ZWQgdXNlci1jb250cmlidXRlZCBkYXRhJyxcbiAgICAgICAgICBpY29uOiAnZmEtdXNlcnMnXG4gICAgICAgIH1cbiAgICApO1xuICB9KTtcblxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcG9ydGFsL3N0YXRpYy9wb3J0YWwvc2NyaXB0cy9hbmd1bGFyL2RhdGFfZGVwb3QvY29udHJvbGxlcnMvZGF0YS1kZXBvdC1uYXYuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DataDepotNewCtrl;\nfunction DataDepotNewCtrl($scope, $state, Django, DataBrowserService) {\n  'ngInject';\n\n  $scope.test = {\n    enabled: Django.context.authenticated,\n    createFiles: false,\n    createProject: Django.context.authenticated\n  };\n\n  $scope.browser = DataBrowserService.state();\n\n  $scope.$watch('browser.listing', function () {\n    $scope.test.createFiles = false;\n    if ($scope.browser.listing) {\n      $scope.browser.listing.listPermissions().then(function (res) {\n        var pems = res.response;\n        $scope.test.createFiles = _.findWhere(pems, { username: Django.user }).permission.write;\n      });\n    }\n  });\n\n  $scope.createFolder = function ($event) {\n    if ($scope.test.createFiles) {\n      DataBrowserService.mkdir();\n    } else {\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n  };\n\n  $scope.createProject = function ($event) {\n    if ($scope.test.createProject) {\n      ProjectService.editProject().then(function (project) {\n        $state.go('projects.view.data', { projectId: project.uuid, filePath: '/' });\n      });\n    } else {\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n  };\n\n  $scope.uploadFiles = function ($event) {\n    if ($scope.test.createFiles) {\n      DataBrowserService.upload(false);\n    } else {\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n  };\n\n  $scope.uploadFolders = function ($event) {\n    if ($scope.test.createFiles) {\n      DataBrowserService.upload(true);\n    } else {\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvZGF0YV9kZXBvdC9jb250cm9sbGVycy9kYXRhLWRlcG90LW5ldy5qcz9jZWQ4Il0sIm5hbWVzIjpbIkRhdGFEZXBvdE5ld0N0cmwiLCIkc2NvcGUiLCIkc3RhdGUiLCJEamFuZ28iLCJEYXRhQnJvd3NlclNlcnZpY2UiLCJ0ZXN0IiwiZW5hYmxlZCIsImNvbnRleHQiLCJhdXRoZW50aWNhdGVkIiwiY3JlYXRlRmlsZXMiLCJjcmVhdGVQcm9qZWN0IiwiYnJvd3NlciIsInN0YXRlIiwiJHdhdGNoIiwibGlzdGluZyIsImxpc3RQZXJtaXNzaW9ucyIsInRoZW4iLCJyZXMiLCJwZW1zIiwicmVzcG9uc2UiLCJfIiwiZmluZFdoZXJlIiwidXNlcm5hbWUiLCJ1c2VyIiwicGVybWlzc2lvbiIsIndyaXRlIiwiY3JlYXRlRm9sZGVyIiwiJGV2ZW50IiwibWtkaXIiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsIlByb2plY3RTZXJ2aWNlIiwiZWRpdFByb2plY3QiLCJwcm9qZWN0IiwiZ28iLCJwcm9qZWN0SWQiLCJ1dWlkIiwiZmlsZVBhdGgiLCJ1cGxvYWRGaWxlcyIsInVwbG9hZCIsInVwbG9hZEZvbGRlcnMiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUF3QkEsZ0I7QUFBVCxTQUFTQSxnQkFBVCxDQUEwQkMsTUFBMUIsRUFBa0NDLE1BQWxDLEVBQTBDQyxNQUExQyxFQUFrREMsa0JBQWxELEVBQXNFO0FBQ25GOztBQUNBSCxTQUFPSSxJQUFQLEdBQWM7QUFDWkMsYUFBU0gsT0FBT0ksT0FBUCxDQUFlQyxhQURaO0FBRVpDLGlCQUFhLEtBRkQ7QUFHWkMsbUJBQWVQLE9BQU9JLE9BQVAsQ0FBZUM7QUFIbEIsR0FBZDs7QUFNQVAsU0FBT1UsT0FBUCxHQUFpQlAsbUJBQW1CUSxLQUFuQixFQUFqQjs7QUFFQVgsU0FBT1ksTUFBUCxDQUFjLGlCQUFkLEVBQWlDLFlBQVc7QUFDMUNaLFdBQU9JLElBQVAsQ0FBWUksV0FBWixHQUEwQixLQUExQjtBQUNBLFFBQUlSLE9BQU9VLE9BQVAsQ0FBZUcsT0FBbkIsRUFBNEI7QUFDMUJiLGFBQU9VLE9BQVAsQ0FBZUcsT0FBZixDQUF1QkMsZUFBdkIsR0FBeUNDLElBQXpDLENBQThDLFVBQVVDLEdBQVYsRUFBZTtBQUMzRCxZQUFJQyxPQUFPRCxJQUFJRSxRQUFmO0FBQ0FsQixlQUFPSSxJQUFQLENBQVlJLFdBQVosR0FBMEJXLEVBQUVDLFNBQUYsQ0FBWUgsSUFBWixFQUFrQixFQUFDSSxVQUFVbkIsT0FBT29CLElBQWxCLEVBQWxCLEVBQTJDQyxVQUEzQyxDQUFzREMsS0FBaEY7QUFDRCxPQUhEO0FBSUQ7QUFDRixHQVJEOztBQVVBeEIsU0FBT3lCLFlBQVAsR0FBc0IsVUFBU0MsTUFBVCxFQUFpQjtBQUNyQyxRQUFJMUIsT0FBT0ksSUFBUCxDQUFZSSxXQUFoQixFQUE2QjtBQUMzQkwseUJBQW1Cd0IsS0FBbkI7QUFDRCxLQUZELE1BRU87QUFDTEQsYUFBT0UsY0FBUDtBQUNBRixhQUFPRyxlQUFQO0FBQ0Q7QUFDRixHQVBEOztBQVNBN0IsU0FBT1MsYUFBUCxHQUF1QixVQUFTaUIsTUFBVCxFQUFpQjtBQUN0QyxRQUFJMUIsT0FBT0ksSUFBUCxDQUFZSyxhQUFoQixFQUErQjtBQUM3QnFCLHFCQUFlQyxXQUFmLEdBQTZCaEIsSUFBN0IsQ0FBa0MsVUFBVWlCLE9BQVYsRUFBbUI7QUFDbkQvQixlQUFPZ0MsRUFBUCxDQUFVLG9CQUFWLEVBQWdDLEVBQUNDLFdBQVdGLFFBQVFHLElBQXBCLEVBQTBCQyxVQUFVLEdBQXBDLEVBQWhDO0FBQ0QsT0FGRDtBQUdELEtBSkQsTUFJTztBQUNMVixhQUFPRSxjQUFQO0FBQ0FGLGFBQU9HLGVBQVA7QUFDRDtBQUNGLEdBVEQ7O0FBV0E3QixTQUFPcUMsV0FBUCxHQUFxQixVQUFTWCxNQUFULEVBQWlCO0FBQ3BDLFFBQUkxQixPQUFPSSxJQUFQLENBQVlJLFdBQWhCLEVBQTZCO0FBQzNCTCx5QkFBbUJtQyxNQUFuQixDQUEwQixLQUExQjtBQUNELEtBRkQsTUFFTztBQUNMWixhQUFPRSxjQUFQO0FBQ0FGLGFBQU9HLGVBQVA7QUFDRDtBQUNGLEdBUEQ7O0FBU0E3QixTQUFPdUMsYUFBUCxHQUF1QixVQUFTYixNQUFULEVBQWlCO0FBQ3RDLFFBQUkxQixPQUFPSSxJQUFQLENBQVlJLFdBQWhCLEVBQTZCO0FBQzNCTCx5QkFBbUJtQyxNQUFuQixDQUEwQixJQUExQjtBQUNELEtBRkQsTUFFTztBQUNMWixhQUFPRSxjQUFQO0FBQ0FGLGFBQU9HLGVBQVA7QUFDRDtBQUNGLEdBUEQ7QUFTRCIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRGF0YURlcG90TmV3Q3RybCgkc2NvcGUsICRzdGF0ZSwgRGphbmdvLCBEYXRhQnJvd3NlclNlcnZpY2UpIHtcbiAgJ25nSW5qZWN0JztcbiAgJHNjb3BlLnRlc3QgPSB7XG4gICAgZW5hYmxlZDogRGphbmdvLmNvbnRleHQuYXV0aGVudGljYXRlZCxcbiAgICBjcmVhdGVGaWxlczogZmFsc2UsXG4gICAgY3JlYXRlUHJvamVjdDogRGphbmdvLmNvbnRleHQuYXV0aGVudGljYXRlZFxuICB9O1xuXG4gICRzY29wZS5icm93c2VyID0gRGF0YUJyb3dzZXJTZXJ2aWNlLnN0YXRlKCk7XG5cbiAgJHNjb3BlLiR3YXRjaCgnYnJvd3Nlci5saXN0aW5nJywgZnVuY3Rpb24oKSB7XG4gICAgJHNjb3BlLnRlc3QuY3JlYXRlRmlsZXMgPSBmYWxzZTtcbiAgICBpZiAoJHNjb3BlLmJyb3dzZXIubGlzdGluZykge1xuICAgICAgJHNjb3BlLmJyb3dzZXIubGlzdGluZy5saXN0UGVybWlzc2lvbnMoKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgdmFyIHBlbXMgPSByZXMucmVzcG9uc2U7XG4gICAgICAgICRzY29wZS50ZXN0LmNyZWF0ZUZpbGVzID0gXy5maW5kV2hlcmUocGVtcywge3VzZXJuYW1lOiBEamFuZ28udXNlcn0pLnBlcm1pc3Npb24ud3JpdGU7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gICRzY29wZS5jcmVhdGVGb2xkZXIgPSBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICBpZiAoJHNjb3BlLnRlc3QuY3JlYXRlRmlsZXMpIHtcbiAgICAgIERhdGFCcm93c2VyU2VydmljZS5ta2RpcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLmNyZWF0ZVByb2plY3QgPSBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICBpZiAoJHNjb3BlLnRlc3QuY3JlYXRlUHJvamVjdCkge1xuICAgICAgUHJvamVjdFNlcnZpY2UuZWRpdFByb2plY3QoKS50aGVuKGZ1bmN0aW9uIChwcm9qZWN0KSB7XG4gICAgICAgICRzdGF0ZS5nbygncHJvamVjdHMudmlldy5kYXRhJywge3Byb2plY3RJZDogcHJvamVjdC51dWlkLCBmaWxlUGF0aDogJy8nfSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gICRzY29wZS51cGxvYWRGaWxlcyA9IGZ1bmN0aW9uKCRldmVudCkge1xuICAgIGlmICgkc2NvcGUudGVzdC5jcmVhdGVGaWxlcykge1xuICAgICAgRGF0YUJyb3dzZXJTZXJ2aWNlLnVwbG9hZChmYWxzZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICAkc2NvcGUudXBsb2FkRm9sZGVycyA9IGZ1bmN0aW9uKCRldmVudCkge1xuICAgIGlmICgkc2NvcGUudGVzdC5jcmVhdGVGaWxlcykge1xuICAgICAgRGF0YUJyb3dzZXJTZXJ2aWNlLnVwbG9hZCh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9O1xuXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcG9ydGFsL3N0YXRpYy9wb3J0YWwvc2NyaXB0cy9hbmd1bGFyL2RhdGFfZGVwb3QvY29udHJvbGxlcnMvZGF0YS1kZXBvdC1uZXcuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DataDepotToolbarCtrl;\nfunction DataDepotToolbarCtrl($scope, $state, $uibModal, Django, DataBrowserService) {\n  'ngInject';\n\n  $scope.search = { queryString: '' };\n  $scope.browser = DataBrowserService.state();\n\n  DataBrowserService.subscribe($scope, function ($event, eventData) {\n    if (eventData.type === DataBrowserService.FileEvents.FILE_SELECTION) {\n      updateToolbar();\n    }\n  });\n\n  $scope.tests = {};\n\n  /**\n   * Update the toolbar's status for various functions.\n   */\n  function updateToolbar() {\n    $scope.tests = DataBrowserService.allowedActions($scope.browser.selected);\n  }\n\n  /* Set initial toolbar status */\n  updateToolbar();\n  $scope.apiParams = DataBrowserService.apiParameters();\n  $scope.toolbarOptions = DataBrowserService.toolbarOptions();\n\n  /* Map service functions to toolbar buttons */\n  $scope.ops = {\n    details: function details() {\n      // preview the last selected file or current listing if none selected\n      if ($scope.browser.selected.length > 0) {\n        DataBrowserService.preview($scope.browser.selected.slice(-1)[0]);\n      } else {\n        DataBrowserService.preview($scope.browser.listing);\n      }\n    },\n    download: function download() {\n      DataBrowserService.download($scope.browser.selected);\n    },\n    preview: function preview() {\n      DataBrowserService.preview($scope.browser.selected[0], $scope.browser.listing);\n    },\n    previewImages: function previewImages() {\n      DataBrowserService.previewImages($scope.browser.listing);\n    },\n    viewMetadata: function viewMetadata() {\n      DataBrowserService.viewMetadata($scope.browser.selected, $scope.browser.listing);\n    },\n    viewCategories: function viewCategories() {\n      DataBrowserService.viewCategories($scope.browser.selected, $scope.browser.listing);\n    },\n    share: function share() {\n      DataBrowserService.share($scope.browser.selected[0]);\n    },\n    copy: function copy() {\n      DataBrowserService.copy($scope.browser.selected);\n    },\n    move: function move() {\n      DataBrowserService.move($scope.browser.selected, $scope.browser.listing);\n    },\n    rename: function rename() {\n      DataBrowserService.rename($scope.browser.selected[0]);\n    },\n    trash: function trash() {\n      DataBrowserService.trash($scope.browser.selected);\n    },\n    rm: function rm() {\n      DataBrowserService.rm($scope.browser.selected);\n    },\n    search: function search() {\n      var state = $scope.apiParams.searchState;\n      $state.go(state, { 'query_string': $scope.search.queryString,\n        'systemId': $scope.browser.listing.system,\n        'filePath': '$SEARCH' });\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvZGF0YV9kZXBvdC9jb250cm9sbGVycy9kYXRhLWRlcG90LXRvb2xiYXIuanM/MzBhNCJdLCJuYW1lcyI6WyJEYXRhRGVwb3RUb29sYmFyQ3RybCIsIiRzY29wZSIsIiRzdGF0ZSIsIiR1aWJNb2RhbCIsIkRqYW5nbyIsIkRhdGFCcm93c2VyU2VydmljZSIsInNlYXJjaCIsInF1ZXJ5U3RyaW5nIiwiYnJvd3NlciIsInN0YXRlIiwic3Vic2NyaWJlIiwiJGV2ZW50IiwiZXZlbnREYXRhIiwidHlwZSIsIkZpbGVFdmVudHMiLCJGSUxFX1NFTEVDVElPTiIsInVwZGF0ZVRvb2xiYXIiLCJ0ZXN0cyIsImFsbG93ZWRBY3Rpb25zIiwic2VsZWN0ZWQiLCJhcGlQYXJhbXMiLCJhcGlQYXJhbWV0ZXJzIiwidG9vbGJhck9wdGlvbnMiLCJvcHMiLCJkZXRhaWxzIiwibGVuZ3RoIiwicHJldmlldyIsInNsaWNlIiwibGlzdGluZyIsImRvd25sb2FkIiwicHJldmlld0ltYWdlcyIsInZpZXdNZXRhZGF0YSIsInZpZXdDYXRlZ29yaWVzIiwic2hhcmUiLCJjb3B5IiwibW92ZSIsInJlbmFtZSIsInRyYXNoIiwicm0iLCJzZWFyY2hTdGF0ZSIsImdvIiwic3lzdGVtIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFBd0JBLG9CO0FBQVQsU0FBU0Esb0JBQVQsQ0FBOEJDLE1BQTlCLEVBQXNDQyxNQUF0QyxFQUE4Q0MsU0FBOUMsRUFBeURDLE1BQXpELEVBQWlFQyxrQkFBakUsRUFBcUY7QUFDbEc7O0FBQ0FKLFNBQU9LLE1BQVAsR0FBZ0IsRUFBQ0MsYUFBYyxFQUFmLEVBQWhCO0FBQ0FOLFNBQU9PLE9BQVAsR0FBaUJILG1CQUFtQkksS0FBbkIsRUFBakI7O0FBRUFKLHFCQUFtQkssU0FBbkIsQ0FBNkJULE1BQTdCLEVBQXFDLFVBQVNVLE1BQVQsRUFBaUJDLFNBQWpCLEVBQTRCO0FBQy9ELFFBQUlBLFVBQVVDLElBQVYsS0FBbUJSLG1CQUFtQlMsVUFBbkIsQ0FBOEJDLGNBQXJELEVBQXFFO0FBQ25FQztBQUNEO0FBQ0YsR0FKRDs7QUFNQWYsU0FBT2dCLEtBQVAsR0FBZSxFQUFmOztBQUVBOzs7QUFHQSxXQUFTRCxhQUFULEdBQXlCO0FBQ3ZCZixXQUFPZ0IsS0FBUCxHQUFlWixtQkFBbUJhLGNBQW5CLENBQWtDakIsT0FBT08sT0FBUCxDQUFlVyxRQUFqRCxDQUFmO0FBQ0Q7O0FBRUQ7QUFDQUg7QUFDQWYsU0FBT21CLFNBQVAsR0FBbUJmLG1CQUFtQmdCLGFBQW5CLEVBQW5CO0FBQ0FwQixTQUFPcUIsY0FBUCxHQUF3QmpCLG1CQUFtQmlCLGNBQW5CLEVBQXhCOztBQUVBO0FBQ0FyQixTQUFPc0IsR0FBUCxHQUFhO0FBQ1hDLGFBQVMsbUJBQVc7QUFDbEI7QUFDQSxVQUFJdkIsT0FBT08sT0FBUCxDQUFlVyxRQUFmLENBQXdCTSxNQUF4QixHQUFpQyxDQUFyQyxFQUF3QztBQUN0Q3BCLDJCQUFtQnFCLE9BQW5CLENBQTJCekIsT0FBT08sT0FBUCxDQUFlVyxRQUFmLENBQXdCUSxLQUF4QixDQUE4QixDQUFDLENBQS9CLEVBQWtDLENBQWxDLENBQTNCO0FBQ0QsT0FGRCxNQUVPO0FBQ0x0QiwyQkFBbUJxQixPQUFuQixDQUEyQnpCLE9BQU9PLE9BQVAsQ0FBZW9CLE9BQTFDO0FBQ0Q7QUFDRixLQVJVO0FBU1hDLGNBQVUsb0JBQVc7QUFDbkJ4Qix5QkFBbUJ3QixRQUFuQixDQUE0QjVCLE9BQU9PLE9BQVAsQ0FBZVcsUUFBM0M7QUFDRCxLQVhVO0FBWVhPLGFBQVMsbUJBQVk7QUFDbkJyQix5QkFBbUJxQixPQUFuQixDQUEyQnpCLE9BQU9PLE9BQVAsQ0FBZVcsUUFBZixDQUF3QixDQUF4QixDQUEzQixFQUF1RGxCLE9BQU9PLE9BQVAsQ0FBZW9CLE9BQXRFO0FBQ0QsS0FkVTtBQWVYRSxtQkFBZSx5QkFBWTtBQUN6QnpCLHlCQUFtQnlCLGFBQW5CLENBQWlDN0IsT0FBT08sT0FBUCxDQUFlb0IsT0FBaEQ7QUFDRCxLQWpCVTtBQWtCWEcsa0JBQWMsd0JBQVk7QUFDeEIxQix5QkFBbUIwQixZQUFuQixDQUFnQzlCLE9BQU9PLE9BQVAsQ0FBZVcsUUFBL0MsRUFBeURsQixPQUFPTyxPQUFQLENBQWVvQixPQUF4RTtBQUNELEtBcEJVO0FBcUJYSSxvQkFBZ0IsMEJBQVc7QUFDekIzQix5QkFBbUIyQixjQUFuQixDQUFrQy9CLE9BQU9PLE9BQVAsQ0FBZVcsUUFBakQsRUFBMkRsQixPQUFPTyxPQUFQLENBQWVvQixPQUExRTtBQUNELEtBdkJVO0FBd0JYSyxXQUFPLGlCQUFZO0FBQ2pCNUIseUJBQW1CNEIsS0FBbkIsQ0FBeUJoQyxPQUFPTyxPQUFQLENBQWVXLFFBQWYsQ0FBd0IsQ0FBeEIsQ0FBekI7QUFDRCxLQTFCVTtBQTJCWGUsVUFBTSxnQkFBWTtBQUNoQjdCLHlCQUFtQjZCLElBQW5CLENBQXdCakMsT0FBT08sT0FBUCxDQUFlVyxRQUF2QztBQUNELEtBN0JVO0FBOEJYZ0IsVUFBTSxnQkFBWTtBQUNoQjlCLHlCQUFtQjhCLElBQW5CLENBQXdCbEMsT0FBT08sT0FBUCxDQUFlVyxRQUF2QyxFQUFpRGxCLE9BQU9PLE9BQVAsQ0FBZW9CLE9BQWhFO0FBQ0QsS0FoQ1U7QUFpQ1hRLFlBQVEsa0JBQVk7QUFDbEIvQix5QkFBbUIrQixNQUFuQixDQUEwQm5DLE9BQU9PLE9BQVAsQ0FBZVcsUUFBZixDQUF3QixDQUF4QixDQUExQjtBQUNELEtBbkNVO0FBb0NYa0IsV0FBTyxpQkFBWTtBQUNqQmhDLHlCQUFtQmdDLEtBQW5CLENBQXlCcEMsT0FBT08sT0FBUCxDQUFlVyxRQUF4QztBQUNELEtBdENVO0FBdUNYbUIsUUFBSSxjQUFZO0FBQ2RqQyx5QkFBbUJpQyxFQUFuQixDQUFzQnJDLE9BQU9PLE9BQVAsQ0FBZVcsUUFBckM7QUFDRCxLQXpDVTtBQTBDWGIsWUFBUSxrQkFBVTtBQUNoQixVQUFJRyxRQUFRUixPQUFPbUIsU0FBUCxDQUFpQm1CLFdBQTdCO0FBQ0FyQyxhQUFPc0MsRUFBUCxDQUFVL0IsS0FBVixFQUFpQixFQUFDLGdCQUFnQlIsT0FBT0ssTUFBUCxDQUFjQyxXQUEvQjtBQUNOLG9CQUFZTixPQUFPTyxPQUFQLENBQWVvQixPQUFmLENBQXVCYSxNQUQ3QjtBQUVOLG9CQUFZLFNBRk4sRUFBakI7QUFHRDtBQS9DVSxHQUFiO0FBaUREIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEYXRhRGVwb3RUb29sYmFyQ3RybCgkc2NvcGUsICRzdGF0ZSwgJHVpYk1vZGFsLCBEamFuZ28sIERhdGFCcm93c2VyU2VydmljZSkge1xuICAnbmdJbmplY3QnO1xuICAkc2NvcGUuc2VhcmNoID0ge3F1ZXJ5U3RyaW5nIDogJyd9O1xuICAkc2NvcGUuYnJvd3NlciA9IERhdGFCcm93c2VyU2VydmljZS5zdGF0ZSgpO1xuXG4gIERhdGFCcm93c2VyU2VydmljZS5zdWJzY3JpYmUoJHNjb3BlLCBmdW5jdGlvbigkZXZlbnQsIGV2ZW50RGF0YSkge1xuICAgIGlmIChldmVudERhdGEudHlwZSA9PT0gRGF0YUJyb3dzZXJTZXJ2aWNlLkZpbGVFdmVudHMuRklMRV9TRUxFQ1RJT04pIHtcbiAgICAgIHVwZGF0ZVRvb2xiYXIoKTtcbiAgICB9XG4gIH0pO1xuXG4gICRzY29wZS50ZXN0cyA9IHt9O1xuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIHRvb2xiYXIncyBzdGF0dXMgZm9yIHZhcmlvdXMgZnVuY3Rpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gdXBkYXRlVG9vbGJhcigpIHtcbiAgICAkc2NvcGUudGVzdHMgPSBEYXRhQnJvd3NlclNlcnZpY2UuYWxsb3dlZEFjdGlvbnMoJHNjb3BlLmJyb3dzZXIuc2VsZWN0ZWQpO1xuICB9XG5cbiAgLyogU2V0IGluaXRpYWwgdG9vbGJhciBzdGF0dXMgKi9cbiAgdXBkYXRlVG9vbGJhcigpO1xuICAkc2NvcGUuYXBpUGFyYW1zID0gRGF0YUJyb3dzZXJTZXJ2aWNlLmFwaVBhcmFtZXRlcnMoKTtcbiAgJHNjb3BlLnRvb2xiYXJPcHRpb25zID0gRGF0YUJyb3dzZXJTZXJ2aWNlLnRvb2xiYXJPcHRpb25zKCk7XG5cbiAgLyogTWFwIHNlcnZpY2UgZnVuY3Rpb25zIHRvIHRvb2xiYXIgYnV0dG9ucyAqL1xuICAkc2NvcGUub3BzID0ge1xuICAgIGRldGFpbHM6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gcHJldmlldyB0aGUgbGFzdCBzZWxlY3RlZCBmaWxlIG9yIGN1cnJlbnQgbGlzdGluZyBpZiBub25lIHNlbGVjdGVkXG4gICAgICBpZiAoJHNjb3BlLmJyb3dzZXIuc2VsZWN0ZWQubGVuZ3RoID4gMCkge1xuICAgICAgICBEYXRhQnJvd3NlclNlcnZpY2UucHJldmlldygkc2NvcGUuYnJvd3Nlci5zZWxlY3RlZC5zbGljZSgtMSlbMF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgRGF0YUJyb3dzZXJTZXJ2aWNlLnByZXZpZXcoJHNjb3BlLmJyb3dzZXIubGlzdGluZyk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkb3dubG9hZDogZnVuY3Rpb24oKSB7XG4gICAgICBEYXRhQnJvd3NlclNlcnZpY2UuZG93bmxvYWQoJHNjb3BlLmJyb3dzZXIuc2VsZWN0ZWQpO1xuICAgIH0sXG4gICAgcHJldmlldzogZnVuY3Rpb24gKCkge1xuICAgICAgRGF0YUJyb3dzZXJTZXJ2aWNlLnByZXZpZXcoJHNjb3BlLmJyb3dzZXIuc2VsZWN0ZWRbMF0sICRzY29wZS5icm93c2VyLmxpc3RpbmcpO1xuICAgIH0sXG4gICAgcHJldmlld0ltYWdlczogZnVuY3Rpb24gKCkge1xuICAgICAgRGF0YUJyb3dzZXJTZXJ2aWNlLnByZXZpZXdJbWFnZXMoJHNjb3BlLmJyb3dzZXIubGlzdGluZyk7XG4gICAgfSxcbiAgICB2aWV3TWV0YWRhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgIERhdGFCcm93c2VyU2VydmljZS52aWV3TWV0YWRhdGEoJHNjb3BlLmJyb3dzZXIuc2VsZWN0ZWQsICRzY29wZS5icm93c2VyLmxpc3RpbmcpO1xuICAgIH0sXG4gICAgdmlld0NhdGVnb3JpZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgRGF0YUJyb3dzZXJTZXJ2aWNlLnZpZXdDYXRlZ29yaWVzKCRzY29wZS5icm93c2VyLnNlbGVjdGVkLCAkc2NvcGUuYnJvd3Nlci5saXN0aW5nKTtcbiAgICB9LFxuICAgIHNoYXJlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBEYXRhQnJvd3NlclNlcnZpY2Uuc2hhcmUoJHNjb3BlLmJyb3dzZXIuc2VsZWN0ZWRbMF0pO1xuICAgIH0sXG4gICAgY29weTogZnVuY3Rpb24gKCkge1xuICAgICAgRGF0YUJyb3dzZXJTZXJ2aWNlLmNvcHkoJHNjb3BlLmJyb3dzZXIuc2VsZWN0ZWQpO1xuICAgIH0sXG4gICAgbW92ZTogZnVuY3Rpb24gKCkge1xuICAgICAgRGF0YUJyb3dzZXJTZXJ2aWNlLm1vdmUoJHNjb3BlLmJyb3dzZXIuc2VsZWN0ZWQsICRzY29wZS5icm93c2VyLmxpc3RpbmcpO1xuICAgIH0sXG4gICAgcmVuYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgICBEYXRhQnJvd3NlclNlcnZpY2UucmVuYW1lKCRzY29wZS5icm93c2VyLnNlbGVjdGVkWzBdKTtcbiAgICB9LFxuICAgIHRyYXNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICBEYXRhQnJvd3NlclNlcnZpY2UudHJhc2goJHNjb3BlLmJyb3dzZXIuc2VsZWN0ZWQpO1xuICAgIH0sXG4gICAgcm06IGZ1bmN0aW9uICgpIHtcbiAgICAgIERhdGFCcm93c2VyU2VydmljZS5ybSgkc2NvcGUuYnJvd3Nlci5zZWxlY3RlZCk7XG4gICAgfSxcbiAgICBzZWFyY2g6IGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgc3RhdGUgPSAkc2NvcGUuYXBpUGFyYW1zLnNlYXJjaFN0YXRlO1xuICAgICAgJHN0YXRlLmdvKHN0YXRlLCB7J3F1ZXJ5X3N0cmluZyc6ICRzY29wZS5zZWFyY2gucXVlcnlTdHJpbmcsXG4gICAgICAgICAgICAgICAgICdzeXN0ZW1JZCc6ICRzY29wZS5icm93c2VyLmxpc3Rpbmcuc3lzdGVtLFxuICAgICAgICAgICAgICAgICAnZmlsZVBhdGgnOiAnJFNFQVJDSCd9KTtcbiAgICB9XG4gIH07XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcG9ydGFsL3N0YXRpYy9wb3J0YWwvc2NyaXB0cy9hbmd1bGFyL2RhdGFfZGVwb3QvY29udHJvbGxlcnMvZGF0YS1kZXBvdC10b29sYmFyLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _main = __webpack_require__(6);\n\nvar _main2 = _interopRequireDefault(_main);\n\nvar _modalMoveCopy = __webpack_require__(7);\n\nvar _modalMoveCopy2 = _interopRequireDefault(_modalMoveCopy);\n\nvar _dataDepotToolbar = __webpack_require__(4);\n\nvar _dataDepotToolbar2 = _interopRequireDefault(_dataDepotToolbar);\n\nvar _dataDepotNew = __webpack_require__(3);\n\nvar _dataDepotNew2 = _interopRequireDefault(_dataDepotNew);\n\nvar _dataDepotNav = __webpack_require__(2);\n\nvar _dataDepotNav2 = _interopRequireDefault(_dataDepotNav);\n\nvar _community = __webpack_require__(1);\n\nvar _community2 = _interopRequireDefault(_community);\n\nvar _modalPreview = __webpack_require__(8);\n\nvar _modalPreview2 = _interopRequireDefault(_modalPreview);\n\nvar _modalUpload = __webpack_require__(9);\n\nvar _modalUpload2 = _interopRequireDefault(_modalUpload);\n\nvar _myData = __webpack_require__(10);\n\nvar _myData2 = _interopRequireDefault(_myData);\n\nvar _sharedData = __webpack_require__(15);\n\nvar _sharedData2 = _interopRequireDefault(_sharedData);\n\nvar _projectList = __webpack_require__(12);\n\nvar _projectList2 = _interopRequireDefault(_projectList);\n\nvar _projectListing = __webpack_require__(13);\n\nvar _projectListing2 = _interopRequireDefault(_projectListing);\n\nvar _projectView = __webpack_require__(14);\n\nvar _projectView2 = _interopRequireDefault(_projectView);\n\nvar _projectData = __webpack_require__(11);\n\nvar _projectData2 = _interopRequireDefault(_projectData);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar mod = angular.module('portal.data_depot.controllers', []);\n\nmod.controller('MainCtrl', _main2.default);\nmod.controller('ModalMoveCopy', _modalMoveCopy2.default);\nmod.controller('DataDepotToolbarCtrl', _dataDepotToolbar2.default);\nmod.controller('DataDepotNewCtrl', _dataDepotNew2.default);\nmod.controller('DataDepotNavCtrl', _dataDepotNav2.default);\nmod.controller('CommunityDataCtrl', _community2.default);\nmod.controller('ModalPreview', _modalPreview2.default);\nmod.controller('ModalUpload', _modalUpload2.default);\nmod.controller('MyDataCtrl', _myData2.default);\nmod.controller('SharedDataCtrl', _sharedData2.default);\nmod.controller('ProjectListCtrl', _projectList2.default);\nmod.controller('ProjectListingCtrl', _projectListing2.default);\nmod.controller('ProjectDataCtrl', _projectData2.default);\nexports.default = mod;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvZGF0YV9kZXBvdC9jb250cm9sbGVycy9pbmRleC5qcz9iODA0Il0sIm5hbWVzIjpbIm1vZCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFJQSxNQUFNQyxRQUFRQyxNQUFSLENBQWUsK0JBQWYsRUFBZ0QsRUFBaEQsQ0FBVjs7QUFFQUYsSUFBSUcsVUFBSixDQUFlLFVBQWY7QUFDQUgsSUFBSUcsVUFBSixDQUFlLGVBQWY7QUFDQUgsSUFBSUcsVUFBSixDQUFlLHNCQUFmO0FBQ0FILElBQUlHLFVBQUosQ0FBZSxrQkFBZjtBQUNBSCxJQUFJRyxVQUFKLENBQWUsa0JBQWY7QUFDQUgsSUFBSUcsVUFBSixDQUFlLG1CQUFmO0FBQ0FILElBQUlHLFVBQUosQ0FBZSxjQUFmO0FBQ0FILElBQUlHLFVBQUosQ0FBZSxhQUFmO0FBQ0FILElBQUlHLFVBQUosQ0FBZSxZQUFmO0FBQ0FILElBQUlHLFVBQUosQ0FBZSxnQkFBZjtBQUNBSCxJQUFJRyxVQUFKLENBQWUsaUJBQWY7QUFDQUgsSUFBSUcsVUFBSixDQUFlLG9CQUFmO0FBQ0FILElBQUlHLFVBQUosQ0FBZSxpQkFBZjtrQkFDZUgsRyIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1haW5DdHJsIGZyb20gJy4vbWFpbic7XG5pbXBvcnQgTW9kYWxNb3ZlQ29weSBmcm9tICcuL21vZGFsLW1vdmUtY29weSc7XG5pbXBvcnQgRGF0YURlcG90VG9vbGJhckN0cmwgZnJvbSAnLi9kYXRhLWRlcG90LXRvb2xiYXInO1xuaW1wb3J0IERhdGFEZXBvdE5ld0N0cmwgZnJvbSAnLi9kYXRhLWRlcG90LW5ldyc7XG5pbXBvcnQgRGF0YURlcG90TmF2Q3RybCBmcm9tICcuL2RhdGEtZGVwb3QtbmF2JztcbmltcG9ydCBDb21tdW5pdHlEYXRhQ3RybCBmcm9tICcuL2NvbW11bml0eSc7XG5pbXBvcnQgTW9kYWxQcmV2aWV3IGZyb20gJy4vbW9kYWwtcHJldmlldyc7XG5pbXBvcnQgTW9kYWxVcGxvYWQgZnJvbSAnLi9tb2RhbC11cGxvYWQnO1xuaW1wb3J0IE15RGF0YUN0cmwgZnJvbSAnLi9teS1kYXRhJztcbmltcG9ydCBTaGFyZWREYXRhQ3RybCBmcm9tICcuL3NoYXJlZC1kYXRhJztcbmltcG9ydCBQcm9qZWN0TGlzdEN0cmwgZnJvbSAnLi9wcm9qZWN0LWxpc3QnO1xuaW1wb3J0IFByb2plY3RMaXN0aW5nQ3RybCBmcm9tICcuL3Byb2plY3QtbGlzdGluZyc7XG5pbXBvcnQgUHJvamVjdFZpZXdDdHJsIGZyb20gJy4vcHJvamVjdC12aWV3JztcbmltcG9ydCBQcm9qZWN0RGF0YUN0cmwgZnJvbSAnLi9wcm9qZWN0LWRhdGEnO1xuXG5sZXQgbW9kID0gYW5ndWxhci5tb2R1bGUoJ3BvcnRhbC5kYXRhX2RlcG90LmNvbnRyb2xsZXJzJywgW10pO1xuXG5tb2QuY29udHJvbGxlcignTWFpbkN0cmwnLCBNYWluQ3RybCk7XG5tb2QuY29udHJvbGxlcignTW9kYWxNb3ZlQ29weScsIE1vZGFsTW92ZUNvcHkpO1xubW9kLmNvbnRyb2xsZXIoJ0RhdGFEZXBvdFRvb2xiYXJDdHJsJywgRGF0YURlcG90VG9vbGJhckN0cmwpO1xubW9kLmNvbnRyb2xsZXIoJ0RhdGFEZXBvdE5ld0N0cmwnLCBEYXRhRGVwb3ROZXdDdHJsKTtcbm1vZC5jb250cm9sbGVyKCdEYXRhRGVwb3ROYXZDdHJsJywgRGF0YURlcG90TmF2Q3RybCk7XG5tb2QuY29udHJvbGxlcignQ29tbXVuaXR5RGF0YUN0cmwnLCBDb21tdW5pdHlEYXRhQ3RybCk7XG5tb2QuY29udHJvbGxlcignTW9kYWxQcmV2aWV3JywgTW9kYWxQcmV2aWV3KTtcbm1vZC5jb250cm9sbGVyKCdNb2RhbFVwbG9hZCcsIE1vZGFsVXBsb2FkKTtcbm1vZC5jb250cm9sbGVyKCdNeURhdGFDdHJsJywgTXlEYXRhQ3RybCk7XG5tb2QuY29udHJvbGxlcignU2hhcmVkRGF0YUN0cmwnLCBTaGFyZWREYXRhQ3RybCk7XG5tb2QuY29udHJvbGxlcignUHJvamVjdExpc3RDdHJsJywgUHJvamVjdExpc3RDdHJsKTtcbm1vZC5jb250cm9sbGVyKCdQcm9qZWN0TGlzdGluZ0N0cmwnLCBQcm9qZWN0TGlzdGluZ0N0cmwpO1xubW9kLmNvbnRyb2xsZXIoJ1Byb2plY3REYXRhQ3RybCcsIFByb2plY3REYXRhQ3RybCk7XG5leHBvcnQgZGVmYXVsdCBtb2Q7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvZGF0YV9kZXBvdC9jb250cm9sbGVycy9pbmRleC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction MainCtrl($scope, DataBrowserService, SystemsService, $state, $stateParams, $timeout, $location) {\n  'ngInject';\n\n  // TODO: There must be a more 'angular' way to do this...\n\n  if ($location.path() == '/data-depot/') {\n    SystemsService.listing().then(function (resp) {\n      var my_data = _.find(resp, { name: 'My Data' });\n      $state.go('db.myData', {\n        systemId: my_data.systemId,\n        filePath: ''\n      });\n    });\n  }\n  // }, 100);\n}\n\nexports.default = MainCtrl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvZGF0YV9kZXBvdC9jb250cm9sbGVycy9tYWluLmpzPzZjZGEiXSwibmFtZXMiOlsiTWFpbkN0cmwiLCIkc2NvcGUiLCJEYXRhQnJvd3NlclNlcnZpY2UiLCJTeXN0ZW1zU2VydmljZSIsIiRzdGF0ZSIsIiRzdGF0ZVBhcmFtcyIsIiR0aW1lb3V0IiwiJGxvY2F0aW9uIiwicGF0aCIsImxpc3RpbmciLCJ0aGVuIiwicmVzcCIsIm15X2RhdGEiLCJfIiwiZmluZCIsIm5hbWUiLCJnbyIsInN5c3RlbUlkIiwiZmlsZVBhdGgiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLFNBQVNBLFFBQVQsQ0FBa0JDLE1BQWxCLEVBQTBCQyxrQkFBMUIsRUFBOENDLGNBQTlDLEVBQThEQyxNQUE5RCxFQUFzRUMsWUFBdEUsRUFBb0ZDLFFBQXBGLEVBQThGQyxTQUE5RixFQUF5RztBQUN2Rzs7QUFFQTs7QUFDQSxNQUFJQSxVQUFVQyxJQUFWLE1BQW9CLGNBQXhCLEVBQXdDO0FBQ3RDTCxtQkFBZU0sT0FBZixHQUF5QkMsSUFBekIsQ0FBOEIsVUFBVUMsSUFBVixFQUFnQjtBQUM1QyxVQUFJQyxVQUFVQyxFQUFFQyxJQUFGLENBQU9ILElBQVAsRUFBYSxFQUFDSSxNQUFNLFNBQVAsRUFBYixDQUFkO0FBQ0FYLGFBQU9ZLEVBQVAsQ0FBVSxXQUFWLEVBQXVCO0FBQ3JCQyxrQkFBVUwsUUFBUUssUUFERztBQUVyQkMsa0JBQVU7QUFGVyxPQUF2QjtBQUlELEtBTkQ7QUFPRDtBQUNEO0FBQ0Q7O2tCQUVjbEIsUSIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5mdW5jdGlvbiBNYWluQ3RybCgkc2NvcGUsIERhdGFCcm93c2VyU2VydmljZSwgU3lzdGVtc1NlcnZpY2UsICRzdGF0ZSwgJHN0YXRlUGFyYW1zLCAkdGltZW91dCwgJGxvY2F0aW9uKSB7XG4gICduZ0luamVjdCc7XG5cbiAgLy8gVE9ETzogVGhlcmUgbXVzdCBiZSBhIG1vcmUgJ2FuZ3VsYXInIHdheSB0byBkbyB0aGlzLi4uXG4gIGlmICgkbG9jYXRpb24ucGF0aCgpID09ICcvZGF0YS1kZXBvdC8nKSB7XG4gICAgU3lzdGVtc1NlcnZpY2UubGlzdGluZygpLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHtcbiAgICAgIHZhciBteV9kYXRhID0gXy5maW5kKHJlc3AsIHtuYW1lOiAnTXkgRGF0YSd9KTtcbiAgICAgICRzdGF0ZS5nbygnZGIubXlEYXRhJywge1xuICAgICAgICBzeXN0ZW1JZDogbXlfZGF0YS5zeXN0ZW1JZCxcbiAgICAgICAgZmlsZVBhdGg6ICcnXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICAvLyB9LCAxMDApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBNYWluQ3RybDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BvcnRhbC9zdGF0aWMvcG9ydGFsL3NjcmlwdHMvYW5ndWxhci9kYXRhX2RlcG90L2NvbnRyb2xsZXJzL21haW4uanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction ModalMoveCopy($scope, $uibModalInstance, $state, FileListing, SystemsService, ProjectService, data) {\n  'ngInject';\n\n  $scope.data = data;\n\n  $scope.state = {\n    busy: false,\n    error: null,\n    listingProjects: false\n  };\n\n  $scope.systems = SystemsService.systems;\n  var mydata_system = _.find($scope.systems, { name: 'My Data' });\n  $scope.options = [{ label: 'My Data',\n    conf: { system: mydata_system.systemId, path: '' },\n    apiParams: { fileMgr: 'my-data', baseUrl: '/api/data-depot/files' } }, { label: 'My Projects',\n    conf: { system: 'projects', path: '' },\n    apiParams: { fileMgr: 'shared', baseUrl: '/api/data-depot/files' } }];\n\n  $scope.currentOption = null;\n  $scope.$watch('currentOption', function () {\n    $scope.state.busy = true;\n    var cOption = $scope.currentOption;\n    if (cOption.conf.system != 'projects') {\n      $scope.state.listingProjects = false;\n      FileListing.get(cOption.conf, cOption.apiParams).then(function (listing) {\n        $scope.listing = listing;\n        $scope.state.busy = false;\n      });\n    } else {\n      $scope.state.listingProjects = true;\n      ProjectService.list().then(function (projects) {\n        $scope.projects = _.map(projects, function (p) {\n          p.href = $state.href('projects.listing', { projectId: p.uuid });\n          return p;\n        });\n        $scope.state.busy = false;\n      });\n    }\n\n    if ($scope.currentOption.label === 'My Data') {\n      $scope.customRoot = {\n        name: 'My Data',\n        system: mydata_system.systemId,\n        path: '/'\n      };\n      $scope.project = null;\n    } else {\n      $scope.customRoot = {\n        name: $scope.currentOption.label,\n        system: $scope.currentOption.conf.system,\n        path: $scope.currentOption.conf.path\n      };\n    }\n  });\n  $scope.currentOption = $scope.options[0];\n\n  $scope.onBrowse = function ($event, fileListing) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    $scope.state.listingProjects = false;\n    var system = fileListing.system || fileListing.id;\n    var path = fileListing.path || '/';\n\n    // If a project is selected\n    if (fileListing.type === 'STORAGE') {\n      $scope.project = fileListing;\n    }\n\n    $scope.state.busy = true;\n    FileListing.get({ system: system, path: path }, $scope.currentOption.apiParams).then(function (listing) {\n      $scope.listing = listing;\n      $scope.state.busy = false;\n    });\n  };\n\n  $scope.validDestination = function (fileListing) {\n    return fileListing && (fileListing.type === 'dir' || fileListing.type === 'folder') && fileListing.permissions && (fileListing.permissions === 'ALL' || fileListing.permissions.indexOf('WRITE') > -1);\n  };\n\n  $scope.chooseDestination = function (fileListing) {\n    $uibModalInstance.close(fileListing);\n  };\n\n  $scope.cancel = function () {\n    $uibModalInstance.dismiss();\n  };\n}\n\nexports.default = ModalMoveCopy;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ModalPreview;\nfunction ModalPreview($scope, $uibModalInstance, $sce, file) {\n  'ngInject';\n\n  $scope.file = file;\n  if (typeof listing !== 'undefined' && typeof listing.metadata !== 'undefined' && !_.isEmpty(listing.metadata.project)) {\n    var _listing = angular.copy(listing);\n    $scope.file.metadata = _listing.metadata;\n  }\n  $scope.busy = true;\n\n  $scope.iframeLoadedCallback = function () {\n    $scope.busy = false;\n    $scope.$apply();\n  };\n\n  file.preview().then(function (data) {\n    $scope.previewHref = $sce.trustAs('resourceUrl', data.href);\n  }, function (err) {\n    $scope.previewError = \"Could not preview this item!\";\n    $scope.busy = false;\n  });\n\n  // $scope.tests = allowedActions([file]);\n  //\n  // $scope.download = function() {\n  //   download(file);\n  // };\n  // $scope.share = function() {\n  //   share(file);\n  // };\n  // $scope.copy = function() {\n  //   copy(file);\n  // };\n  // $scope.move = function() {\n  //   move(file, currentState.listing);\n  // };\n  // $scope.rename = function() {\n  //   rename(file);\n  // };\n  // $scope.viewMetadata = function() {\n  //   $scope.close();\n  //   viewMetadata(file);\n  // };\n  // $scope.trash = function() {\n  //   trash(file);\n  // };\n  // $scope.rm = function() {\n  //   rm(file);\n  // };\n\n  $scope.close = function () {\n    $uibModalInstance.dismiss();\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvZGF0YV9kZXBvdC9jb250cm9sbGVycy9tb2RhbC1wcmV2aWV3LmpzP2E3ZmUiXSwibmFtZXMiOlsiTW9kYWxQcmV2aWV3IiwiJHNjb3BlIiwiJHVpYk1vZGFsSW5zdGFuY2UiLCIkc2NlIiwiZmlsZSIsImxpc3RpbmciLCJtZXRhZGF0YSIsIl8iLCJpc0VtcHR5IiwicHJvamVjdCIsIl9saXN0aW5nIiwiYW5ndWxhciIsImNvcHkiLCJidXN5IiwiaWZyYW1lTG9hZGVkQ2FsbGJhY2siLCIkYXBwbHkiLCJwcmV2aWV3IiwidGhlbiIsImRhdGEiLCJwcmV2aWV3SHJlZiIsInRydXN0QXMiLCJocmVmIiwiZXJyIiwicHJldmlld0Vycm9yIiwiY2xvc2UiLCJkaXNtaXNzIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFBd0JBLFk7QUFBVCxTQUFTQSxZQUFULENBQXNCQyxNQUF0QixFQUE4QkMsaUJBQTlCLEVBQWlEQyxJQUFqRCxFQUF1REMsSUFBdkQsRUFBNkQ7QUFDMUU7O0FBQ0FILFNBQU9HLElBQVAsR0FBY0EsSUFBZDtBQUNBLE1BQUksT0FBT0MsT0FBUCxLQUFtQixXQUFuQixJQUNBLE9BQU9BLFFBQVFDLFFBQWYsS0FBNEIsV0FENUIsSUFFQSxDQUFDQyxFQUFFQyxPQUFGLENBQVVILFFBQVFDLFFBQVIsQ0FBaUJHLE9BQTNCLENBRkwsRUFFeUM7QUFDdkMsUUFBSUMsV0FBV0MsUUFBUUMsSUFBUixDQUFhUCxPQUFiLENBQWY7QUFDQUosV0FBT0csSUFBUCxDQUFZRSxRQUFaLEdBQXVCSSxTQUFTSixRQUFoQztBQUNEO0FBQ0RMLFNBQU9ZLElBQVAsR0FBYyxJQUFkOztBQUVBWixTQUFPYSxvQkFBUCxHQUErQixZQUFZO0FBQ3pDYixXQUFPWSxJQUFQLEdBQWMsS0FBZDtBQUNBWixXQUFPYyxNQUFQO0FBQ0QsR0FIRDs7QUFLQVgsT0FBS1ksT0FBTCxHQUFlQyxJQUFmLENBQ0UsVUFBVUMsSUFBVixFQUFnQjtBQUNkakIsV0FBT2tCLFdBQVAsR0FBcUJoQixLQUFLaUIsT0FBTCxDQUFhLGFBQWIsRUFBNEJGLEtBQUtHLElBQWpDLENBQXJCO0FBQ0QsR0FISCxFQUlFLFVBQVVDLEdBQVYsRUFBZTtBQUNickIsV0FBT3NCLFlBQVAsR0FBc0IsOEJBQXRCO0FBQ0F0QixXQUFPWSxJQUFQLEdBQWMsS0FBZDtBQUNELEdBUEg7O0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBWixTQUFPdUIsS0FBUCxHQUFlLFlBQVk7QUFDekJ0QixzQkFBa0J1QixPQUFsQjtBQUNELEdBRkQ7QUFJRCIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTW9kYWxQcmV2aWV3KCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UsICRzY2UsIGZpbGUpIHtcbiAgJ25nSW5qZWN0JztcbiAgJHNjb3BlLmZpbGUgPSBmaWxlO1xuICBpZiAodHlwZW9mIGxpc3RpbmcgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICB0eXBlb2YgbGlzdGluZy5tZXRhZGF0YSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICFfLmlzRW1wdHkobGlzdGluZy5tZXRhZGF0YS5wcm9qZWN0KSl7XG4gICAgdmFyIF9saXN0aW5nID0gYW5ndWxhci5jb3B5KGxpc3RpbmcpO1xuICAgICRzY29wZS5maWxlLm1ldGFkYXRhID0gX2xpc3RpbmcubWV0YWRhdGE7XG4gIH1cbiAgJHNjb3BlLmJ1c3kgPSB0cnVlO1xuXG4gICRzY29wZS5pZnJhbWVMb2FkZWRDYWxsYmFjayAgPSBmdW5jdGlvbiAoKSB7XG4gICAgJHNjb3BlLmJ1c3kgPSBmYWxzZTtcbiAgICAkc2NvcGUuJGFwcGx5KCk7XG4gIH07XG5cbiAgZmlsZS5wcmV2aWV3KCkudGhlbihcbiAgICBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgJHNjb3BlLnByZXZpZXdIcmVmID0gJHNjZS50cnVzdEFzKCdyZXNvdXJjZVVybCcsIGRhdGEuaHJlZik7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAkc2NvcGUucHJldmlld0Vycm9yID0gXCJDb3VsZCBub3QgcHJldmlldyB0aGlzIGl0ZW0hXCI7XG4gICAgICAkc2NvcGUuYnVzeSA9IGZhbHNlO1xuICAgIH0pO1xuXG5cbiAgLy8gJHNjb3BlLnRlc3RzID0gYWxsb3dlZEFjdGlvbnMoW2ZpbGVdKTtcbiAgLy9cbiAgLy8gJHNjb3BlLmRvd25sb2FkID0gZnVuY3Rpb24oKSB7XG4gIC8vICAgZG93bmxvYWQoZmlsZSk7XG4gIC8vIH07XG4gIC8vICRzY29wZS5zaGFyZSA9IGZ1bmN0aW9uKCkge1xuICAvLyAgIHNoYXJlKGZpbGUpO1xuICAvLyB9O1xuICAvLyAkc2NvcGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAvLyAgIGNvcHkoZmlsZSk7XG4gIC8vIH07XG4gIC8vICRzY29wZS5tb3ZlID0gZnVuY3Rpb24oKSB7XG4gIC8vICAgbW92ZShmaWxlLCBjdXJyZW50U3RhdGUubGlzdGluZyk7XG4gIC8vIH07XG4gIC8vICRzY29wZS5yZW5hbWUgPSBmdW5jdGlvbigpIHtcbiAgLy8gICByZW5hbWUoZmlsZSk7XG4gIC8vIH07XG4gIC8vICRzY29wZS52aWV3TWV0YWRhdGEgPSBmdW5jdGlvbigpIHtcbiAgLy8gICAkc2NvcGUuY2xvc2UoKTtcbiAgLy8gICB2aWV3TWV0YWRhdGEoZmlsZSk7XG4gIC8vIH07XG4gIC8vICRzY29wZS50cmFzaCA9IGZ1bmN0aW9uKCkge1xuICAvLyAgIHRyYXNoKGZpbGUpO1xuICAvLyB9O1xuICAvLyAkc2NvcGUucm0gPSBmdW5jdGlvbigpIHtcbiAgLy8gICBybShmaWxlKTtcbiAgLy8gfTtcblxuICAkc2NvcGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygpO1xuICB9O1xuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvZGF0YV9kZXBvdC9jb250cm9sbGVycy9tb2RhbC1wcmV2aWV3LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ModalUpload;\nfunction ModalUpload($scope, $q, $uibModalInstance, Modernizr, directoryUpload, destination, files, currentState) {\n  'ngInject';\n\n  $scope.data = {\n    destination: destination,\n    selectedFiles: files || [],\n    uploads: []\n  };\n\n  $scope.state = {\n    uploading: false,\n    retry: false,\n    directoryUpload: directoryUpload,\n    directoryUploadSupported: Modernizr.fileinputdirectory,\n    ui: { tagFiles: false }\n  };\n\n  $scope.$watch('data.selectedFiles', function (newValue) {\n    _.each(newValue, function (val) {\n      $scope.data.uploads.push({\n        file: val,\n        state: 'pending',\n        promise: null\n      });\n    });\n\n    // reset file control since we want to allow multiple selection events\n    $('#id-choose-files').val(null);\n  });\n\n  $scope.tagFiles = function () {\n    $uibModalInstance.close();\n    var files = _.filter(currentState.listing.children, function (child) {\n      if (_.find($scope.data.uploads, function (upload) {\n        return upload.file.name === child.name;\n      })) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    if (files.length) {\n      viewCategories(files);\n    } else {\n      viewCategories();\n    }\n  };\n\n  $scope.upload = function () {\n    $scope.state.uploading = true;\n    var tasks = _.map($scope.data.uploads, function (upload) {\n      upload.state = 'uploading';\n\n      var formData = new window.FormData();\n      formData.append('file', upload.file);\n      if (upload.file.webkitRelativePath) {\n        formData.append('relative_path', upload.file.webkitRelativePath);\n      }\n      return currentState.listing.upload(formData).then(function (resp) {\n        upload.state = 'success';\n        return { status: 'success', response: resp };\n      }, function (err) {\n        upload.state = 'error';\n        upload.error = err.data;\n        return { status: 'error', response: err.data };\n      });\n    });\n\n    $q.all(tasks).then(function (results) {\n      $scope.state.uploading = false;\n\n      currentState.busy = true;\n      currentState.listing.fetch().then(function () {\n        currentState.busy = false;\n        if (currentState.project) {\n          currentState.ui.tagFiles = true;\n          $scope.state.ui.tagFiles = true;\n        }\n      });\n\n      var errors = _.filter(results, function (result) {\n        return result.status === 'error';\n      });\n\n      if (errors.length > 0) {\n        // oh noes...give the user another chance with any errors\n        $scope.state.retry = true;\n      } else {\n        // it's all good; close the modal\n        if (!currentState.project) {\n          $uibModalInstance.close();\n        }\n      }\n    });\n  };\n\n  $scope.retry = function () {\n    $scope.data.uploads = _.where($scope.data.uploads, { state: 'error' });\n    $scope.upload();\n    $scope.state.retry = false;\n  };\n\n  /**\n   * Remove an upload from the list of staged uploads.\n   *\n   * @param index\n   */\n  $scope.removeUpload = function (index) {\n    $scope.data.uploads.splice(index, 1);\n  };\n\n  /**\n   * Clear all staged uploads.\n   */\n  $scope.reset = function () {\n    // reset models\n    $scope.data.selectedFiles = [];\n    $scope.data.uploads = [];\n  };\n\n  /**\n   * Cancel and close upload dialog.\n   */\n  $scope.cancel = function () {\n    $uibModalInstance.dismiss('cancel');\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = MyDataCtrl;\nfunction MyDataCtrl($scope, $state, $stateParams, Django, DataBrowserService) {\n  'ngInject';\n\n  var options = {\n    system: $stateParams.systemId,\n    path: $stateParams.filePath\n  };\n  $scope.data = {\n    user: Django.user,\n    customRoot: {\n      name: 'My Data',\n      href: $state.href('db.myData', { systemId: $stateParams.systemId,\n        filePath: '/' })\n    }\n  };\n  // TODO: Fix this listing thing\n  DataBrowserService.apiParams.fileMgr = 'my-data';\n  DataBrowserService.apiParams.baseUrl = '/api/data-depot/files';\n  DataBrowserService.apiParams.searchState = 'dataSearch';\n\n  $scope.browser = DataBrowserService.state();\n  DataBrowserService.browse(options).then(function (resp) {\n    $scope.browser = DataBrowserService.state();\n    $scope.searchState = DataBrowserService.apiParams.searchState;\n  });\n  // if (! $scope.browser.error) {\n  //   $scope.browser.listing.href = $state.href('db.myData', {\n  //     system: $scope.browser.listing.system,\n  //     filePath: $scope.browser.listing.path\n  //   });\n  //   _.each($scope.browser.listing.children, function (child) {\n  //     child.href = $state.href('db.myData', {system: child.system, filePath: child.path});\n  //   });\n  // }\n\n\n  $scope.scrollToTop = function () {\n    return;\n  };\n  $scope.scrollToBottom = function () {\n    DataBrowserService.scrollToBottom();\n  };\n\n  $scope.resolveBreadcrumbHref = function (trailItem) {\n    return $state.href('db.myData', { systemId: $scope.browser.listing.system, filePath: trailItem.path });\n  };\n\n  $scope.onBrowse = function ($event, file) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    if (file.type === 'file') {\n      DataBrowserService.preview(file, $scope.browser.listing);\n    } else {\n      $state.go('db.myData', { systemId: file.system, filePath: file.path });\n    }\n  };\n\n  $scope.onSelect = function ($event, file) {\n    $event.stopPropagation();\n    if ($event.ctrlKey || $event.metaKey) {\n      var selectedIndex = $scope.browser.selected.indexOf(file);\n      if (selectedIndex > -1) {\n        DataBrowserService.deselect([file]);\n      } else {\n        DataBrowserService.select([file]);\n      }\n    } else if ($event.shiftKey && $scope.browser.selected.length > 0) {\n      var lastFile = $scope.browser.selected[$scope.browser.selected.length - 1];\n      var lastIndex = $scope.browser.listing.children.indexOf(lastFile);\n      var fileIndex = $scope.browser.listing.children.indexOf(file);\n      var min = Math.min(lastIndex, fileIndex);\n      var max = Math.max(lastIndex, fileIndex);\n      DataBrowserService.select($scope.browser.listing.children.slice(min, max + 1));\n    } else if (typeof file._ui !== 'undefined' && file._ui.selected) {\n      DataBrowserService.deselect([file]);\n    } else {\n      DataBrowserService.select([file], true);\n    }\n  };\n\n  $scope.onDetail = function ($event, file) {\n    $event.stopPropagation();\n    DataBrowserService.preview(file, $scope.browser.listing);\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ProjectDataCtrl;\nfunction ProjectDataCtrl($scope, $state, Django, ProjectService, DataBrowserService, projectId, filePath, projectTitle, FileListing, $uibModal, $http, $q) {\n  'ngInject';\n\n  DataBrowserService.apiParams.fileMgr = 'agave';\n  DataBrowserService.apiParams.baseUrl = '/api/agave/files';\n  DataBrowserService.apiParams.searchState = undefined;\n  $scope.browser = DataBrowserService.state();\n  $scope.browser.listings = {};\n  $scope.browser.ui = {};\n  $scope.browser.publication = { experimentsList: [], eventsList: [],\n    users: [], analysisList: [],\n    filesSelected: [] };\n  if (typeof $scope.browser !== 'undefined') {\n    $scope.browser.busy = true;\n  }\n\n  DataBrowserService.browse({ system: 'project-' + projectId, path: filePath }).then(function () {\n    $scope.browser = DataBrowserService.state();\n    $scope.browser.busy = true;\n    $scope.browser.busyListing = true;\n    $scope.browser.listing.href = $state.href('projects.view.data', {\n      projectId: projectId,\n      filePath: $scope.browser.listing.path,\n      projectTitle: projectTitle\n    });\n    _.each($scope.browser.listing.children, function (child) {\n      child.href = $state.href('projects.view.data', {\n        projectId: projectId,\n        filePath: child.path,\n        projectTitle: projectTitle\n      });\n    });\n    if (typeof $scope.browser.loadingEntities !== 'undefined' && !$scope.browser.loadingEntities) {\n      var entities = $scope.browser.project.getAllRelatedObjects();\n      _.each($scope.browser.listing.children, function (child) {\n        child.setEntities(DataBrowserService.state().project.uuid, entities);\n      });\n    } else {\n      $scope.$watch('browser.loadingEntities', function (newVal, oldVal) {\n        if (!newVal) {\n          var entities = $scope.browser.project.getAllRelatedObjects();\n          _.each($scope.browser.listing.children, function (child) {\n            child.setEntities($scope.browser.project.uuid, entities);\n          });\n          //var _state = DataBrowserService.state();\n          //_state.project.setupAllRels();\n          //$scope.browser = _state;\n        }\n      });\n    }\n  }).then(function () {\n    $http.get('/api/projects/publication/' + $scope.browser.project.value.projectId).then(function (resp) {\n      if (resp.data.project && resp.data.project.doi) {\n        $scope.browser.project.doi = resp.data.project.doi;\n        DataBrowserService.state().project.doi = resp.data.project.doi;\n      }\n      if (resp.data.project && resp.data.status) {\n        $scope.browser.project.publicationStatus = resp.data.status;\n        DataBrowserService.state().project.publicationStatus = resp.data.status;\n      }\n      $scope.browser.busy = false;\n      $scope.browser.busyListing = false;\n    }, function () {\n      $scope.browser.busy = false;\n      $scope.browser.busyListing = false;\n    });\n  });\n\n  var setFilesDetails = function setFilesDetails(filePaths) {\n    filePaths = _.uniq(filePaths);\n    var p = $q(function (resolve, reject) {\n      var results = [];\n      var index = 0;\n      var size = 5;\n      var fileCalls = _.map(filePaths, function (filePath) {\n        return FileListing.get({ system: 'project-' + projectId,\n          path: filePath }, DataBrowserService.apiParams).then(function (resp) {\n          var allEntities = $scope.browser.project.getAllRelatedObjects();\n          var entities = _.filter(allEntities, function (entity) {\n            return _.contains(entity._filePaths, resp.path);\n          });\n          _.each(entities, function (entity) {\n            $scope.browser.listings[entity.uuid].push(resp);\n          });\n          return resp;\n        });\n      });\n\n      function step() {\n        var calls = fileCalls.slice(index, index += size);\n        if (calls.length) {\n          $q.all(calls).then(function (res) {\n            results.concat(res);\n            step();\n            return res;\n          }).catch(reject);\n        } else {\n          resolve(results);\n        }\n      }\n      step();\n    });\n    return p.then(function (results) {\n      return results;\n    }, function (err) {\n      $scope.browser.ui.error = err;\n    });\n  };\n\n  var setUserDetails = function setUserDetails(usernames) {\n    $scope.browser.publication.users = [];\n    filePaths = _.uniq(usernames);\n    var p = $q(function (resolve, reject) {\n      var results = [];\n      var index = 0;\n      var size = 5;\n      var userIndex = 0;\n\n      function step() {\n        var _calls = calls.slice(index, index += size);\n        if (_calls.length) {\n          $q.all(_calls).then(function (res) {\n            results.concat(res);\n            step();\n            return res;\n          }).catch(reject);\n        } else {\n          resolve(results);\n        }\n      }\n      step();\n    });\n    $scope.browser.ui.loadingPreview = true;\n    return p.then(function (results) {\n      $scope.browser.publication.users = _.uniq($scope.browser.publication.users, function (obj) {\n        return obj.username;\n      });\n      return results;\n    }, function (err) {\n      $scope.browser.ui.error = err;\n    });\n  };\n\n  $scope.$watch('browser.showPreviewListing', function (newVal, oldVal) {\n    if (newVal) {\n      $scope.browser.ui.loadingListings = true;\n      $scope.browser.listings = {};\n      var entities = $scope.browser.project.getAllRelatedObjects();\n      var allFilePaths = [];\n      _.each(entities, function (entity) {\n        $scope.browser.listings[entity.uuid] = [];\n        allFilePaths = allFilePaths.concat(entity._filePaths);\n      });\n      $scope.data.rootPaths = allFilePaths;\n      setFilesDetails(allFilePaths).then(function () {\n        users = [$scope.browser.project.value.pi].concat($scope.browser.project.value.coPis).concat($scope.browser.project.value.teamMembers);\n        return setUserDetails(users);\n      }).then(function () {});\n    }\n  });\n\n  $scope.onBrowseData = function onBrowseData($event, file) {\n    $event.preventDefault();\n    DataBrowserService.showListing();\n    if (file.type === 'file') {\n      DataBrowserService.preview(file, $scope.browser.listing);\n    } else {\n      $state.go('projects.view.data', { projectId: projectId,\n        filePath: file.path,\n        projectTitle: projectTitle });\n    }\n  };\n\n  $scope.scrollToTop = function () {\n    return;\n  };\n  $scope.scrollToBottom = function () {\n    DataBrowserService.scrollToBottom();\n  };\n\n  $scope.onSelectData = function onSelectData($event, file) {\n    $event.stopPropagation();\n\n    if ($event.ctrlKey || $event.metaKey) {\n      var selectedIndex = $scope.browser.selected.indexOf(file);\n      if (selectedIndex > -1) {\n        DataBrowserService.deselect([file]);\n      } else {\n        DataBrowserService.select([file]);\n      }\n    } else if ($event.shiftKey && $scope.browser.selected.length > 0) {\n      var lastFile = $scope.browser.selected[$scope.browser.selected.length - 1];\n      var lastIndex = $scope.browser.listing.children.indexOf(lastFile);\n      var fileIndex = $scope.browser.listing.children.indexOf(file);\n      var min = Math.min(lastIndex, fileIndex);\n      var max = Math.max(lastIndex, fileIndex);\n      DataBrowserService.select($scope.browser.listing.children.slice(min, max + 1));\n    } else if (typeof file._ui !== 'undefined' && file._ui.selected) {\n      DataBrowserService.deselect([file]);\n    } else {\n      DataBrowserService.select([file], true);\n    }\n  };\n\n  $scope.onDetail = function ($event, file) {\n    $event.stopPropagation();\n    DataBrowserService.preview(file, $scope.browser.listing);\n  };\n\n  $scope.openPreviewTree = function ($event, entityUuid) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    DataBrowserService.openPreviewTree(entityUuid);\n  };\n\n  function _addToLists(ent, evt) {\n    if (ent.name === 'designsafe.project.experiment') {\n      $scope.browser.publication.experimentsList.push(ent);\n      $scope.browser.publication.experimentsList = _.uniq($scope.browser.publication.experimentsList, function (e) {\n        return e.uuid;\n      });\n      $scope.browser.publication.eventsList.push(evt);\n      $scope.browser.publication.eventsList = _.uniq($scope.browser.publication.eventsList, function (e) {\n        return e.uuid;\n      });\n    } else if (ent.name === 'designsafe.project.analysis') {\n      $scope.browser.publication.analysisList.push(ent);\n      $scope.browser.publication.analysisList = _.uniq($scope.browser.publication.analysisList, function (e) {\n        return e.uuid;\n      });\n    } else if (ent.name === 'designsafe.project.report') {\n      $scope.browser.publication.reportsList.push(ent);\n      $scope.browser.publication.reportsList = _.uniq($scope.browser.publication.reportsList, function (e) {\n        return e.uuid;\n      });\n    }\n  }\n\n  function _removeFromLists(ent, evt) {\n    if (ent && ent.name == 'designsafe.project.experiment') {\n      $scope.browser.publication.experimentsList = _.filter($scope.browser.publication.experimentsList, function (e) {\n        return e.uuid !== ent.uuid;\n      });\n    } else if (ent && ent.name == 'designsafe.project.analysis') {\n      $scope.browser.publication.analysisList = _.filter($scope.browser.publication.analysisList, function (e) {\n        return e.uuid !== ent.uuid;\n      });\n    } else if (ent && ent.name == 'designsafe.project.report') {\n      $scope.browser.publication.reportsList = _.filter($scope.browser.publication.reportsList, function (e) {\n        return e.uuid !== ent.uuid;\n      });\n    }\n\n    if (evt) {\n      $scope.browser.publication.eventsList = _.filter($scope.browser.publication.eventsList, function (e) {\n        return evt.uuid !== e.uuid;\n      });\n    }\n  }\n\n  $scope.editProject = function () {\n    ProjectService.editProject($scope.browser.project).then(function (project) {\n      $scope.browser.project = project;\n    });\n  };\n\n  $scope.manageCollabs = function () {\n    ProjectService.manageCollaborators($scope.browser.project).then(function (project) {\n      $scope.browserproject = project;\n    });\n  };\n\n  $scope.manageExperiments = function () {\n    var experimentsAttr = $scope.browser.project.getRelatedAttrName('designsafe.project.experiment');\n    var experiments = $scope.browser.project[experimentsAttr];\n    if (typeof experiments === 'undefined') {\n      $scope.browser.project[experimentsAttr] = [];\n      experiments = $scope.browser.project[experimentsAttr];\n    }\n    ProjectService.manageExperiments({ 'experiments': experiments,\n      'project': $scope.browser.project }).then(function (experiments) {\n      $scope.browser.experiments = experiments;\n    });\n  };\n\n  var _editFieldModal = function _editFieldModal(objArr, title, fields, classes) {\n    modal = $uibModal.open({\n      template: '<div class=\"modal-header\">' + '<h3>{{ui.title}}</h3>' + '</div>' + '<div class=\"modal-body\">' + '<div class=\"form-group\" ' + 'ng-repeat=\"obj in data.objArr\" style=\"overflow:auto;\">' + '<div ng-repeat=\"field in ui.fields\">' + '<div class=\"{{ui.classes[field.name]}}\">' + '<label for=\"{{field.id}}-{{obj[field.uniq]}}\">{{field.label}}</label>' + '<input type=\"{{field.type}}\" class=\"form-control\" name=\"{{field.name}}-{{obj[field.uniq]}}\"' + 'id=\"{{field.id}}-{{obj[field.uniq]}}\" ng-model=\"obj[field.name]\"/>' + '</div>' + '</div>' + '</div>' + '</div>' + '<div class=\"modal-footer\">' + '<button class=\"btn btn-default\" ng-click=\"close()\">Close</button>' + '<button class=\"btn btn-info\" ng-click=\"save()\">Save</button>' + '</div>',\n      controller: ['$scope', '$uibModalInstance', function ($scope, $uibModalInstance) {\n        $scope.ui = { fields: fields,\n          classes: classes,\n          title: title,\n          form: {} };\n        $scope.data = { objArr: angular.copy(objArr) };\n\n        $scope.close = function () {\n          $uibModalInstance.dismiss('Cancel');\n        };\n\n        $scope.save = function () {\n          $uibModalInstance.close($scope.data.objArr);\n        };\n      }]\n    });\n    return modal;\n  };\n\n  var _publicationCtrl = {\n\n    filterUsers: function filterUsers(usernames, users) {\n      return _.filter(users, function (usr) {\n        return _.contains(usernames, usr.username);\n      });\n    },\n\n    showText: function showText(text) {\n      $uibModal.open({\n        template: '<div class=\"modal-header\">' + '<h3> Description </h3>' + '</div>' + '<div class=\"modal-body\">' + '<div style=\"border: 1px solid black;\"' + '\"padding:5px;\">' + '{{text}}' + '</div>' + '</div>' + '<div class=\"modal-footer\">' + '<button class=\"btn btn-default\" ng-click=\"close()\">' + 'Close' + '</button>' + '</div>',\n        controller: ['$scope', '$uibModalInstance', function ($scope, $uibModalInstance) {\n          $scope.text = text;\n          $scope.close = function () {\n            $uibModalInstance.dismiss('Close');\n          };\n        }]\n      });\n    },\n\n    moveOrderUp: function moveOrderUp($index, ent, list) {\n      if (typeof ent._ui.order === 'undefined') {\n        ent._ui.order = 0;\n      } else if (ent._ui.order > 0) {\n        var order = ent._ui.order;\n        var _ent = _.find(list, function (e) {\n          return e._ui.order === order - 1;\n        });\n        ent._ui.order -= 1;\n        _ent._ui.order += 1;\n      }\n    },\n\n    moveOrderDown: function moveOrderDown($index, ent, list) {\n      if (typeof ent._ui.order === 'undefined') {\n        ent._ui.order = 0;\n      } else if (ent._ui.order < list.length - 1) {\n        var _ent = _.find(list, function (e) {\n          return e._ui.order === ent._ui.order + 1;\n        });\n        ent._ui.order += 1;\n        _ent._ui.order -= 1;\n      }\n    },\n\n    openEditProject: function openEditProject() {\n      $scope.editProject();\n    },\n\n    openEditExperiments: function openEditExperiments() {\n      $scope.manageExperiments();\n    },\n\n    openEditTeamMembers: function openEditTeamMembers() {\n      $scope.manageCollabs();\n    },\n\n    openEditCategories: function openEditCategories() {\n      DataBrowserService.viewCategories();\n    },\n\n    selectAllFiles: function selectAllFiles(ent, evt) {\n      var listing = [];\n      if (ent.name === 'designsafe.project.experiment') {\n        listing = $scope.browser.listings[evt.uuid];\n      } else {\n        listing = $scope.browser.listings[ent.uuid];\n      }\n      if (typeof $scope.browser.publication.filesSelected[ent.uuid] === 'undefined') {\n        $scope.browser.publication.filesSelected[ent.uuid] = {};\n      }\n      if (ent.name === 'designsafe.project.experiment') {\n        var files = listing;\n        $scope.browser.publication.filesSelected[ent.uuid][evt.uuid] = files;\n        _addToLists(ent, evt);\n      } else {\n        $scope.browser.publication.filesSelected[ent.uuid] = listing;\n        _addToLists(ent);\n      }\n    },\n\n    deselectAllFiles: function deselectAllFiles(ent, evt) {\n      if (ent.name === 'designsafe.project.experiment') {\n        $scope.browser.publication.filesSelected[ent.uuid][evt.uuid] = [];\n        delete $scope.browser.publication.filesSelected[ent.uuid][evt.uuid];\n        if (_.isEmpty($scope.browser.publication.filesSelected[ent.uuid])) {\n          delete $scope.browser.publication.filesSelected[ent.uuid];\n          _removeFromLists(ent, evt);\n        } else {\n          _removeFromLists(ent, evt);\n        }\n      } else {\n        $scope.browser.publication.filesSelected[ent.uuid] = [];\n        delete $scope.browser.publication.filesSelected[ent.uuid];\n        _removeFromLists(ent);\n      }\n    },\n\n    isFileSelectedForPublication: function isFileSelectedForPublication(ent, evt, file) {\n      if (typeof $scope.browser.publication.filesSelected[ent.uuid] === 'undefined') {\n        $scope.browser.publication.filesSelected[ent.uuid] = {};\n      }\n      var files = [];\n      if (ent.name === 'designsafe.project.experiment') {\n        files = $scope.browser.publication.filesSelected[ent.uuid][evt.uuid] || [];\n        return _.find(files, function (f) {\n          return f.uuid() === file.uuid();\n        });\n      } else {\n        files = $scope.browser.publication.filesSelected[ent.uuid] || [];\n        return _.find(files, function (f) {\n          return f.uuid() === file.uuid();\n        });\n      }\n    },\n\n    deselectFileForPublication: function deselectFileForPublication(ent, evt, file) {\n      var files = [];\n      if (ent.name === 'designsafe.project.experiment') {\n        files = $scope.browser.publication.filesSelected[ent.uuid][evt.uuid];\n      } else {\n        files = $scope.browser.publication.filesSelected[ent.uuid];\n      }\n      files = _.reject(files, function (f) {\n        return f.uuid() === file.uuid();\n      });\n      if (ent.name === 'designsafe.project.experiment') {\n        $scope.browser.publication.filesSelected[ent.uuid][evt.uuid] = files;\n        if (!$scope.browser.publication.filesSelected[ent.uuid][evt.uuid].length) {\n          delete $scope.browser.publication.filesSelected[ent.uuid][evt.uuid];\n          if (_.isEmpty($scope.browser.publication.filesSelected[ent.uuid])) {\n            _removeFromLists(ent, evt);\n          } else {\n            _removeFromLists(ent, evt);\n          }\n        }\n      } else {\n        $scope.browser.publication.filesSelected[ent.uuid] = files;\n        if (!$scope.browser.publication.filesSelected[ent.uuid].length) {\n          delete $scope.browser.publication.filesSelected[ent.uuid];\n          if (_.isEmpty($scope.browser.publication.filesSelected[ent.uuid])) {\n            _removeFromLists(ent);\n          }\n        }\n      }\n    },\n\n    selectFileForPublication: function selectFileForPublication(ent, evt, file) {\n      if (typeof $scope.browser.publication[ent.uuid] === 'undefined') {\n        $scope.browser.publication[ent.uuid] = {};\n      }\n      var files = [];\n      if (ent.name === 'designsafe.project.experiment') {\n        files = $scope.browser.publication[ent.uuid][evt.uuid];\n      } else {\n        files = $scope.browser.publication[ent.uuid];\n      }\n      if (typeof files == 'undefined') {\n        files = [];\n      }\n      files.push(file);\n      if (ent.name === 'designsafe.project.experiment') {\n        $scope.browser.publication[ent.uuid][evt.uuid] = files;\n      } else {\n        $scope.browser.publication[ent.uuid] = files;\n      }\n      _addToLists(ent, evt);\n    },\n\n    filterExperiments: function filterExperiments(experiments) {\n      if (!$scope.browser.publishPipeline || $scope.browser.publishPipeline === 'select') {\n        return experiments;\n      } else {\n        return $scope.browser.publication.experimentsList;\n      }\n    },\n\n    filterEvents: function filterEvents(events, exp) {\n      if (!$scope.browser.publishPipeline || $scope.browser.publishPipeline === 'select') {\n        return events;\n      } else {\n        return _.filter($scope.browser.publication.eventsList, function (evt) {\n          return _.contains(evt.associationIds, exp.uuid);\n        });\n      }\n    },\n\n    filterFiles: function filterFiles(ent, evt, listing) {\n      if (!$scope.browser.publishPipeline || $scope.browser.publishPipeline === 'select') {\n        return listing;\n      } else if (ent.name === 'designsafe.project.experiment') {\n        return $scope.browser.publication.filesSelected[ent.uuid][evt.uuid];\n      } else {\n        return $scope.browser.publication.filesSelected[ent.uuid];\n      }\n    },\n\n    editUsers: function editUsers() {\n      fields = [{ id: 'last_name', name: 'last_name', label: 'Last Name', uniq: 'username', type: 'text' }, { id: 'first_name', name: 'first_name', label: 'First Name', uniq: 'username', type: 'text' }];\n      classes = {\n        'first_name': 'col-md-6',\n        'last_name': 'col-md-6'\n      };\n      modal = _editFieldModal($scope.browser.publication.users, 'Edit Users', fields, classes);\n\n      modal.result.then(function (respArr) {\n        $scope.browser.publication.users = respArr;\n      });\n    },\n\n    editInsts: function editInsts() {\n      fields = [{ id: 'label', name: 'label', label: 'Institution', uniq: 'name', type: 'text' }];\n      modal = _editFieldModal($scope.browser.publication.institutions, 'Edit Institutions', fields);\n\n      modal.result.then(function (respArr) {\n        $scope.browser.publication.institutions = respArr;\n      });\n    },\n\n    togglePubAgreement: function togglePubAgreement() {\n      $scope.state.publishAgreement = !$scope.state.publishAgreement;\n    }\n  };\n\n  $scope.publicationCtrl = _publicationCtrl;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ProjectListCtrl;\nfunction ProjectListCtrl($scope, $state, Django, ProjectService) {\n  'ngInject';\n\n  $scope.ui = {};\n  $scope.data = {\n    customRoot: {\n      name: 'My Projects',\n      href: $state.href('db.projects.list')\n    }\n  };\n  $scope.ui.busy = true;\n  $scope.data.projects = [];\n  ProjectService.list().then(function (projects) {\n    $scope.ui.busy = false;\n    $scope.data.projects = projects;\n  });\n\n  $scope.onBrowse = function onBrowse($event, project) {\n    $event.preventDefault();\n    $state.go('db.projects.listing', { systemId: project.id,\n      filePath: '/',\n      projectTitle: project.name });\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvZGF0YV9kZXBvdC9jb250cm9sbGVycy9wcm9qZWN0LWxpc3QuanM/ZjM0MSJdLCJuYW1lcyI6WyJQcm9qZWN0TGlzdEN0cmwiLCIkc2NvcGUiLCIkc3RhdGUiLCJEamFuZ28iLCJQcm9qZWN0U2VydmljZSIsInVpIiwiZGF0YSIsImN1c3RvbVJvb3QiLCJuYW1lIiwiaHJlZiIsImJ1c3kiLCJwcm9qZWN0cyIsImxpc3QiLCJ0aGVuIiwib25Ccm93c2UiLCIkZXZlbnQiLCJwcm9qZWN0IiwicHJldmVudERlZmF1bHQiLCJnbyIsInN5c3RlbUlkIiwiaWQiLCJmaWxlUGF0aCIsInByb2plY3RUaXRsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBQ3dCQSxlO0FBQVQsU0FBU0EsZUFBVCxDQUF5QkMsTUFBekIsRUFBaUNDLE1BQWpDLEVBQXlDQyxNQUF6QyxFQUFpREMsY0FBakQsRUFBaUU7QUFDOUU7O0FBQ0FILFNBQU9JLEVBQVAsR0FBWSxFQUFaO0FBQ0FKLFNBQU9LLElBQVAsR0FBYztBQUNaQyxnQkFBWTtBQUNWQyxZQUFNLGFBREk7QUFFVkMsWUFBTVAsT0FBT08sSUFBUCxDQUFZLGtCQUFaO0FBRkk7QUFEQSxHQUFkO0FBTUFSLFNBQU9JLEVBQVAsQ0FBVUssSUFBVixHQUFpQixJQUFqQjtBQUNBVCxTQUFPSyxJQUFQLENBQVlLLFFBQVosR0FBdUIsRUFBdkI7QUFDQVAsaUJBQWVRLElBQWYsR0FBc0JDLElBQXRCLENBQTJCLFVBQVNGLFFBQVQsRUFBbUI7QUFDNUNWLFdBQU9JLEVBQVAsQ0FBVUssSUFBVixHQUFpQixLQUFqQjtBQUNBVCxXQUFPSyxJQUFQLENBQVlLLFFBQVosR0FBdUJBLFFBQXZCO0FBQ0QsR0FIRDs7QUFLQVYsU0FBT2EsUUFBUCxHQUFrQixTQUFTQSxRQUFULENBQWtCQyxNQUFsQixFQUEwQkMsT0FBMUIsRUFBbUM7QUFDbkRELFdBQU9FLGNBQVA7QUFDQWYsV0FBT2dCLEVBQVAsQ0FBVSxxQkFBVixFQUFpQyxFQUFDQyxVQUFVSCxRQUFRSSxFQUFuQjtBQUNBQyxnQkFBVSxHQURWO0FBRUFDLG9CQUFjTixRQUFRUixJQUZ0QixFQUFqQztBQUdELEdBTEQ7QUFPRCIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUHJvamVjdExpc3RDdHJsKCRzY29wZSwgJHN0YXRlLCBEamFuZ28sIFByb2plY3RTZXJ2aWNlKSB7XG4gICduZ0luamVjdCc7XG4gICRzY29wZS51aSA9IHt9O1xuICAkc2NvcGUuZGF0YSA9IHtcbiAgICBjdXN0b21Sb290OiB7XG4gICAgICBuYW1lOiAnTXkgUHJvamVjdHMnLFxuICAgICAgaHJlZjogJHN0YXRlLmhyZWYoJ2RiLnByb2plY3RzLmxpc3QnKVxuICAgIH1cbiAgfTtcbiAgJHNjb3BlLnVpLmJ1c3kgPSB0cnVlO1xuICAkc2NvcGUuZGF0YS5wcm9qZWN0cyA9IFtdO1xuICBQcm9qZWN0U2VydmljZS5saXN0KCkudGhlbihmdW5jdGlvbihwcm9qZWN0cykge1xuICAgICRzY29wZS51aS5idXN5ID0gZmFsc2U7XG4gICAgJHNjb3BlLmRhdGEucHJvamVjdHMgPSBwcm9qZWN0cztcbiAgfSk7XG5cbiAgJHNjb3BlLm9uQnJvd3NlID0gZnVuY3Rpb24gb25Ccm93c2UoJGV2ZW50LCBwcm9qZWN0KSB7XG4gICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgJHN0YXRlLmdvKCdkYi5wcm9qZWN0cy5saXN0aW5nJywge3N5c3RlbUlkOiBwcm9qZWN0LmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVQYXRoOiAnLycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdFRpdGxlOiBwcm9qZWN0Lm5hbWV9KTtcbiAgfTtcblxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcG9ydGFsL3N0YXRpYy9wb3J0YWwvc2NyaXB0cy9hbmd1bGFyL2RhdGFfZGVwb3QvY29udHJvbGxlcnMvcHJvamVjdC1saXN0LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ProjectListingCtrl;\nfunction ProjectListingCtrl($scope, $state, $stateParams, Django, ProjectService, DataBrowserService) {\n  $scope.data = {\n    customRoot: {\n      name: 'My Projects',\n      href: $state.href('db.projects.list')\n    }\n  };\n  $scope.systemId = $stateParams.systemId;\n  var options = {\n    system: $scope.systemId,\n    path: $stateParams.filePath\n  };\n  DataBrowserService.apiParams.fileMgr = 'shared';\n  DataBrowserService.apiParams.baseUrl = '/api/data-depot/files';\n  DataBrowserService.apiParams.searchState = 'dataSearch';\n  $scope.browser = DataBrowserService.state();\n  DataBrowserService.browse(options).then(function (resp) {\n    $scope.browser = DataBrowserService.state();\n  });\n\n  //This adds the project to the breadcrumbs\n  $scope.searchState = DataBrowserService.apiParams.searchState;\n  ProjectService.list().then(function (resp) {\n    var prj = _.find(resp, { id: $scope.systemId });\n    prj.href = $state.href('db.projects.listing', {\n      systemId: prj.id,\n      filePath: '/'\n    });\n    $scope.data.project = prj;\n  });\n\n  $scope.onSelect = function ($event, file) {\n    $event.stopPropagation();\n    if ($event.ctrlKey || $event.metaKey) {\n      var selectedIndex = $scope.browser.selected.indexOf(file);\n      if (selectedIndex > -1) {\n        DataBrowserService.deselect([file]);\n      } else {\n        DataBrowserService.select([file]);\n      }\n    } else if ($event.shiftKey && $scope.browser.selected.length > 0) {\n      var lastFile = $scope.browser.selected[$scope.browser.selected.length - 1];\n      var lastIndex = $scope.browser.listing.children.indexOf(lastFile);\n      var fileIndex = $scope.browser.listing.children.indexOf(file);\n      var min = Math.min(lastIndex, fileIndex);\n      var max = Math.max(lastIndex, fileIndex);\n      DataBrowserService.select($scope.browser.listing.children.slice(min, max + 1));\n    } else if (typeof file._ui !== 'undefined' && file._ui.selected) {\n      DataBrowserService.deselect([file]);\n    } else {\n      DataBrowserService.select([file], true);\n    }\n  };\n\n  $scope.onBrowse = function ($event, file) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    if (file.type === 'file') {\n      DataBrowserService.preview(file, $scope.browser.listing);\n    } else {\n      $state.go('db.projects.listing', { systemId: file.system, filePath: file.path });\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvZGF0YV9kZXBvdC9jb250cm9sbGVycy9wcm9qZWN0LWxpc3RpbmcuanM/OTFiNCJdLCJuYW1lcyI6WyJQcm9qZWN0TGlzdGluZ0N0cmwiLCIkc2NvcGUiLCIkc3RhdGUiLCIkc3RhdGVQYXJhbXMiLCJEamFuZ28iLCJQcm9qZWN0U2VydmljZSIsIkRhdGFCcm93c2VyU2VydmljZSIsImRhdGEiLCJjdXN0b21Sb290IiwibmFtZSIsImhyZWYiLCJzeXN0ZW1JZCIsIm9wdGlvbnMiLCJzeXN0ZW0iLCJwYXRoIiwiZmlsZVBhdGgiLCJhcGlQYXJhbXMiLCJmaWxlTWdyIiwiYmFzZVVybCIsInNlYXJjaFN0YXRlIiwiYnJvd3NlciIsInN0YXRlIiwiYnJvd3NlIiwidGhlbiIsInJlc3AiLCJsaXN0IiwicHJqIiwiXyIsImZpbmQiLCJpZCIsInByb2plY3QiLCJvblNlbGVjdCIsIiRldmVudCIsImZpbGUiLCJzdG9wUHJvcGFnYXRpb24iLCJjdHJsS2V5IiwibWV0YUtleSIsInNlbGVjdGVkSW5kZXgiLCJzZWxlY3RlZCIsImluZGV4T2YiLCJkZXNlbGVjdCIsInNlbGVjdCIsInNoaWZ0S2V5IiwibGVuZ3RoIiwibGFzdEZpbGUiLCJsYXN0SW5kZXgiLCJsaXN0aW5nIiwiY2hpbGRyZW4iLCJmaWxlSW5kZXgiLCJtaW4iLCJNYXRoIiwibWF4Iiwic2xpY2UiLCJfdWkiLCJvbkJyb3dzZSIsInByZXZlbnREZWZhdWx0IiwidHlwZSIsInByZXZpZXciLCJnbyJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBQXdCQSxrQjtBQUFULFNBQVNBLGtCQUFULENBQTRCQyxNQUE1QixFQUFvQ0MsTUFBcEMsRUFBNENDLFlBQTVDLEVBQTBEQyxNQUExRCxFQUFrRUMsY0FBbEUsRUFBa0ZDLGtCQUFsRixFQUFxRztBQUNsSEwsU0FBT00sSUFBUCxHQUFjO0FBQ1pDLGdCQUFZO0FBQ1ZDLFlBQU0sYUFESTtBQUVWQyxZQUFNUixPQUFPUSxJQUFQLENBQVksa0JBQVo7QUFGSTtBQURBLEdBQWQ7QUFNQVQsU0FBT1UsUUFBUCxHQUFrQlIsYUFBYVEsUUFBL0I7QUFDQSxNQUFJQyxVQUFVO0FBQ1pDLFlBQVFaLE9BQU9VLFFBREg7QUFFWkcsVUFBT1gsYUFBYVk7QUFGUixHQUFkO0FBSUFULHFCQUFtQlUsU0FBbkIsQ0FBNkJDLE9BQTdCLEdBQXVDLFFBQXZDO0FBQ0FYLHFCQUFtQlUsU0FBbkIsQ0FBNkJFLE9BQTdCLEdBQXVDLHVCQUF2QztBQUNBWixxQkFBbUJVLFNBQW5CLENBQTZCRyxXQUE3QixHQUEyQyxZQUEzQztBQUNBbEIsU0FBT21CLE9BQVAsR0FBaUJkLG1CQUFtQmUsS0FBbkIsRUFBakI7QUFDQWYscUJBQW1CZ0IsTUFBbkIsQ0FBMEJWLE9BQTFCLEVBQW1DVyxJQUFuQyxDQUF3QyxVQUFVQyxJQUFWLEVBQWdCO0FBQ3REdkIsV0FBT21CLE9BQVAsR0FBaUJkLG1CQUFtQmUsS0FBbkIsRUFBakI7QUFDRCxHQUZEOztBQU1BO0FBQ0FwQixTQUFPa0IsV0FBUCxHQUFxQmIsbUJBQW1CVSxTQUFuQixDQUE2QkcsV0FBbEQ7QUFDQWQsaUJBQWVvQixJQUFmLEdBQXNCRixJQUF0QixDQUEyQixVQUFVQyxJQUFWLEVBQWdCO0FBQ3pDLFFBQUlFLE1BQU1DLEVBQUVDLElBQUYsQ0FBT0osSUFBUCxFQUFhLEVBQUNLLElBQUk1QixPQUFPVSxRQUFaLEVBQWIsQ0FBVjtBQUNBZSxRQUFJaEIsSUFBSixHQUFXUixPQUFPUSxJQUFQLENBQVkscUJBQVosRUFBbUM7QUFDNUNDLGdCQUFVZSxJQUFJRyxFQUQ4QjtBQUU1Q2QsZ0JBQVU7QUFGa0MsS0FBbkMsQ0FBWDtBQUlBZCxXQUFPTSxJQUFQLENBQVl1QixPQUFaLEdBQXNCSixHQUF0QjtBQUNELEdBUEQ7O0FBU0F6QixTQUFPOEIsUUFBUCxHQUFrQixVQUFTQyxNQUFULEVBQWlCQyxJQUFqQixFQUF1QjtBQUN2Q0QsV0FBT0UsZUFBUDtBQUNBLFFBQUlGLE9BQU9HLE9BQVAsSUFBa0JILE9BQU9JLE9BQTdCLEVBQXNDO0FBQ3BDLFVBQUlDLGdCQUFnQnBDLE9BQU9tQixPQUFQLENBQWVrQixRQUFmLENBQXdCQyxPQUF4QixDQUFnQ04sSUFBaEMsQ0FBcEI7QUFDQSxVQUFJSSxnQkFBZ0IsQ0FBQyxDQUFyQixFQUF3QjtBQUN0Qi9CLDJCQUFtQmtDLFFBQW5CLENBQTRCLENBQUNQLElBQUQsQ0FBNUI7QUFDRCxPQUZELE1BRU87QUFDTDNCLDJCQUFtQm1DLE1BQW5CLENBQTBCLENBQUNSLElBQUQsQ0FBMUI7QUFDRDtBQUNGLEtBUEQsTUFPTyxJQUFJRCxPQUFPVSxRQUFQLElBQW1CekMsT0FBT21CLE9BQVAsQ0FBZWtCLFFBQWYsQ0FBd0JLLE1BQXhCLEdBQWlDLENBQXhELEVBQTJEO0FBQ2hFLFVBQUlDLFdBQVczQyxPQUFPbUIsT0FBUCxDQUFla0IsUUFBZixDQUF3QnJDLE9BQU9tQixPQUFQLENBQWVrQixRQUFmLENBQXdCSyxNQUF4QixHQUFpQyxDQUF6RCxDQUFmO0FBQ0EsVUFBSUUsWUFBWTVDLE9BQU9tQixPQUFQLENBQWUwQixPQUFmLENBQXVCQyxRQUF2QixDQUFnQ1IsT0FBaEMsQ0FBd0NLLFFBQXhDLENBQWhCO0FBQ0EsVUFBSUksWUFBWS9DLE9BQU9tQixPQUFQLENBQWUwQixPQUFmLENBQXVCQyxRQUF2QixDQUFnQ1IsT0FBaEMsQ0FBd0NOLElBQXhDLENBQWhCO0FBQ0EsVUFBSWdCLE1BQU1DLEtBQUtELEdBQUwsQ0FBU0osU0FBVCxFQUFvQkcsU0FBcEIsQ0FBVjtBQUNBLFVBQUlHLE1BQU1ELEtBQUtDLEdBQUwsQ0FBU04sU0FBVCxFQUFvQkcsU0FBcEIsQ0FBVjtBQUNBMUMseUJBQW1CbUMsTUFBbkIsQ0FBMEJ4QyxPQUFPbUIsT0FBUCxDQUFlMEIsT0FBZixDQUF1QkMsUUFBdkIsQ0FBZ0NLLEtBQWhDLENBQXNDSCxHQUF0QyxFQUEyQ0UsTUFBTSxDQUFqRCxDQUExQjtBQUNELEtBUE0sTUFPQSxJQUFJLE9BQU9sQixLQUFLb0IsR0FBWixLQUFvQixXQUFwQixJQUNBcEIsS0FBS29CLEdBQUwsQ0FBU2YsUUFEYixFQUNzQjtBQUMzQmhDLHlCQUFtQmtDLFFBQW5CLENBQTRCLENBQUNQLElBQUQsQ0FBNUI7QUFDRCxLQUhNLE1BR0E7QUFDTDNCLHlCQUFtQm1DLE1BQW5CLENBQTBCLENBQUNSLElBQUQsQ0FBMUIsRUFBa0MsSUFBbEM7QUFDRDtBQUNGLEdBdEJEOztBQXdCQWhDLFNBQU9xRCxRQUFQLEdBQWtCLFVBQVV0QixNQUFWLEVBQWtCQyxJQUFsQixFQUF3QjtBQUN4Q0QsV0FBT3VCLGNBQVA7QUFDQXZCLFdBQU9FLGVBQVA7QUFDQSxRQUFJRCxLQUFLdUIsSUFBTCxLQUFjLE1BQWxCLEVBQTBCO0FBQ3hCbEQseUJBQW1CbUQsT0FBbkIsQ0FBMkJ4QixJQUEzQixFQUFpQ2hDLE9BQU9tQixPQUFQLENBQWUwQixPQUFoRDtBQUNELEtBRkQsTUFFTztBQUNMNUMsYUFBT3dELEVBQVAsQ0FBVSxxQkFBVixFQUFpQyxFQUFDL0MsVUFBVXNCLEtBQUtwQixNQUFoQixFQUF3QkUsVUFBVWtCLEtBQUtuQixJQUF2QyxFQUFqQztBQUNEO0FBQ0YsR0FSRDtBQVNEIiwiZmlsZSI6IjEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUHJvamVjdExpc3RpbmdDdHJsKCRzY29wZSwgJHN0YXRlLCAkc3RhdGVQYXJhbXMsIERqYW5nbywgUHJvamVjdFNlcnZpY2UsIERhdGFCcm93c2VyU2VydmljZSl7XG4gICRzY29wZS5kYXRhID0ge1xuICAgIGN1c3RvbVJvb3Q6IHtcbiAgICAgIG5hbWU6ICdNeSBQcm9qZWN0cycsXG4gICAgICBocmVmOiAkc3RhdGUuaHJlZignZGIucHJvamVjdHMubGlzdCcpXG4gICAgfVxuICB9O1xuICAkc2NvcGUuc3lzdGVtSWQgPSAkc3RhdGVQYXJhbXMuc3lzdGVtSWQ7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIHN5c3RlbTogJHNjb3BlLnN5c3RlbUlkLFxuICAgIHBhdGg6ICgkc3RhdGVQYXJhbXMuZmlsZVBhdGgpXG4gIH07XG4gIERhdGFCcm93c2VyU2VydmljZS5hcGlQYXJhbXMuZmlsZU1nciA9ICdzaGFyZWQnO1xuICBEYXRhQnJvd3NlclNlcnZpY2UuYXBpUGFyYW1zLmJhc2VVcmwgPSAnL2FwaS9kYXRhLWRlcG90L2ZpbGVzJztcbiAgRGF0YUJyb3dzZXJTZXJ2aWNlLmFwaVBhcmFtcy5zZWFyY2hTdGF0ZSA9ICdkYXRhU2VhcmNoJztcbiAgJHNjb3BlLmJyb3dzZXIgPSBEYXRhQnJvd3NlclNlcnZpY2Uuc3RhdGUoKTtcbiAgRGF0YUJyb3dzZXJTZXJ2aWNlLmJyb3dzZShvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChyZXNwKSB7XG4gICAgJHNjb3BlLmJyb3dzZXIgPSBEYXRhQnJvd3NlclNlcnZpY2Uuc3RhdGUoKTtcbiAgfSk7XG5cblxuXG4gIC8vVGhpcyBhZGRzIHRoZSBwcm9qZWN0IHRvIHRoZSBicmVhZGNydW1ic1xuICAkc2NvcGUuc2VhcmNoU3RhdGUgPSBEYXRhQnJvd3NlclNlcnZpY2UuYXBpUGFyYW1zLnNlYXJjaFN0YXRlO1xuICBQcm9qZWN0U2VydmljZS5saXN0KCkudGhlbihmdW5jdGlvbiAocmVzcCkge1xuICAgIHZhciBwcmogPSBfLmZpbmQocmVzcCwge2lkOiAkc2NvcGUuc3lzdGVtSWR9KTtcbiAgICBwcmouaHJlZiA9ICRzdGF0ZS5ocmVmKCdkYi5wcm9qZWN0cy5saXN0aW5nJywge1xuICAgICAgc3lzdGVtSWQ6IHByai5pZCxcbiAgICAgIGZpbGVQYXRoOiAnLycsXG4gICAgfSk7XG4gICAgJHNjb3BlLmRhdGEucHJvamVjdCA9IHByajtcbiAgfSk7XG5cbiAgJHNjb3BlLm9uU2VsZWN0ID0gZnVuY3Rpb24oJGV2ZW50LCBmaWxlKSB7XG4gICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGlmICgkZXZlbnQuY3RybEtleSB8fCAkZXZlbnQubWV0YUtleSkge1xuICAgICAgdmFyIHNlbGVjdGVkSW5kZXggPSAkc2NvcGUuYnJvd3Nlci5zZWxlY3RlZC5pbmRleE9mKGZpbGUpO1xuICAgICAgaWYgKHNlbGVjdGVkSW5kZXggPiAtMSkge1xuICAgICAgICBEYXRhQnJvd3NlclNlcnZpY2UuZGVzZWxlY3QoW2ZpbGVdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIERhdGFCcm93c2VyU2VydmljZS5zZWxlY3QoW2ZpbGVdKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCRldmVudC5zaGlmdEtleSAmJiAkc2NvcGUuYnJvd3Nlci5zZWxlY3RlZC5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgbGFzdEZpbGUgPSAkc2NvcGUuYnJvd3Nlci5zZWxlY3RlZFskc2NvcGUuYnJvd3Nlci5zZWxlY3RlZC5sZW5ndGggLSAxXTtcbiAgICAgIHZhciBsYXN0SW5kZXggPSAkc2NvcGUuYnJvd3Nlci5saXN0aW5nLmNoaWxkcmVuLmluZGV4T2YobGFzdEZpbGUpO1xuICAgICAgdmFyIGZpbGVJbmRleCA9ICRzY29wZS5icm93c2VyLmxpc3RpbmcuY2hpbGRyZW4uaW5kZXhPZihmaWxlKTtcbiAgICAgIHZhciBtaW4gPSBNYXRoLm1pbihsYXN0SW5kZXgsIGZpbGVJbmRleCk7XG4gICAgICB2YXIgbWF4ID0gTWF0aC5tYXgobGFzdEluZGV4LCBmaWxlSW5kZXgpO1xuICAgICAgRGF0YUJyb3dzZXJTZXJ2aWNlLnNlbGVjdCgkc2NvcGUuYnJvd3Nlci5saXN0aW5nLmNoaWxkcmVuLnNsaWNlKG1pbiwgbWF4ICsgMSkpO1xuICAgIH0gZWxzZSBpZiggdHlwZW9mIGZpbGUuX3VpICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgZmlsZS5fdWkuc2VsZWN0ZWQpe1xuICAgICAgRGF0YUJyb3dzZXJTZXJ2aWNlLmRlc2VsZWN0KFtmaWxlXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIERhdGFCcm93c2VyU2VydmljZS5zZWxlY3QoW2ZpbGVdLCB0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLm9uQnJvd3NlID0gZnVuY3Rpb24gKCRldmVudCwgZmlsZSkge1xuICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAoZmlsZS50eXBlID09PSAnZmlsZScpIHtcbiAgICAgIERhdGFCcm93c2VyU2VydmljZS5wcmV2aWV3KGZpbGUsICRzY29wZS5icm93c2VyLmxpc3RpbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkc3RhdGUuZ28oJ2RiLnByb2plY3RzLmxpc3RpbmcnLCB7c3lzdGVtSWQ6IGZpbGUuc3lzdGVtLCBmaWxlUGF0aDogZmlsZS5wYXRofSk7XG4gICAgfVxuICB9O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcG9ydGFsL3N0YXRpYy9wb3J0YWwvc2NyaXB0cy9hbmd1bGFyL2RhdGFfZGVwb3QvY29udHJvbGxlcnMvcHJvamVjdC1saXN0aW5nLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ProjectViewCtrl;\nfunction ProjectViewCtrl($scope, $state, Django, ProjectService, ProjectEntitiesService, DataBrowserService, projectId, FileListing, $uibModal, $q, $http) {\n  'ngInject';\n\n  $scope.data = {};\n  $scope.state = DataBrowserService.state();\n  $scope.ui = {};\n\n  function setEntitiesRel(resp) {\n    $scope.data.project.setEntitiesRel(resp);\n    return resp;\n  }\n\n  ProjectService.get({ uuid: projectId }).then(function (project) {\n    $scope.data.project = project;\n    DataBrowserService.state().project = project;\n    DataBrowserService.state().loadingEntities = true;\n    $scope.data.loadingEntities = true;\n    var _related = project._related;\n    var tasks = [];\n    for (var attrname in _related) {\n      var name = _related[attrname];\n      if (name != 'designsafe.file') {\n        tasks.push(ProjectEntitiesService.listEntities({ uuid: projectId, name: name }).then(setEntitiesRel));\n      }\n    }\n    $q.all(tasks).then(function (resp) {\n      //$scope.data.project.setupAllRels();\n      return resp;\n    }).then(function (resp) {\n      DataBrowserService.state().loadingEntities = false;\n      $scope.data.loadingEntities = false;\n    }, function (err) {\n      DataBrowserService.state().loadingEntities = false;\n      $scope.data.loadingEntities = false;\n    }).then(function () {\n      ProjectService.getCollaborators({ uuid: DataBrowserService.state().project.uuid }).then(function (resp) {\n        DataBrowserService.state().project.value.teamMembers = _.without(resp.data.teamMembers, 'ds_admin');\n      });\n    });\n  });\n\n  $scope.showText = function (text) {\n    $uibModal.open({\n      template: '<div class=\"modal-header\">' + '<h3>Description</h3>' + '</div>' + '<div class=\"modal-body\">' + '<div style=\"border: 1px solid black;\"' + '\"padding:5px;\">' + '{{text}}' + '</div>' + '</div>' + '<div class=\"modal-footer\">' + '<button class=\"btn btn-default\" ng-click=\"close()\">' + 'Close' + '</button>' + '</div>',\n      controller: ['$scope', '$uibModalInstance', function ($scope, $uibModalInstance) {\n        $scope.text = text;\n        $scope.close = function () {\n          $uibModalInstance.dismiss('Close');\n        };\n      }]\n    });\n  };\n\n  $scope.editProject = function ($event) {\n    if ($event) {\n      $event.preventDefault();\n    }\n    ProjectService.editProject($scope.data.project).then(function (project) {\n      $scope.data.project = project;\n    });\n  };\n\n  $scope.manageCollabs = function ($event) {\n    if ($event) {\n      $event.preventDefault();\n    }\n    ProjectService.manageCollaborators($scope.data.project).then(function (res) {\n\n      // $scope.data.project.pi = res.data.pi;\n      // $scope.data.project.coPis = res.data.coPis;\n      // $scope.data.project.teamMembers = res.data.teamMembers;\n    });\n  };\n\n  $scope.manageExperiments = function ($event) {\n    if ($event) {\n      $event.preventDefault();\n    }\n    var experimentsAttr = $scope.data.project.getRelatedAttrName('designsafe.project.experiment');\n    var experiments = $scope.data.project[experimentsAttr];\n    if (typeof experiments === 'undefined') {\n      $scope.data.project[experimentsAttr] = [];\n      experiments = $scope.data.project[experimentsAttr];\n    }\n    ProjectService.manageExperiments({ 'experiments': experiments,\n      'project': $scope.data.project }).then(function (experiments) {\n      $scope.data.experiments = experiments;\n    });\n  };\n\n  $scope.dateString = function (s) {\n    var d = Date(s);\n    return d;\n  };\n\n  $scope.showListing = function () {\n    //DataBrowserService.state().showMainListing = true;\n    //DataBrowserService.state().showPreviewListing = false;\n    DataBrowserService.showListing();\n  };\n\n  $scope.showPreview = function () {\n    //DataBrowserService.state().showMainListing = false;\n    //DataBrowserService.state().showPreviewListing = true;\n    $scope.previewHref = undefined;\n    DataBrowserService.showPreview();\n    FileListing.get({ 'system': $scope.browser.listing.system,\n      'name': 'projectimage.jpg',\n      'path': '/projectimage.jpg' }).then(function (list) {\n      list.preview().then(function (data) {\n        $scope.previewHref = data.postit;\n      });\n    });\n  };\n\n  $scope.publishPipeline_start = function () {\n    $scope.state.publishPipeline = 'select';\n  };\n\n  $scope.publishPipeline_review = function () {\n    $scope.state.publishPipeline = 'review';\n  };\n\n  $scope.publishPipeline_meta = function () {\n    $scope.state.publishPipeline = 'meta';\n  };\n\n  $scope.publishPipeline_exit = function () {\n    $scope.state.publishPipeline = undefined;\n    $scope.ui.publicationMessages = [];\n  };\n\n  $scope.publishPipeline_prev = function (st) {\n    if (st == 'agreement') {\n      $scope.state.publishPipeline = 'meta';\n    } else if (st == 'meta') {\n      $scope.state.publishPipeline = 'review';\n    } else if (st == 'review') {\n      $scope.state.publishPipeline = 'select';\n    } else {\n      $scope.state.publishPipeline = 'select';\n    }\n  };\n\n  $scope.publishPipeline_next = function (st) {\n    if (st == 'select') {\n      $scope.state.publishPipeline = 'review';\n    } else if (st == 'review') {\n      var institutions = [];\n      _.each($scope.state.publication.experimentsList, function (exp) {\n        var o = {\n          label: exp.getEF($scope.state.project.value.projectType, exp.value.experimentalFacility).institution,\n          name: exp.value.experimentalFacility\n        };\n        institutions.push(o);\n      });\n      _.each($scope.state.publication.users, function (user) {\n        institutions.push({ label: user.profile.institution,\n          name: user.username });\n      });\n      $scope.state.publication.institutions = _.uniq(institutions, function (inst) {\n        return inst.label;\n      });\n      $scope.state.publishPipeline = 'meta';\n    } else if (st == 'meta') {\n      $scope.state.publishPipeline = 'agreement';\n    } else {\n      $scope.state.publishPipeline = 'agreement';\n    }\n  };\n\n  $scope.publishPipeline_publish = function () {\n    var publication = angular.copy($scope.state.publication);\n    var experimentsList = [];\n    var eventsList = [];\n    var analysisList = [];\n    var reportsList = [];\n    var modelConfigs = [];\n    var sensorLists = [];\n    var publicationMessages = [];\n    if (publication.experimentsList) {\n      experimentsList = _.map(publication.experimentsList, function (exp) {\n        exp.value.equipmentType = exp.getET(exp.value.experimentalFacility, exp.value.equipmentType).label;\n        exp.value.experimentalFacility = exp.getEF($scope.state.project.value.projectType, exp.value.experimentalFacility).label;\n        exp.events = $scope.state.publication;\n        delete exp._ui;\n        delete exp.events;\n        if (!exp.value.authors.length) {\n          publicationMessages.push({ title: 'Experiment ' + exp.value.title,\n            message: 'Missing authors' });\n        }\n        return exp;\n      });\n      delete publication.experimentsList;\n    }\n    if (publication.eventsList) {\n      var _eventsList = angular.copy(publication.eventsList);\n      delete publication.eventsList;\n      var expsUuids = _.map(experimentsList, function (exp) {\n        return exp.uuid;\n      });\n      eventsList = _.filter(_eventsList, function (evt) {\n        return _.intersection(evt.associationIds, expsUuids);\n      });\n      var mcfsUuids = [];\n      var slsUuids = [];\n      _.each(eventsList, function (evt) {\n        mcfsUuids = mcfsUuids.concat(evt.value.modelConfigs);\n        slsUuids = slsUuids.concat(evt.value.sensorLists);\n        delete evt.tagsAsOptions;\n        evt.fileObjs = _.map($scope.state.listings[evt.uuid], function (f) {\n          return {\n            'path': f.path,\n            'type': f.type,\n            'length': f.length,\n            'name': f.name\n          };\n        });\n        if (!evt.fileObjs.length) {\n          publicationMessages.push({ title: 'Event ' + evt.value.title,\n            message: 'Missing files' });\n        }\n      });\n      _.each(mcfsUuids, function (mcf) {\n        var _mcf = angular.copy($scope.state.project.getRelatedByUuid(mcf));\n        delete _mcf.tagsAsOptions;\n        _mcf.fileObjs = _.map($scope.state.listings[_mcf.uuid], function (f) {\n          return {\n            'path': f.path,\n            'type': f.type,\n            'length': f.length,\n            'name': f.name\n          };\n        });\n        if (!_mcf.fileObjs.length) {\n          publicationMessages.push({ title: 'Model Config ' + _mcf.value.title,\n            message: 'Missing files.' });\n        }\n        modelConfigs.push(_mcf);\n      });\n      _.each(slsUuids, function (slt) {\n        var _slt = angular.copy($scope.state.project.getRelatedByUuid(slt));\n        delete _slt.tagsAsOptions;\n        _slt.fileObjs = _.map($scope.state.listings[_slt.uuid], function (f) {\n          return {\n            'path': f.path,\n            'type': f.type,\n            'length': f.length,\n            'name': f.name\n          };\n        });\n        if (!_slt.fileObjs.length) {\n          publicationMessages.push({ title: 'Sensor Info ' + _slt.value.title,\n            message: 'Missing files.' });\n        }\n        sensorLists.push(_slt);\n      });\n    }\n    if (publication.analysisList) {\n      analysisList = _.map(publication.analysisList, function (ana) {\n        delete ana.tagsAsOptions;\n        ana.fileObjs = _.map($scope.state.listings[ana.uuid], function (f) {\n          return {\n            'path': f.path,\n            'type': f.type,\n            'length': f.length,\n            'name': f.name\n          };\n        });\n        if (!ana.fileObjs.length) {\n          publicationMessages.push({ title: 'Analysis ' + ana.value.title,\n            message: 'Missing Files' });\n        }\n        return ana;\n      });\n      delete publication.analysisList;\n    }\n    if (publication.reportsList) {\n      reportsList = _.map(publication.reportsList, function (rep) {\n        rep.fileObjs = _.map($scope.state.listings[rep.uuid], function (f) {\n          return {\n            'path': f.path,\n            'type': f.type,\n            'length': f.length,\n            'name': f.name\n          };\n        });\n        return rep;\n      });\n      delete publication.reportsList;\n    }\n    var project = angular.copy($scope.state.project);\n    delete project._allRelatedObjects;\n    _.each(project._related, function (val, key) {\n      delete project[key];\n    });\n    delete publication.filesSelected;\n    publication.project = project;\n    publication.eventsList = eventsList;\n    publication.modelConfigs = modelConfigs;\n    publication.sensorLists = sensorLists;\n    publication.analysisList = analysisList;\n    publication.reportsList = reportsList;\n    publication.experimentsList = experimentsList;\n    if (publicationMessages.length) {\n      $scope.ui.publicationMessages = publicationMessages;\n      return;\n    }\n    $http.post('/api/projects/publication/', { publication: publication }).then(function (resp) {\n      $scope.state.publicationMsg = resp.data.message;\n      $scope.state.project.publicationStatus = 'publishing';\n      DataBrowserService.state().publicationMsg = resp.data.message;\n      DataBrowserService.state().project.publicationStatus = 'publishing';\n    });\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = SharedDataCtrl;\nfunction SharedDataCtrl($scope, $state, Django, DataBrowserService) {\n  'ngInject';\n\n  $scope.browser = DataBrowserService.state();\n\n  if (!$scope.browser.error) {\n    $scope.browser.listing.href = $state.href('publicData', {\n      system: $scope.browser.listing.system,\n      filePath: $scope.browser.listing.path\n    });\n    _.each($scope.browser.listing.children, function (child) {\n      child.href = $state.href('sharedData', { system: child.system, filePath: child.path });\n    });\n  }\n\n  $scope.data = {\n    user: Django.user,\n    customRoot: {\n      name: 'Shared with me',\n      href: $state.href('sharedData', { systemId: $scope.browser.listing.system, filePath: '$SHARE/' }) }\n  };\n\n  $scope.resolveBreadcrumbHref = function (trailItem) {\n    return $state.href('sharedData', { systemId: $scope.browser.listing.system, filePath: trailItem.path });\n  };\n\n  $scope.onBrowse = function ($event, file) {\n    $event.preventDefault();\n    $event.stopPropagation();\n\n    var systemId = file.system || file.systemId;\n    var filePath;\n    if (file.path == '/') {\n      filePath = file.path + file.name;\n    } else {\n      filePath = file.path;\n    }\n    if (file.type === 'file') {\n      DataBrowserService.preview(file, $scope.browser.listing);\n    } else {\n      $state.go('sharedData', { systemId: file.system, filePath: file.path });\n    }\n  };\n\n  $scope.onSelect = function ($event, file) {\n    $event.preventDefault();\n    $event.stopPropagation();\n\n    if ($event.ctrlKey || $event.metaKey) {\n      var selectedIndex = $scope.browser.selected.indexOf(file);\n      if (selectedIndex > -1) {\n        DataBrowserService.deselect([file]);\n      } else {\n        DataBrowserService.select([file]);\n      }\n    } else if ($event.shiftKey && $scope.browser.selected.length > 0) {\n      var lastFile = $scope.browser.selected[$scope.browser.selected.length - 1];\n      var lastIndex = $scope.browser.listing.children.indexOf(lastFile);\n      var fileIndex = $scope.browser.listing.children.indexOf(file);\n      var min = Math.min(lastIndex, fileIndex);\n      var max = Math.max(lastIndex, fileIndex);\n      DataBrowserService.select($scope.browser.listing.children.slice(min, max + 1));\n    } else if (typeof file._ui !== 'undefined' && file._ui.selected) {\n      DataBrowserService.deselect([file]);\n    } else {\n      DataBrowserService.select([file], true);\n    }\n  };\n\n  $scope.showFullPath = function (item) {\n    if ($scope.browser.listing.path != '$SHARED' && item.parentPath() != $scope.browser.listing.path && item.parentPath() != '/') {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  $scope.onDetail = function ($event, file) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    DataBrowserService.preview(file, $scope.browser.listing);\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ddBreadcrumb;\nfunction ddBreadcrumb() {\n  return {\n    restrict: 'E',\n    templateUrl: '/static/portal/scripts/angular/data_depot/templates/dd-breadcrumb.html',\n    scope: {\n      listing: '=',\n      skipRoot: '=',\n      customRoot: '=',\n      project: '=',\n      onBrowse: '&',\n      itemHref: '&'\n    },\n    link: function link(scope) {\n      scope.offset = 0;\n      if (scope.skipRoot || scope.customRoot) {\n        scope.offset = 1;\n      }\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvZGF0YV9kZXBvdC9kaXJlY3RpdmVzL2RkLWJyZWFkY3J1bWIuanM/MjJjMyJdLCJuYW1lcyI6WyJkZEJyZWFkY3J1bWIiLCJyZXN0cmljdCIsInRlbXBsYXRlVXJsIiwic2NvcGUiLCJsaXN0aW5nIiwic2tpcFJvb3QiLCJjdXN0b21Sb290IiwicHJvamVjdCIsIm9uQnJvd3NlIiwiaXRlbUhyZWYiLCJsaW5rIiwib2Zmc2V0Il0sIm1hcHBpbmdzIjoiOzs7OztrQkFBd0JBLFk7QUFBVCxTQUFTQSxZQUFULEdBQXdCO0FBQ3JDLFNBQU87QUFDTEMsY0FBVSxHQURMO0FBRUxDLGlCQUFhLHdFQUZSO0FBR0xDLFdBQU87QUFDTEMsZUFBUyxHQURKO0FBRUxDLGdCQUFVLEdBRkw7QUFHTEMsa0JBQVksR0FIUDtBQUlMQyxlQUFTLEdBSko7QUFLTEMsZ0JBQVUsR0FMTDtBQU1MQyxnQkFBVTtBQU5MLEtBSEY7QUFXTEMsVUFBTSxjQUFTUCxLQUFULEVBQWdCO0FBQ3BCQSxZQUFNUSxNQUFOLEdBQWUsQ0FBZjtBQUNBLFVBQUlSLE1BQU1FLFFBQU4sSUFBa0JGLE1BQU1HLFVBQTVCLEVBQXdDO0FBQ3RDSCxjQUFNUSxNQUFOLEdBQWUsQ0FBZjtBQUNEO0FBQ0Y7QUFoQkksR0FBUDtBQWtCRCIsImZpbGUiOiIxNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRkQnJlYWRjcnVtYigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHRlbXBsYXRlVXJsOiAnL3N0YXRpYy9wb3J0YWwvc2NyaXB0cy9hbmd1bGFyL2RhdGFfZGVwb3QvdGVtcGxhdGVzL2RkLWJyZWFkY3J1bWIuaHRtbCcsXG4gICAgc2NvcGU6IHtcbiAgICAgIGxpc3Rpbmc6ICc9JyxcbiAgICAgIHNraXBSb290OiAnPScsXG4gICAgICBjdXN0b21Sb290OiAnPScsXG4gICAgICBwcm9qZWN0OiAnPScsXG4gICAgICBvbkJyb3dzZTogJyYnLFxuICAgICAgaXRlbUhyZWY6ICcmJ1xuICAgIH0sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUpIHtcbiAgICAgIHNjb3BlLm9mZnNldCA9IDA7XG4gICAgICBpZiAoc2NvcGUuc2tpcFJvb3QgfHwgc2NvcGUuY3VzdG9tUm9vdCkge1xuICAgICAgICBzY29wZS5vZmZzZXQgPSAxO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BvcnRhbC9zdGF0aWMvcG9ydGFsL3NjcmlwdHMvYW5ndWxhci9kYXRhX2RlcG90L2RpcmVjdGl2ZXMvZGQtYnJlYWRjcnVtYi5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _ddBreadcrumb = __webpack_require__(16);\n\nvar _ddBreadcrumb2 = _interopRequireDefault(_ddBreadcrumb);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar mod = angular.module('portal.data_depot.directives', []);\n\nmod.directive('ddBreadcrumb', _ddBreadcrumb2.default);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvZGF0YV9kZXBvdC9kaXJlY3RpdmVzL2luZGV4LmpzP2FmYzQiXSwibmFtZXMiOlsibW9kIiwiYW5ndWxhciIsIm1vZHVsZSIsImRpcmVjdGl2ZSJdLCJtYXBwaW5ncyI6Ijs7QUFDQTs7Ozs7O0FBRUEsSUFBSUEsTUFBTUMsUUFBUUMsTUFBUixDQUFlLDhCQUFmLEVBQStDLEVBQS9DLENBQVY7O0FBRUFGLElBQUlHLFNBQUosQ0FBYyxjQUFkIiwiZmlsZSI6IjE3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgZGRCcmVhZGNydW1iIGZyb20gJy4vZGQtYnJlYWRjcnVtYic7XG5cbmxldCBtb2QgPSBhbmd1bGFyLm1vZHVsZSgncG9ydGFsLmRhdGFfZGVwb3QuZGlyZWN0aXZlcycsIFtdKTtcblxubW9kLmRpcmVjdGl2ZSgnZGRCcmVhZGNydW1iJywgZGRCcmVhZGNydW1iKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BvcnRhbC9zdGF0aWMvcG9ydGFsL3NjcmlwdHMvYW5ndWxhci9kYXRhX2RlcG90L2RpcmVjdGl2ZXMvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _services = __webpack_require__(21);\n\nvar _controllers = __webpack_require__(5);\n\nvar _directives = __webpack_require__(17);\n\nvar mod = angular.module('portal.data_depot', ['portal.data_depot.services', 'portal.data_depot.controllers', 'portal.data_depot.directives']);\n\nfunction config($httpProvider, $locationProvider, $stateProvider, $qProvider, $urlRouterProvider, $urlMatcherFactoryProvider, Django) {\n  'ngInject';\n\n  $qProvider.errorOnUnhandledRejections(false);\n  $stateProvider\n  /* Private */\n  .state('db', {\n    url: '/data-depot',\n    abstract: true,\n    template: '<ui-view/>',\n    resolve: {\n      'systems': ['SystemsService', function (SystemsService) {\n        return SystemsService.listing();\n      }]\n    }\n  }).state('db.myData', {\n    url: '/agave/{systemId}/{filePath:any}/',\n    controller: 'MyDataCtrl',\n    templateUrl: '/static/portal/scripts/angular/data_depot/templates/agave-data-listing.html'\n  }).state('db.projects', {\n    url: '/projects/',\n    abstract: true\n  }).state('db.projects.list', {\n    url: '',\n    controller: 'ProjectListCtrl',\n    templateUrl: '/static/portal/scripts/angular/data_depot/templates/project-list.html'\n  }).state('db.projects.listing', {\n    url: '{systemId}/{filePath:any}',\n    controller: 'ProjectListingCtrl',\n    templateUrl: '/static/portal/scripts/angular/data_depot/templates/agave-data-listing.html'\n  }).state('db.communityData', {\n    url: '/public/{systemId}/{filePath:any}',\n    controller: 'CommunityDataCtrl',\n    templateUrl: '/static/portal/scripts/angular/data_depot/templates/agave-data-listing.html',\n    params: {\n      filePath: '/'\n    }\n  }).state('sharedData', {\n    url: '/shared/{systemId}/{filePath:any}/',\n    controller: 'SharedDataCtrl',\n    templateUrl: '/static/portal/scripts/angular/data-depot/templates/agave-shared-data-listing.html',\n    params: {\n      systemId: 'utportal.storage.default',\n      filePath: '$SHARE'\n    },\n    resolve: {\n      'listing': ['$stateParams', 'DataBrowserService', function ($stateParams, DataBrowserService) {\n        var systemId = $stateParams.systemId || 'utportal.storage.default';\n        var filePath = $stateParams.filePath || '$SHARE/';\n\n        DataBrowserService.apiParams.fileMgr = 'agave';\n        DataBrowserService.apiParams.baseUrl = '/api/agave/files';\n        DataBrowserService.apiParams.searchState = 'sharedDataSearch';\n        return DataBrowserService.browse({ system: systemId, path: filePath });\n      }],\n      'auth': function auth($q) {\n        if (Django.context.authenticated) {\n          return true;\n        } else {\n          return $q.reject({\n            type: 'authn',\n            context: Django.context\n          });\n        }\n      }\n    }\n  }).state('dropboxData', {\n    url: '/dropbox/{filePath:any}',\n    controller: 'ExternalDataCtrl',\n    templateUrl: '/static/scripts/data-depot/templates/dropbox-data-listing.html',\n    params: {\n      filePath: '',\n      name: 'Dropbox',\n      customRootFilePath: 'dropbox/'\n    },\n    resolve: {\n      'listing': ['$stateParams', 'DataBrowserService', function ($stateParams, DataBrowserService) {\n        var filePath = $stateParams.filePath || '/';\n        DataBrowserService.apiParams.fileMgr = 'dropbox';\n        DataBrowserService.apiParams.baseUrl = '/api/external-resources/files';\n        DataBrowserService.apiParams.searchState = undefined;\n        return DataBrowserService.browse({ path: filePath });\n      }],\n      'auth': function auth($q) {\n        if (Django.context.authenticated) {\n          return true;\n        } else {\n          return $q.reject({\n            type: 'authn',\n            context: Django.context\n          });\n        }\n      }\n    }\n  });\n}\n\nmod.config(config).run(['$rootScope', '$location', '$state', 'Django', '$trace', function ($rootScope, $location, $state, Django, $trace) {\n\n  // $rootScope.$on('$stateChangeStart', function(event, toState, toParams) {\n  //   if (toState.name === 'myData' || toState.name === 'sharedData') {\n  //     var ownerPath = new RegExp('^/?' + Django.user).test(toParams.filePath);\n  //     if (toState.name === 'myData' && !ownerPath) {\n  //       event.preventDefault();\n  //       $state.go('sharedData', toParams);\n  //     } else if (toState.name === 'sharedData' && ownerPath) {\n  //       event.preventDefault();\n  //       $state.go('myData', toParams);\n  //     }\n  //   }\n  // });\n\n  $rootScope.$on(\"$stateChangeError\", function (event, toState, toParams, fromState, fromParams, error) {\n    if (error.type === 'authn') {\n      var redirectUrl = $state.href(toState.name, toParams);\n      window.location = '/login/?next=' + redirectUrl;\n    }\n  });\n}]);\n\nexports.default = mod;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction DataBrowserService($rootScope, $http, $q, $timeout, $uibModal, $state, Django, FileListing) {\n  'ngInject';\n\n  /**\n   * @type {{busy: boolean, listing: FileListing, selected: Array}}\n   */\n\n  var _currentState = {\n    busy: false,\n    busyListing: false,\n    error: null,\n    listing: null,\n    selected: [],\n    loadingMore: false,\n    reachedEnd: false,\n    page: 0,\n    showMainListing: true,\n    showPreviewListing: false,\n    ui: {}\n  };\n\n  var apiParams = {\n    fileMgr: 'agave',\n    baseUrl: '/api/files'\n  };\n\n  var toolbarOpts = {};\n  var currentBrowseRequest = null;\n  /**\n   * Enumeration of event `DataBrowserService::Event` types\n   *\n   * @readonly\n   * @enum {string}\n   */\n  var FileEvents = {\n    FILE_ADDED: 'FileAdded',\n    FILE_COPIED: 'FileCopied',\n    FILE_MOVED: 'FileMoved',\n    FILE_REMOVED: 'FileRemoved',\n    FILE_SELECTION: 'FileSelection',\n    FILE_META_UPDATED: 'MetadataUpdated'\n  };\n\n  /**\n   * Enumeration of event `DataBrowserService::EventMessage` strings\n   *\n   * @readonly\n   * @enum {string}\n   */\n  var FileEventsMsg = {\n    FILE_ADDED: 'Your file was added.',\n    FILE_COPIED: 'Your file was copied.',\n    FILE_MOVED: 'Your file was moved.',\n    FILE_REMOVED: 'Your file was remove.',\n    FILE_SELECTION: 'Your file has been selected.',\n    FILE_META_UPDATED: 'Metadata object updated.'\n  };\n\n  // TODO figure out how to make this more programmatic. Just hacking for now.\n  function toolbarOptions() {\n    $http.get('/api/data-depot/toolbar/params').then(function (resp) {\n      var toolbarOpts = {\n        trash_enabled: resp.data.response.trash_enabled,\n        share_enabled: resp.data.response.share_enabled,\n        preview_enabled: resp.data.response.preview_enabled,\n        preview_images_enabled: resp.data.response.preview_images_enabled,\n        copy_enabled: resp.data.response.copy_enabled,\n        move_enabled: resp.data.response.move_enabled,\n        rename_enabled: resp.data.response.rename_enabled,\n        tag_enabled: resp.data.response.tag_enabled\n      };\n      return toolbarOpts;\n    }, function (error) {\n      console.log('$http.get Error', error);\n    });\n  }\n\n  /**\n   * Gets the apiParams of the DataBrowserService.\n   */\n  function apiParameters() {\n    return apiParams;\n  }\n\n  /**\n   * Gets the state of the DataBrowserService.\n   *\n   * @return {{busy: boolean, listing: FileListing, selected: Array}}\n   */\n  function state() {\n    return _currentState;\n  }\n\n  /**\n   *\n   * @param {FileListing[]} files FileListing objects to select\n   * @param {boolean} [reset] If true, clears current selection before selecting the passed files.\n   */\n  function select(files, reset) {\n    if (reset) {\n      deselect(_currentState.selected);\n    }\n    _.each(files, function (f) {\n      f._ui = f._ui || {};\n      f._ui.selected = true;\n    });\n    _currentState.selected = _.union(_currentState.selected, files);\n    notify(FileEvents.FILE_SELECTION, FileEventsMsg.FILE_SELECTION, _currentState.selected);\n  }\n\n  /**\n   *\n   * @param {FileListing[]} files FileListing objects to de-select\n   */\n  function deselect(files) {\n    _.each(files, function (f) {\n      f._ui = f._ui || {};\n      f._ui.selected = false;\n    });\n    _currentState.selected = _.difference(_currentState.selected, files);\n    notify(FileEvents.FILE_SELECTION, FileEventsMsg.FILE_SELECTION, _currentState.selected);\n  }\n\n  /**\n   * Tests for the DataBrowser actions allowed on the given file(s) from the current listing.\n   *\n   * @param {FileListing|FileListing[]} files Files to test\n   * @return {{canDownload: {boolean}, canPreview: {boolean}, canViewMetadata: {boolean}, canShare: {boolean}, canCopy: {boolean}, canMove: {boolean}, canRename: {boolean}, canTrash: {boolean}, canDelete: {boolean}}}\n   */\n  function allowedActions(files) {\n    if (!Array.isArray(files)) {\n      files = [files];\n    }\n    var tests = {};\n    tests.canDownload = files.length >= 1 && hasPermission('READ', files) && !containsFolder(files);\n    tests.canPreview = files.length === 1 && hasPermission('READ', files);\n    tests.canPreviewImages = files.length >= 1 && hasPermission('READ', files);\n    tests.canViewMetadata = files.length >= 1 && hasPermission('READ', files);\n    tests.canShare = files.length === 1 && $state.current.name === 'myData';\n    tests.canCopy = files.length >= 1 && hasPermission('READ', files);\n    tests.canMove = files.length >= 1 && hasPermission('WRITE', [_currentState.listing].concat(files)) && $state.current.name !== 'dropboxData' && $state.current.name !== 'boxData';\n    tests.canRename = files.length === 1 && hasPermission('WRITE', [_currentState.listing].concat(files));\n    tests.canViewCategories = files.length >= 1 && hasPermission('WRITE', files);\n\n    var trashPath = _trashPath();\n    tests.canTrash = ($state.current.name === 'db.myData' || $state.current.name === 'db.projects.view.data') && files.length >= 1 && _currentState.listing.path !== trashPath && !_.some(files, function (sel) {\n      return isProtected(sel);\n    });\n    tests.canDelete = $state.current.name === 'db.myData' && files.length >= 1 && _currentState.listing.path === trashPath;\n\n    return tests;\n  }\n\n  function showListing() {\n    _currentState.showMainListing = true;\n    _currentState.showPreviewListing = false;\n  }\n\n  function showPreview() {\n    _currentState.showMainListing = false;\n    _currentState.showPreviewListing = true;\n  }\n\n  /**\n  *\n  * @param options\n  * @param options.system\n  * @param options.path\n  */\n  function browse(options) {\n    // debugger\n    if (currentBrowseRequest) {\n      currentBrowseRequest.stopper.resolve();\n      currentBrowseRequest = null;\n      // $timeout.cancel(currentBrowseRequest);\n    }\n    _currentState.busy = true;\n    _currentState.busyListing = true;\n    _currentState.error = null;\n    _currentState.loadingMore = true;\n    _currentState.reachedEnd = false;\n    _currentState.busyListingPage = false;\n    _currentState.page = 0;\n    currentBrowseRequest = FileListing.get(options, apiParams);\n\n    currentBrowseRequest.then(function (listing) {\n      select([], true);\n      _currentState.busy = false;\n      _currentState.busyListing = false;\n      _currentState.loadingMore = false;\n      _currentState.reachedEnd = false;\n      _currentState.listing = listing;\n      return listing;\n    }, function (err) {\n      // This is for a cancelled promise...\n      if (err.status == -1) {\n        _currentState.busyListing = true;\n        _currentState.busy = true;\n      } else {\n        _currentState.busy = false;\n        _currentState.busyListing = false;\n      }\n      _currentState.listing = null;\n      _currentState.error = err;\n      _currentState.loadingMore = false;\n      _currentState.reachedEnd = false;\n      return err;\n    });\n    return currentBrowseRequest;\n  }\n\n  /**\n   *\n   * @param options\n   * @param options.system\n   * @param options.path\n   * @param options.page\n   */\n  function browsePage(options) {\n    _currentState.busy = true;\n    _currentState.busyListingPage = true;\n    _currentState.error = null;\n    var limit = 100;\n    var offset = 0;\n    if (options.page) {\n      offset += limit * options.page;\n    }\n    var params = { limit: limit, offset: offset };\n    return FileListing.get(options, apiParams, params).then(function (listing) {\n      select([], true);\n      _currentState.busy = false;\n      _currentState.busyListingPage = false;\n      _currentState.listing.children = _currentState.listing.children.concat(listing.children);\n      return listing;\n    }, function (err) {\n      _currentState.busy = false;\n      _currentState.busyListingPage = false;\n    });\n  }\n\n  /**\n   *\n   * @param {FileListing|FileListing[]} files\n   * @return {*}\n   */\n  function copy(_files) {\n    if (!Array.isArray(_files)) {\n      _files = [_files];\n    }\n\n    var modal = $uibModal.open({\n      templateUrl: '/static/portal/scripts/angular/data_depot/modals/data-browser-service-copy.html',\n      controller: 'ModalMoveCopy',\n      resolve: {\n        data: {\n          files: function files() {\n            return _files;\n          }\n        }\n      }\n    });\n\n    return modal.result.then(function (result) {\n      _currentState.busy = true;\n      var copyPromises = _.map(_files, function (f) {\n        var system = result.system || f.system;\n        return f.copy({ system: result.system, path: result.path, resource: result.resource }).then(function (result) {\n          //notify(FileEvents.FILE_COPIED, FileEventsMsg.FILE_COPIED, f);\n          return result;\n        });\n      });\n      return $q.all(copyPromises).then(function (results) {\n        _currentState.busy = false;\n        return results;\n      });\n    });\n  }\n\n  // /**\n  //  *\n  //  */\n  // function details () {\n  //   throw new Error('not implemented')\n  // }\n\n\n  /**\n   * Download files. Returns a promise that is resolved when all downloads have been\n   * _started_. Resolved with the download URL for each file.\n   *\n   * @param {FileListing|FileListing[]} files\n   * @return {Promise}\n   */\n  function download(files) {\n    if (!Array.isArray(files)) {\n      files = [files];\n    }\n    var download_promises = _.map(files, function (file) {\n      return file.download().then(function (resp) {\n        var link = document.createElement('a');\n        link.style.display = 'none';\n        link.setAttribute('href', resp.response.href);\n        link.setAttribute('download', \"null\");\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n\n        return resp;\n      });\n    });\n    return $q.all(download_promises);\n  }\n\n  /**\n   * TODO\n   *\n   * @returns {*}\n   */\n  function getFileManagers() {\n    return $http.get('/api/files/file-managers/').then(function (resp) {\n      return resp.data;\n    });\n  }\n\n  /**\n   *\n   * @param {FileListing|FileListing[]} files\n   */\n  function containsFolder(files) {\n    if (!Array.isArray(files)) {\n      files = [files];\n    }\n\n    var folders = _.filter(files, { type: 'dir' });\n    return folders.length > 0;\n  }\n  /**\n   *\n   * @param {string} permission\n   * @param {FileListing|FileListing[]} files\n   */\n  function hasPermission(permission, files) {\n    if (!Array.isArray(files)) {\n      files = [files];\n    }\n    return _.reduce(files, function (memo, file) {\n      var pem = file.permissions === 'ALL' || file.permissions.indexOf(permission) > -1;\n      if (memo !== null) {\n        pem = memo && pem;\n      }\n      return pem;\n    }, null);\n  }\n\n  /**\n   * This is not a great implementation, need to be more extensible...\n   * @param {FileListing} file\n   */\n  function isProtected(file) {\n    if (file.system === 'designsafe.storage.default') {\n      if (file.trail.length === 3 && file.name === '.Trash') {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Create a directory in the current listing directory.\n   *\n   * @returns {Promise}\n   */\n  function mkdir() {\n    var modal = $uibModal.open({\n      templateUrl: '/static/portal/scripts/angular/data_depot/modals/data-browser-service-mkdir.html',\n      controller: ['$scope', '$uibModalInstance', function ($scope, $uibModalInstance) {\n        $scope.form = {\n          folderName: 'Untitled_folder'\n        };\n\n        $scope.doCreateFolder = function ($event) {\n          $event.preventDefault();\n          $uibModalInstance.close($scope.form.folderName);\n        };\n\n        $scope.cancel = function () {\n          $uibModalInstance.dismiss('cancel');\n        };\n      }]\n    });\n\n    return modal.result.then(function (folderName) {\n      _currentState.busy = true;\n      _currentState.listing.mkdir({\n        name: folderName\n      }).then(function (newDir) {\n        _currentState.busy = false;\n        //notify(FileEvents.FILE_ADDED, FileEventsMsg.FILE_ADDED, newDir);\n      }, function (err) {\n        // TODO better error handling\n        _currentState.busy = false;\n      });\n    });\n  }\n\n  /**\n   *\n   * @param {FileListing|FileListing[]} files\n   * @param {FileListing} initialDestination\n   * @returns {Promise}\n   */\n  function move(_files2, initialDestination) {\n    if (!Array.isArray(_files2)) {\n      _files2 = [_files2];\n    }\n\n    var modal = $uibModal.open({\n      templateUrl: '/static/portal/scripts/angular/data_depot/modals/data-browser-service-move.html',\n      controller: 'ModalMoveCopy',\n      resolve: {\n        data: {\n          files: function files() {\n            console.log(_files2);\n            return _files2;\n          }\n          // initialDestination: function () { return initialDestination; }\n        }\n      }\n    });\n\n    return modal.result.then(function (result) {\n      _currentState.busy = true;\n      //if (result.system !== files[0].system){\n      //  return $q.when(files);\n      //}\n      var movePromises = _.map(_files2, function (f) {\n        return f.move({ system: result.system, path: result.path }).then(function (result) {\n          deselect([f]);\n          //notify(FileEvents.FILE_MOVED, FileEventsMsg.FILE_MOVED, f);\n          return result;\n        });\n      });\n      return $q.all(movePromises).then(function (results) {\n        _currentState.busy = false;\n        return results;\n      });\n    });\n  }\n\n  /**\n   *\n   * @param {FileListing} file\n   * @return {Promise}\n   */\n  function preview(_file, listing) {\n    var modal = $uibModal.open({\n      templateUrl: '/static/portal/scripts/angular/data_depot/modals/data-browser-service-preview.html',\n      controller: 'ModalPreview',\n      size: 'lg',\n      resolve: {\n        file: function file() {\n          return _file;\n        }\n      }\n    });\n\n    return modal.result;\n  }\n\n  /**\n   *\n   * @param {FileListing} folder\n   * @return {Promise}\n   */\n  function previewImages(_folder) {\n    var modal = $uibModal.open({\n      windowClass: 'modal-full',\n      templateUrl: '/static/portal/scripts/angular/data_depot/modals/data-browser-service-preview-images.html',\n      controller: ['$scope', '$uibModalInstance', '$sce', 'folder', function ($scope, $uibModalInstance, $sce, folder) {\n        $scope.folder = folder;\n        var img_extensions = ['jpg', 'jpeg', 'png', 'tiff', 'gif'];\n        $scope.busy = true;\n        $scope.images = [];\n        $scope.hrefs = [];\n        $scope.carouselSettings = {\n          dots: true,\n          arrows: true,\n          lazyLoad: true,\n          event: {\n            beforeChange: function beforeChange(ev, slick, currentSlide, nextSlide) {\n              $scope.images[nextSlide].href = $scope.hrefs[nextSlide].href;\n            }\n          }\n\n        };\n        $scope.folder.children.forEach(function (file) {\n          var ext = file.path.split('.').pop().toLowerCase();\n          if (img_extensions.indexOf(ext) !== -1) {\n            $scope.hrefs.push({ href: file.agaveUrl(), file: file });\n            $scope.images.push({ file: file });\n          }\n        });\n        $scope.images[0] = $scope.hrefs[0];\n\n        if ($scope.images.length > 10) {\n          $scope.carouselSettings.dots = false;\n        }\n\n        $scope.close = function () {\n          $uibModalInstance.dismiss();\n        };\n      }],\n      size: 'lg',\n      resolve: {\n        folder: function folder() {\n          return _folder;\n        }\n      }\n    });\n\n    return modal.result;\n  }\n\n  /**\n   *\n   * @param {FileListing} file\n   * @return {Promise}\n   */\n  function rename(file) {\n    var modal = $uibModal.open({\n      templateUrl: '/static/portal/scripts/angular/data_depot/modals/data-browser-service-rename.html',\n      controller: ['$scope', '$uibModalInstance', 'file', function ($scope, $uibModalInstance, file) {\n        $scope.form = {\n          targetName: file.name\n        };\n\n        $scope.file = file;\n\n        $scope.doRenameFile = function ($event) {\n          $event.preventDefault();\n          $uibModalInstance.close({ file: file, renameTo: $scope.form.targetName });\n        };\n\n        $scope.cancel = function () {\n          $uibModalInstance.dismiss('cancel');\n        };\n      }],\n      resolve: {\n        file: file\n      }\n    });\n\n    return modal.result.then(function (result) {\n      _currentState.busy = true;\n      return result.file.rename({ name: result.renameTo }).then(function (result) {\n        _currentState.busy = false;\n        $rootScope.$broadcast('DataBrowserService::Refresh', {\n          type: 'rename',\n          context: result,\n          msg: result\n        });\n      }, function (err) {\n        _currentState.busy = false;\n      });\n    });\n  }\n\n  /**\n   *\n   * @param {FileListing|FileListing[]} files\n   * @return {Promise}\n   */\n  function rm(_files3) {\n    if (!Array.isArray(_files3)) {\n      _files3 = [_files3];\n    }\n\n    var modal = $uibModal.open({\n      templateUrl: '/static/portal/apps/data_depot/modals/data-browser-service-rm.html',\n      controller: ['$scope', '$uibModalInstance', 'files', function ($scope, $uibModalInstance, files) {\n        $scope.files = files;\n\n        $scope.confirm = function () {\n          $uibModalInstance.close(files);\n        };\n\n        $scope.cancel = function () {\n          $uibModalInstance.dismiss();\n        };\n      }],\n      resolve: {\n        files: function files() {\n          return _files3;\n        }\n      }\n    });\n\n    return modal.result.then(function (files) {\n      _currentState.busy = true;\n      var deletePromises = _.map(files, function (file) {\n        return file.rm().then(function (result) {\n          deselect([file]);\n          //notify(FileEvents.FILE_REMOVED, FileEventsMsg.FILE_REMOVED, file);\n          return result;\n        });\n      });\n      return $q.all(deletePromises).then(function (result) {\n        _currentState.busy = false;\n        return result;\n      }, function (err) {\n        _currentState.busy = false;\n      });\n    });\n  }\n\n  /**\n   * TODO\n   *\n   * @param options\n   */\n  function search(options) {\n    _currentState.busy = true;\n    _currentState.busyListing = true;\n    _currentState.error = null;\n    return FileListing.search(options, apiParams).then(function (listing) {\n      select([], true);\n      _currentState.busy = false;\n      _currentState.busyListing = false;\n      _currentState.listing = listing;\n      return listing;\n    }, function (err) {\n      _currentState.busy = false;\n      _currentState.busyListing = false;\n      _currentState.listing = null;\n      _currentState.error = err.data;\n    });\n  }\n\n  /**\n   * Update sharing permissions on a file.\n   *\n   * @param {FileListing} file\n   * @return {*}\n   */\n  function share(_file2) {\n    var modal = $uibModal.open({\n      templateUrl: '/static/portal/apps/data_depot/modals/data-browser-service-share.html',\n      controller: ['$scope', '$uibModalInstance', 'Django', 'file', function ($scope, $uibModalInstance, Django, file) {\n        $scope.data = {\n          busy: true,\n          file: file,\n          currentUser: Django.user,\n          permissionOptions: [{ permission: 'READ', label: 'Read Only' }, { permission: 'READ_WRITE', label: 'Read/Write' }, { permission: 'ALL', label: 'All' }, { permission: 'NONE', label: 'None (Revoke Permission)' }]\n        };\n\n        $scope.form = {\n          currentPermissions: [],\n          addPermissions: [{\n            username: null,\n            permission: $scope.data.permissionOptions[0]\n          }]\n        };\n\n        file.listPermissions().then(function (result) {\n          $scope.form.currentPermissions = _.chain(result).reject(function (pem) {\n            return pem.username === 'ds_admin' || pem.username === Django.user;\n          }).map(function (pem) {\n            if (pem.permission.read) {\n              if (pem.permission.write) {\n                if (pem.permission.execute) {\n                  pem.permission = $scope.data.permissionOptions[2];\n                } else {\n                  pem.permission = $scope.data.permissionOptions[1];\n                }\n              } else {\n                pem.permission = $scope.data.permissionOptions[0];\n              }\n            } else {\n              pem.permission = $scope.data.permissionOptions[3];\n            }\n            return pem;\n          }).value();\n          $scope.form.initialPermissions = angular.copy($scope.form.currentPermissions);\n          $scope.data.busy = false;\n        }, function (errResp) {\n          $scope.data.busy = false;\n          $scope.data.errorMessage = errResp.data;\n        });\n\n        $scope.formatSelection = function () {\n          if (this.pem.username) {\n            return this.pem.username.first_name + ' ' + this.pem.username.last_name + ' (' + this.pem.username.username + ')';\n          }\n        };\n\n        $scope.addNewPermission = function () {\n          $scope.form.addPermissions.push({ username: null, permission: $scope.data.permissionOptions[0] });\n        };\n\n        $scope.doShareFiles = function ($event) {\n          $event.preventDefault();\n\n          var pemsToSave = [];\n\n          // Only save existing permissions if the permission changed\n          _.each($scope.form.currentPermissions, function (pem) {\n            var prev = _.findWhere($scope.form.initialPermissions, { username: pem.username });\n            if (prev.permission.permission !== pem.permission.permission) {\n              pemsToSave.push({ username: pem.username, permission: pem.permission.permission });\n            }\n          });\n\n          // Format new permissions\n          var addPems = _.filter($scope.form.addPermissions, function (pem) {\n            return pem.username;\n          });\n          Array.prototype.push.apply(pemsToSave, _.map(addPems, function (pem) {\n            return {\n              username: pem.username.username,\n              permission: pem.permission.permission\n            };\n          }));\n\n          // Resolve modal with pems that need to be saved\n          $uibModalInstance.close(pemsToSave);\n        };\n\n        $scope.cancel = function () {\n          $uibModalInstance.dismiss('cancel');\n        };\n      }],\n      size: 'lg',\n      resolve: {\n        file: function file() {\n          return _file2;\n        }\n      }\n    });\n\n    return modal.result.then(function (pemsToSave) {\n      _currentState.busy = true;\n      var sharePromises = _.map(pemsToSave, function (pem) {\n        return _file2.share(pem);\n      });\n      return $q.all(sharePromises).then(function (results) {\n        _currentState.busy = false;\n        return results;\n      });\n    });\n  }\n\n  /**\n   *\n   * @param {FileListing|FileListing[]} files The files to move to Trash\n   * @return {Promise} A promise that is resolved with the trashed files when _all_ files have been\n   * successfully Trashed.\n   */\n  function trash(files) {\n    if (!Array.isArray(files)) {\n      files = [files];\n    }\n\n    _currentState.busy = true;\n    var trashPromises = _.map(files, function (file) {\n      return file.trash().then(function (trashed) {\n        //notify(FileEvents.FILE_MOVED, FileEventsMsg.FILE_MOVED, trashed);\n        return trashed;\n      });\n    });\n    return $q.all(trashPromises).then(function (val) {\n      _currentState.busy = false;\n      browse(_currentState.listing, apiParams);\n      return val;\n    }, function (err) {\n      _currentState.busy = false;\n    });\n  }\n\n  function _trashPath() {\n    if (_currentState.listing && _currentState.listing.system) {\n      switch (_currentState.listing.system) {\n        case 'designsafe.storage.default':\n          return ['', Django.user, '.Trash'].join('/');\n        case 'designsafe.storage.projects':\n          var projectDir = _currentState.listing.path.split('/')[1];\n          return ['', projectDir, '.Trash'].join('/');\n        default:\n          return undefined;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Upload files or folders to the currently listed destination\n   *\n   * @param {boolean} directoryUpload\n   * @param {FileList} [files] Initial selected file(s) to upload\n   */\n  function upload(_directoryUpload, _files4) {\n    var modal = $uibModal.open({\n      templateUrl: '/static/portal/apps/data_depot/modals/data-browser-service-upload.html',\n      controller: 'ModalUpload',\n      size: 'lg',\n      resolve: {\n        directoryUpload: function directoryUpload() {\n          return _directoryUpload;\n        },\n        destination: function destination() {\n          return _currentState.listing;\n        },\n        files: function files() {\n          return _files4;\n        },\n        currentState: function currentState() {\n          return _currentState;\n        }\n      }\n    });\n  }\n\n  /**\n   * Open Preview Tree\n   */\n  function openPreviewTree(entityUuid) {\n    var template = '/static/portal/apps/data_depot/modals/data-browser-preview-tree.html';\n    var modal = $uibModal.open({\n      templateUrl: template,\n      controller: ['$uibModalInstance', '$scope', function ($uibModalInstance, $scope) {\n        $scope.data = {};\n        $scope.data.entityUuid = entityUuid;\n        $scope.data.project = _currentState.project;\n\n        $scope.cancel = function () {\n          $uibModalInstance.dismiss('cancel');\n        };\n      }]\n    });\n  }\n\n  /**\n   * TODO\n   *\n   * @param {FileListing} file The file to view metadata for\n   * @return {HttpPromise}\n   */\n  function viewCategories(files, listing) {\n    var template = '/static/portal/apps/data_depot/modals/data-browser-service-categories.html';\n    var _file3 = null;\n    if (typeof files !== 'undefined') {\n      _file3 = files[0];\n    }\n    var modal = $uibModal.open({\n      templateUrl: template,\n      controller: 'ModalViewCategories',\n      size: 'lg',\n      resolve: {\n        'file': function file() {\n          return _file3;\n        },\n        'form': function form() {\n          return { metadataTags: '' };\n        }\n      }\n    });\n\n    return modal.result.then(function (data) {\n      var file = data.file;\n      var form = data.form;\n      var metaObj = {\n        keywords: file.keywords || []\n      };\n      if (form.metadataTags) {\n        metaObj.keywords = metaObj.keywords.concat(form.metadataTags.split(','));\n      }\n      if (form.tagsToDelete.length) {\n        metaObj.keywords = metaObj.keywords.filter(function (value) {\n          return form.tagsToDelete.indexOf(value) < 0;\n        });\n      }\n      _currentState.busy = true;\n      file.updateMeta({ 'metadata': metaObj }).then(function (file_resp) {\n        //notify(FileEvents.FILE_META_UPDATED, FileEventsMsg.FILE_META_UPDATED, file_resp);\n        _currentState.busy = false;\n      });\n    });\n  }\n\n  /**\n   * TODO\n   *\n   * @param {FileListing} file The file to view metadata for\n   * @return {HttpPromise}\n   */\n  function viewMetadata(files, listing) {\n    var template = '/static/portal/apps/data_depot/modals/data-browser-service-custom-tags.html';\n    var _file4 = null;\n    if (typeof files !== 'undefined') {\n      _file4 = files[0];\n    }\n    if (typeof _file4 !== 'undefined' && typeof _file4.metadata !== 'undefined' && _file4.metadata.project !== 'undefined') {\n      template = '/static/portal/apps/data_depot/modals/data-browser-service-published-metadata.html';\n    }\n    var modal = $uibModal.open({\n      templateUrl: template,\n      controller: 'ModalViewMetadata',\n      size: 'lg',\n      resolve: {\n        'file': function file() {\n          return _file4;\n        },\n        'form': function form() {\n          return { metadataTags: '' };\n        }\n      }\n    });\n\n    return modal.result.then(function (data) {\n      var file = data.file;\n      var form = data.form;\n      var metaObj = {\n        keywords: file.keywords || []\n      };\n      if (form.metadataTags) {\n        metaObj.keywords = metaObj.keywords.concat(form.metadataTags.split(','));\n      }\n      if (form.tagsToDelete.length) {\n        metaObj.keywords = metaObj.keywords.filter(function (value) {\n          return form.tagsToDelete.indexOf(value) < 0;\n        });\n      }\n      _currentState.busy = true;\n      file.updateMeta({ 'metadata': metaObj }).then(function (file_resp) {\n        //notify(FileEvents.FILE_META_UPDATED, FileEventsMsg.FILE_META_UPDATED, file_resp);\n        _currentState.busy = false;\n      });\n    });\n  }\n\n  /**\n   * @callback subscribeCallback\n   * @param {object} $event\n   * @param {object} eventData\n   * @param {FileEvents} eventData.type\n   * @param {object} eventData.context\n   */\n  /**\n   *\n   * @param {object} scope\n   * @param {subscribeCallback} callback\n   */\n  function subscribe(scope, callback) {\n    var handler = $rootScope.$on('DataBrowserService::Event', callback);\n    scope.$on('$destroy', handler);\n  }\n\n  /**\n   *\n   * @param {FileEvents} eventType The event\n   * @param {object} eventContext The object/context of the event. The value of this parameter depends on the `eventType`\n   */\n  function notify(eventType, eventMsg, eventContext) {\n    $rootScope.$emit('DataBrowserService::Event', {\n      type: eventType,\n      context: eventContext,\n      msg: eventMsg\n    });\n  }\n\n  function scrollToTop() {\n    return;\n  }\n\n  function scrollToBottom() {\n    if (_currentState.loadingMore || _currentState.reachedEnd) {\n      return;\n    }\n    _currentState.loadingMore = true;\n    if (_currentState.listing && _currentState.listing.children && _currentState.listing.children.length < 95) {\n      _currentState.reachedEnd = true;\n      return;\n    }\n    _currentState.page += 1;\n    _currentState.loadingMore = true;\n    browsePage({ system: _currentState.listing.system,\n      path: _currentState.listing.path,\n      page: _currentState.page }).then(function (listing) {\n      _currentState.loadingMore = false;\n      if (listing.children.length < 95) {\n        _currentState.reachedEnd = true;\n      }\n    }, function (err) {\n      _currentState.loadingMore = false;\n      _currentState.reachedEnd = true;\n    });\n  }\n\n  return {\n    /* properties */\n    FileEvents: FileEvents,\n    state: state,\n    apiParameters: apiParameters,\n    toolbarOptions: toolbarOptions,\n\n    /* data/files functions */\n    allowedActions: allowedActions,\n    browse: browse,\n    browsePage: browsePage,\n    scrollToTop: scrollToTop,\n    scrollToBottom: scrollToBottom,\n    copy: copy,\n    deselect: deselect,\n    // details: details,\n    download: download,\n    getFileManagers: getFileManagers,\n    hasPermission: hasPermission,\n    isProtected: isProtected,\n    mkdir: mkdir,\n    move: move,\n    preview: preview,\n    previewImages: previewImages,\n    rename: rename,\n    rm: rm,\n    search: search,\n    select: select,\n    share: share,\n    trash: trash,\n    upload: upload,\n    viewMetadata: viewMetadata,\n    viewCategories: viewCategories,\n\n    /* events */\n    subscribe: subscribe,\n    notify: notify,\n    apiParams: apiParams,\n    toolbarOpts: toolbarOpts,\n    showListing: showListing,\n    showPreview: showPreview,\n    openPreviewTree: openPreviewTree\n  };\n};\n\nexports.default = DataBrowserService;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n\nfunction FileListing($http, $q) {\n  'ngInject';\n  //var logger = Logging.getLogger('ngDesignSafe.FileListing');\n\n  function FileListing(json, apiParams) {\n    angular.extend(this, json);\n\n    // wrap children as FileListing instances\n    if (this.children && this.children instanceof Array) {\n      this.children = _.map(this.children, function (child) {\n        var fl = new FileListing(child);\n        fl._parent = this;\n        return fl;\n      }, this);\n    }\n    if (typeof apiParams !== 'undefined' && apiParams !== null && !_.isEmpty(apiParams)) {\n      this.apiParams = apiParams;\n    }\n    if (typeof this._entities === 'undefined') {\n      this._entities = [];\n    }\n    if (typeof this._entityTags === 'undefined') {\n      this._entityTags = [];\n    }\n  }\n\n  FileListing.prototype.setEntities = function (projectId, entities) {\n    var self = this;\n    var path = self.path;\n    self._entities = [];\n    _.each(entities, function (entity) {\n      if (typeof entity !== 'undefined' && typeof entity._links !== 'undefined' && typeof entity._links.associationIds !== 'undefined') {\n        _.each(entity._links.associationIds, function (asc) {\n          if (asc.title === 'file') {\n            var comps = asc.href.split('project-' + projectId, 2);\n            if (comps.length === 2 && path.replace(/^\\/+/, '') === comps[1].replace(/^\\/+/, '')) {\n              self._entities.push(entity);\n            }\n          }\n        });\n      }\n    });\n    if (self._entities.length) {\n      self._entities = _.uniq(self._entities, function (e) {\n        return e.uuid;\n      });\n      var myAsoc = _.find(self._entities[0]._links.associationIds, function (asc) {\n        if (asc.title === 'file') {\n          var comps = asc.href.split('project-' + projectId, 2);\n          return self.path.replace(/^\\/+/, '') === comps[1].replace(/^\\/+/, '');\n        }\n      });\n      if (myAsoc) {\n        var myUuid = myAsoc.rel;\n        _.each(self._entities, function (entity) {\n          if (_.contains(entity.value.modelDrawing || [], myUuid)) {\n            self._entityTags.push('Model Drawing');\n          } else if (_.contains(entity.value.load || [], myUuid)) {\n            self._entityTags.push('Load');\n          } else if (_.contains(entity.value.sensorDrawing || [], myUuid)) {\n            self._entityTags.push('Sensor Drawing');\n          } else if (_.contains(entity.value.script || [], myUuid)) {\n            self._entityTags.push('Script');\n          }\n        });\n      }\n      self._entityTags = _.uniq(self._entityTags);\n    }\n  };\n\n  FileListing.prototype.uuid = function () {\n    try {\n      var parser = document.createElement('a');\n      parser.href = decodeURIComponent(this._links.metadata.href);\n      var q = parser.search.substring(3);\n      var uuid = JSON.parse(decodeURIComponent(q)).associationIds;\n      return uuid;\n    } catch (e) {\n      return '';\n    }\n  };\n\n  FileListing.prototype.parentPath = function () {\n    var pathComps = this.path.split('/');\n    return pathComps.slice(0, pathComps.length - 1).join('/');\n  };\n\n  FileListing.prototype.fileMgr = function () {\n    if (typeof this.apiParams !== 'undefined' && this.apiParams !== null && !_.isEmpty(this.apiParams)) {\n      return this.apiParams.fileMgr;\n    } else {\n      return 'my-data';\n    }\n  };\n\n  FileListing.prototype._baseUrl = function () {\n    if (typeof this.apiParams !== 'undefined' && this.apiParams !== null && !_.isEmpty(this.apiParams)) {\n      return this.apiParams.baseUrl;\n    } else {\n      return '/api/data-depot/files';\n    }\n  };\n\n  FileListing.prototype.listingUrl = function () {\n    var urlParts = [this._baseUrl(), 'listing', this.fileMgr()];\n    if (this.system) {\n      urlParts.push(this.system);\n    }\n    if (this.id && this.id.indexOf('/') > -1) {\n      urlParts.push(this.id);\n    } else if (this.path) {\n      urlParts.push(this.path);\n    }\n    return urlParts.join('/');\n  };\n\n  FileListing.prototype.mediaUrl = function () {\n    var urlParts = [this._baseUrl(), 'media', this.fileMgr()];\n    if (this.system) {\n      urlParts.push(this.system);\n    }\n    if (this.id && this.id.indexOf('/') > -1) {\n      urlParts.push(this.id);\n    } else if (this.path) {\n      urlParts.push(this.path);\n    }\n    return urlParts.join('/');\n  };\n\n  FileListing.prototype.pemsUrl = function () {\n    var urlParts = [this._baseUrl(), 'pems', this.fileMgr()];\n    if (this.system) {\n      urlParts.push(this.system);\n    }\n    if (this.id && this.id.indexOf('/') > -1) {\n      urlParts.push(this.id);\n    } else if (this.path) {\n      urlParts.push(this.path);\n    }\n    return urlParts.join('/');\n  };\n\n  FileListing.prototype.metaUrl = function () {\n    var urlParts = [this._baseUrl(), 'meta', this.fileMgr()];\n    if (this.system) {\n      urlParts.push(this.system);\n    }\n    if (this.id && this.id.indexOf('/') > -1) {\n      urlParts.push(this.id);\n    } else if (this.path) {\n      urlParts.push(this.path);\n    }\n    return urlParts.join('/');\n  };\n\n  FileListing.prototype.searchUrl = function () {\n    var urlParts = [this._baseUrl(), 'search', this.fileMgr()];\n    if (this.system) {\n      urlParts.push(this.system);\n    }\n    return urlParts.join('/');\n  };\n\n  FileListing.prototype.agaveUri = function () {\n    return 'agave://' + this.system + '/' + this.path;\n  };\n\n  FileListing.prototype.agaveUrl = function () {\n    return 'https://agave.designsafe-ci.org/files/v2/media/system/' + this.system + '/' + this.path;\n  };\n\n  /**\n   * Make a copy of this FileResource.\n   *\n   * @param {object} options\n   * @param {string} [options.path] The path to copy to\n   * @param {string} [options.name] The new name for the copy\n   * @returns {*}\n   */\n  FileListing.prototype.copy = function (options) {\n    var body = {\n      \"action\": \"copy\",\n      \"system\": options.system,\n      \"path\": options.path,\n      \"name\": options.name,\n      \"resource\": options.resource || \"\"\n    };\n    return $http.put(this.mediaUrl(), body).then(function (resp) {\n      return new FileListing(resp.data);\n    });\n  };\n\n  FileListing.prototype.download = function () {\n    var body = {\n      \"action\": \"download\"\n    };\n    return $http.put(this.mediaUrl(), body).then(function (resp) {\n      return resp.data;\n    }, function (err) {\n      return $q.reject(err.data);\n    });\n  };\n\n  FileListing.prototype.search = function (params) {\n    var self = this;\n    return $http.get(this.searchUrl(), { params: params }).then(function (res) {\n      angular.extend(self, res.data);\n      if (self.children && self.children instanceof Array) {\n        self.children = _.map(self.children, function (child) {\n          var fl = new FileListing(child, self.apiParams);\n          fl._parent = self;\n          return fl;\n        }, self);\n      }\n      return self;\n    }, function (err) {\n      return $q.reject(err.data);\n    });\n  };\n\n  FileListing.prototype.fetch = function (params) {\n    var self = this;\n\n    var stopper = $q.defer();\n    var req = $http.get(this.listingUrl(), { params: params, timeout: stopper.promise }).then(function (resp) {\n      angular.extend(self, resp.data.response);\n\n      // wrap children as FileListing instances\n      if (self.children && self.children instanceof Array) {\n        self.children = _.map(self.children, function (child) {\n          var fl = new FileListing(child, self.apiParams);\n          fl._parent = self;\n          return fl;\n        }, self);\n      }\n\n      return self;\n    }, function (err) {\n      return $q.reject(err);\n    });\n    req.stopper = stopper;\n    return req;\n  };\n\n  FileListing.prototype.getMeta = function () {\n    var self = this;\n    return $http.get(this.metaUrl()).then(function (resp) {\n      angular.extend(self, resp.data);\n      return self;\n    }, function (err) {\n      return $q.reject(err.data);\n    });\n  };\n\n  FileListing.prototype.updateMeta = function (metaObj) {\n    var self = this;\n    return $http.put(this.metaUrl(), metaObj).then(function (resp) {\n      angular.extend(self, resp.data);\n      return self;\n    }, function (err) {\n      return $q.reject(err.data);\n    });\n  };\n\n  FileListing.prototype.icon = function () {\n    if (this.type === 'dir' || this.type === 'folder') {\n      return 'fa-folder';\n    }\n\n    var icon;\n    var ext = this.name.split('.').pop().toLowerCase();\n    switch (ext) {\n      case 'zip':\n      case 'tar':\n      case 'gz':\n      case 'bz2':\n        icon = 'fa-file-archive-o';\n        break;\n      case 'png':\n      case 'jpg':\n      case 'jpeg':\n      case 'gif':\n      case 'tif':\n      case 'tiff':\n        icon = 'fa-file-image-o';\n        break;\n      case 'pdf':\n        icon = 'fa-file-pdf-o';\n        break;\n      case 'doc':\n      case 'docx':\n        icon = 'fa-file-word-o';\n        break;\n      case 'xls':\n      case 'xlsx':\n        icon = 'fa-file-excel-o';\n        break;\n      case 'ppt':\n      case 'pptx':\n        icon = 'fa-file-powerpoint-o';\n        break;\n      case 'mov':\n      case 'mp4':\n        icon = 'fa-file-video-o';\n        break;\n      case 'mp3':\n      case 'wav':\n        icon = 'fa-file-audio-o';\n        break;\n      case 'txt':\n      case 'out':\n      case 'err':\n        icon = 'fa-file-text-o';\n        break;\n      case 'tcl':\n      case 'sh':\n      case 'json':\n        icon = 'fa-file-code-o';\n        break;\n      default:\n        icon = 'fa-file-o';\n    }\n    return icon;\n  };\n\n  /**\n   * Make a new child directory.\n   *\n   * @param {object} options\n   * @param {string} options.name The name for the new directory\n   */\n  FileListing.prototype.mkdir = function (options) {\n    if (this.type !== 'dir') {\n      throw new Error('FileListing.mkdir can only be called for \"dir\" type FileListings.');\n    }\n\n    var self = this;\n    var body = {\n      \"action\": \"mkdir\",\n      \"name\": options.name\n    };\n    return $http.put(this.mediaUrl(), body).then(function (resp) {\n      var newDir = new FileListing(resp.data);\n      self.children.push(newDir);\n      return newDir;\n    }, function (err) {\n      return $q.reject(err.data);\n    });\n  };\n\n  /**\n   * Move a file to a new location.\n   *\n   * @param {object} options\n   * @param {string} options.path The path of the destination directory for the operation\n   * @param {string} [options.name] An optional new name for the moved file\n   * @returns {*}\n   */\n  FileListing.prototype.move = function (options) {\n    var self = this;\n    var body = {\n      \"action\": \"move\",\n      \"system\": options.system,\n      \"path\": options.path,\n      \"name\": options.name\n    };\n    return $http.put(this.mediaUrl(), body).then(function (resp) {\n      var newDir = new FileListing(resp.data);\n      /* remove this file from previous parent's children */\n      if (self._parent) {\n        self._parent.children = _.reject(self._parent.children, function (child) {\n          return child.path === self.path;\n        });\n        self._parent = undefined;\n      }\n      return newDir;\n    }, function (err) {\n      return $q.reject(err.data);\n    });\n  };\n\n  /**\n   * Get the permissions for this FileListing.\n   *\n   * @return {Promise}\n   */\n  FileListing.prototype.listPermissions = function () {\n    if (this._permissions) {\n      return $q.resolve(this._permissions);\n    } else {\n      var self = this;\n      return $http.get(this.pemsUrl()).then(function (resp) {\n        self._permissions = resp.data;\n        return self._permissions;\n      }, function (err) {\n        return $q.reject(err.data);\n      });\n    }\n  };\n\n  /**\n   * Request a preview of the file. Returns a promise that will be resolved\n   * with an object with a single attribute `href` where the preview can be\n   * fetched. If a preview is unavailable the promise will be rejected.\n   *\n   * @return {Promise}\n   */\n  FileListing.prototype.preview = function () {\n    var body = {\n      \"action\": \"preview\"\n    };\n    return $http.put(this.mediaUrl(), body).then(function (resp) {\n      return resp.data.response;\n    }, function (err) {\n      return $q.reject(err.data);\n    });\n  };\n\n  /**\n   * Rename a file. Implicitly, this is a move operation with the same path and a new\n   * name.\n   *\n   * @param {object} options\n   * @param {string} options.name The new name for this file.\n   * @returns {Promise}\n   */\n  FileListing.prototype.rename = function (options) {\n    var self = this;\n    var body = {\n      \"action\": \"rename\",\n      \"name\": options.name\n    };\n    return $http.put(this.mediaUrl(), body).then(function (resp) {\n      /* update self */\n      angular.extend(self, resp.data);\n    }, function (err) {\n      return $q.reject(err.data);\n    });\n  };\n\n  /**\n   * Removes the current file\n   *\n   * @return {Promise}\n   */\n  FileListing.prototype.rm = function () {\n    var self = this;\n    return $http.delete(this.mediaUrl()).then(function (resp) {\n      /* remove from self._parent.children */\n      if (self._parent) {\n        self._parent.children = _.reject(self._parent.children, function (child) {\n          return child.path === self.path;\n        });\n      }\n    }, function (err) {\n      return $q.reject(err.data);\n    });\n  };\n\n  /**\n   * Update sharing permissions on a file according to the given options.\n   *\n   * @param {object} options\n   * @param {string} options.username The username of the user whose permissions to update\n   * @param {string} options.permission The new permission value\n   */\n  FileListing.prototype.share = function (options) {\n    return $http.post(this.pemsUrl(), options).then(function (resp) {\n      return resp.data;\n    }, function (err) {\n      return $q.reject(err.data);\n    });\n  };\n\n  /**\n   * This is much like move, except with the implicit destination path of ~/.Trash.\n   * This also will rename the file if a file with the same name already exists in\n   * ~/.Trash.\n   *\n   * @returns {Promise}\n   */\n  FileListing.prototype.trash = function () {\n    var self = this;\n    var body = {\n      \"action\": \"trash\"\n    };\n    return $http.put(this.mediaUrl(), body).then(function (resp) {\n      var trashed = new FileListing(resp.data);\n\n      /* remove this file from previous parent's children */\n      if (self._parent) {\n        self._parent.children = _.reject(self._parent.children, function (child) {\n          return child.path === self.path;\n        });\n        self._parent = undefined;\n      }\n      if (trashed.name !== self.name) {\n        // TODO notify user via Toastr\n        window.alert('File was renamed to \"' + trashed.name + '\".');\n      }\n      return trashed;\n    });\n  };\n\n  /**\n   * Upload as a new file\n   * @param {FormData} data The Multipart FormData\n   */\n  FileListing.prototype.upload = function (data) {\n    return $http.post(this.mediaUrl(), data, { headers: { 'Content-Type': undefined } }).then(function (result) {\n      return result.data;\n    }, function (err) {\n      return $q.reject(err.data);\n    });\n  };\n\n  // function FilePermission(json) {\n  //   angular.extend(this, json);\n  // }\n  //\n  //\n  // FilePermission.prototype.permissionBit = function () {\n  //   if (this.permission.read) {\n  //     if (this.permission.write) {\n  //       if (this.permission.execute) {\n  //         return 'ALL';\n  //       }\n  //       return 'READ_WRITE';\n  //     }\n  //     return 'READ';\n  //   } else if (this.permission.write) {\n  //     if (this.permission.execute) {\n  //       return 'WRITE_EXECUTE';\n  //     }\n  //     return 'WRITE';\n  //   } else if (this.permission.execute) {\n  //     return 'EXECUTE';\n  //   }\n  //   return 'NONE';\n  // };\n\n  /**\n   *\n   * @param {object} options\n   * @param {string} options.system\n   * @param {string} options.path\n   * @returns {Promise}\n   */\n  function get(options, apiParams, params) {\n    var req;\n    var fl = new FileListing(options, apiParams);\n    if (params) {\n      req = fl.fetch(params);\n    } else {\n      req = fl.fetch();\n    }\n    return req;\n  }\n\n  function init(obj, apiParams) {\n    return new FileListing(obj, apiParams);\n  }\n\n  /**\n   * @param {object} options\n   * @param {string} options.system\n   * @param {string} options.q\n   * @param {int} options.offset\n   * @param {int} options.limit\n   */\n  function search(options, apiParams) {\n    var fl = new FileListing(options, apiParams);\n    return fl.search(options);\n  }\n\n  /**\n   * Public API\n   */\n  return {\n    get: get,\n    search: search,\n    init: init\n  };\n}\n\nexports.default = FileListing;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _systemsService = __webpack_require__(23);\n\nvar _systemsService2 = _interopRequireDefault(_systemsService);\n\nvar _fileListing = __webpack_require__(20);\n\nvar _fileListing2 = _interopRequireDefault(_fileListing);\n\nvar _dataBrowserService = __webpack_require__(19);\n\nvar _dataBrowserService2 = _interopRequireDefault(_dataBrowserService);\n\nvar _projectService = __webpack_require__(22);\n\nvar _projectService2 = _interopRequireDefault(_projectService);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar mod = angular.module('portal.data_depot.services', []);\n\nmod.service('SystemsService', _systemsService2.default);\nmod.factory('FileListing', _fileListing2.default);\nmod.factory('DataBrowserService', _dataBrowserService2.default);\nmod.factory('ProjectService', _projectService2.default);\nconsole.log(mod);\nexports.default = mod;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvZGF0YV9kZXBvdC9zZXJ2aWNlcy9pbmRleC5qcz9iNDEzIl0sIm5hbWVzIjpbIm1vZCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJzZXJ2aWNlIiwiZmFjdG9yeSIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFJQSxNQUFNQyxRQUFRQyxNQUFSLENBQWUsNEJBQWYsRUFBNkMsRUFBN0MsQ0FBVjs7QUFFQUYsSUFBSUcsT0FBSixDQUFZLGdCQUFaO0FBQ0FILElBQUlJLE9BQUosQ0FBWSxhQUFaO0FBQ0FKLElBQUlJLE9BQUosQ0FBWSxvQkFBWjtBQUNBSixJQUFJSSxPQUFKLENBQVksZ0JBQVo7QUFDQUMsUUFBUUMsR0FBUixDQUFZTixHQUFaO2tCQUNlQSxHIiwiZmlsZSI6IjIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN5c3RlbXNTZXJ2aWNlIGZyb20gJy4vc3lzdGVtcy1zZXJ2aWNlJztcbmltcG9ydCBGaWxlTGlzdGluZyBmcm9tICcuL2ZpbGUtbGlzdGluZyc7XG5pbXBvcnQgRGF0YUJyb3dzZXJTZXJ2aWNlIGZyb20gJy4vZGF0YS1icm93c2VyLXNlcnZpY2UnO1xuaW1wb3J0IFByb2plY3RTZXJ2aWNlIGZyb20gJy4vcHJvamVjdC1zZXJ2aWNlJztcblxubGV0IG1vZCA9IGFuZ3VsYXIubW9kdWxlKCdwb3J0YWwuZGF0YV9kZXBvdC5zZXJ2aWNlcycsIFtdKTtcblxubW9kLnNlcnZpY2UoJ1N5c3RlbXNTZXJ2aWNlJywgU3lzdGVtc1NlcnZpY2UpO1xubW9kLmZhY3RvcnkoJ0ZpbGVMaXN0aW5nJywgRmlsZUxpc3RpbmcpO1xubW9kLmZhY3RvcnkoJ0RhdGFCcm93c2VyU2VydmljZScsIERhdGFCcm93c2VyU2VydmljZSk7XG5tb2QuZmFjdG9yeSgnUHJvamVjdFNlcnZpY2UnLCBQcm9qZWN0U2VydmljZSk7XG5jb25zb2xlLmxvZyhtb2QpXG5leHBvcnQgZGVmYXVsdCBtb2Q7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvZGF0YV9kZXBvdC9zZXJ2aWNlcy9pbmRleC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction ProjectService(httpi, $interpolate, $q, $uibModal) {\n  'ngInject';\n\n  var efs = {\n    'experimental': [{ name: 'atlss', label: 'Advanced Technology for Large Structural Systems (ATLSS) Engineering Research Center, Lehigh University' }, { name: 'cgm-ucdavis', label: 'Center for Geotechnical Modeling, UC Davis' }, { name: 'eqss-utaustin', label: 'Field mobile shakers, UT Austin' }, { name: 'pfsml-florida', label: 'Powell Family Structures and Materials Laboratory, University of Florida' }, { name: 'wwhr-florida', label: 'Wall of Wind International Hurricane Research Center, Florida International University' }, { name: 'lhpost-sandiego', label: 'Large High Performance Outdoor Shake Table, University of California San Diego' }, { name: 'ohhwrl-oregon', label: 'O.H. Hinsdale Wave Research Laboratory, Oregon State University' }, { name: 'other', label: 'Other' }]\n  };\n\n  var equipmentTypes = {\n    'atlss': [{ name: 'hybrid_simulation', label: 'Hybrid Simulation' }, { name: 'other', label: 'Other' }],\n    'cgm-ucdavis': [{ name: '9-m_radius_dynamic_geotechnical_centrifuge', label: '9m Radius Dynamic Geotechnical Centrifuge' }, { name: '1-m_radius_dynamic_geotechnical_centrifuge', label: '1m Radius Dynamic Geotechnical Centrifuge' }, { name: 'other', label: 'Other' }],\n    'eqss-utaustin': [{ name: 'liquidator',\n      label: 'Low Frequency, Two Axis Shaker (Liquidator)' }, { name: 't-rex',\n      label: 'High Force Three Axis Shaker (T Rex)' }, { name: 'tractor-t-rex',\n      label: 'Tractor-Trailer Rig, Big Rig, with T-Rex' }, { name: 'raptor',\n      label: 'Single Axis Vertical Shaker (Raptor)' }, { name: 'rattler',\n      label: 'Single Axis Horizontal Shaker (Rattler)' }, { name: 'thumper',\n      label: 'Urban, Three axis Shaker (Thumper)' }, { name: 'other', label: 'Other' }],\n    'pfsml-florida': [{ name: 'blwt', label: 'Boundary Layer Wind Tunnel (BLWT)' }, { name: 'abl', label: 'Atmospheric Boundary Layer Wind Tunnel Test (ABL)' }, { name: 'wdrt', label: 'Wind Driven Rain Test' }, { name: 'wtdt', label: 'wind_tunnel_destructive_test' }, { name: 'dfs', label: 'Dynamic Flow Simulator (DFS)' }, { name: 'hapla', label: 'High Airflow Pressure Loading Actuator (HAPLA)' }, { name: 'spla', label: 'Spatiotemporal Pressure Loading Actuator (SPLA)' }, { name: 'other', label: 'Other' }],\n    'wwhr-florida': [{ name: 'pmtp', label: 'Physical_measurement_test_protocol' }, { name: 'fmtp', label: 'Failure Mode Test Protocol' }, { name: 'wdrtp', label: 'Wind Driven Rain Test Protocol' }, { name: 'other', label: 'Other' }],\n    'lhpost-sandiego': [{ name: 'lhpost', label: 'Large High Performance Outdoor Shake Table (LHPOST)' }, { name: 'other', label: 'Other' }],\n    'ohhwrl-oregon': [{ name: 'lwf', label: 'Large Wave Flume (LWF)' }, { name: 'dwb', label: 'Directional Wave Basin (DWB)' }, { name: 'mobs', label: 'Mobile Shaker' }, { name: 'pla', label: 'pressure_loading_actuator' }, { name: 'other', label: 'Other' }],\n    'other': [{ name: 'other', label: 'Other' }]\n  };\n\n  var experimentTypes = {\n    'atlss': [{ name: 'hybrid_simulation', label: 'Hybrid Simulation' }, { name: 'other', label: 'Other' }],\n    'cgm-ucdavis': [{ name: 'centrifuge', label: 'Centrifuge' }, { name: 'other', label: 'Other' }],\n    'eqss-utaustin': [{ name: 'mobile_shaker', label: 'Mobile Shaker' }, { name: 'other', label: 'Other' }],\n    'pfsml-florida': [{ name: 'wind', label: 'Wind' }, { name: 'other', label: 'Other' }],\n    'wwhr-florida': [{ name: 'wind', label: 'Wind' }, { name: 'other', label: 'Other' }],\n    'lhpost-sandiego': [{ name: 'shake', label: 'Shake' }, { name: 'other', label: 'Other' }],\n    'ohhwrl-oregon': [{ name: 'wave', label: 'Wave' }, { name: 'other', label: 'Other' }],\n    'other': [{ name: 'other', label: 'Other' }]\n  };\n\n  var service = {};\n\n  var projectResource = httpi.resource('/api/data-depot/projects/:uuid/').setKeepTrailingSlash(true);\n  var collabResource = httpi.resource('/api/projects/:uuid/collaborators/').setKeepTrailingSlash(true);\n  var dataResource = httpi.resource('/api/projects/:uuid/data/:fileId').setKeepTrailingSlash(true);\n  //var entitiesResource = httpi.resource('/api/projects/:uuid/meta/:name/').setKeepTrailingSlash(true);\n  //var entityResource = httpi.resource('/api/projects/meta/:uuid/').setKeepTrailingSlash(true);\n\n\n  /**\n   * Get a list of Projects for the current user\n   * @returns {Project[]}\n   */\n  service.list = function () {\n    return projectResource.get().then(function (resp) {\n      return resp.data.response;\n    });\n  };\n\n  /**\n   * Get a specific Project\n   * @param {Object} options\n   * @param {string} options.uuid The Project UUID\n   * @returns {Promise}\n   */\n  service.get = function (options) {\n    return projectResource.get({ params: options }).then(function (resp) {\n      return new ProjectModel(resp.data);\n    });\n  };\n\n  /**\n   * Save or update a Project\n   * @param {Object} options\n   * @param {string} [options.uuid] The Project uuid, if updating existing record, otherwise null\n   * @param {string} options.title The Project title\n   * @param {string} [options.pi] The username for Project PI\n   * @param {string[]} [options.coPis] List of usernames for Project Co-PIs\n   * @returns {Promise}\n   */\n  service.save = function (options) {\n    return projectResource.post({ data: options }).then(function (resp) {\n      return new ProjectModel(resp.data);\n    });\n  };\n\n  /**\n   * Get a list of usernames for users that are collaborators on the Project\n   * @param {Object} options\n   * @param {string} options.uuid The Project uuid\n   * @returns {Promise}\n   */\n  service.getCollaborators = function (options) {\n    return collabResource.get({ params: options });\n  };\n\n  /**\n   *\n   * @param options\n   * @param {string} options.uuid The Project uuid\n   * @param {string} options.username The username of the collaborator to add\n   * @returns {Promise}\n   */\n  service.addCollaborator = function (options) {\n    return collabResource.post({ data: options });\n  };\n\n  /**\n   *\n   * @param options\n   * @param {string} options.uuid The Project uuid\n   * @param {string} options.username The username of the collaborator to add\n   * @returns {Promise}\n   */\n  service.removeCollaborator = function (options) {\n    return collabResource.delete({ data: options });\n  };\n\n  /**\n   *\n   * @param options\n   * @param {string} options.uuid The Project uuid\n   * @param {string} [options.fileId] the Project data file id to list\n   * @returns {Promise}\n   */\n  service.projectData = function (options) {\n    return dataResource.get({ params: options });\n  };\n\n  /**\n   *\n   * @param options\n   * @param {string} options.uuid The Project uuid\n   * @returns {Promise}\n   */\n  service.manageExperiments = function (options) {\n    var modal = $uibModal.open({\n      templateUrl: '/static/scripts/ng-designsafe/html/modals/project-service-manage-experiments.html',\n      controller: ['$scope', '$uibModalInstance', '$q', 'Django', 'UserService', function ($scope, $uibModalInstance, $q, Django, UserService) {\n        $scope.data = {\n          busy: false,\n          experiments: options.experiments,\n          project: options.project,\n          form: {}\n        };\n        $scope.ui = {\n          experiments: {},\n          efs: efs,\n          experimentTypes: experimentTypes,\n          equipmentTypes: equipmentTypes,\n          updateExperiments: {},\n          showAddReport: {}\n        };\n        $scope.form = {\n          curExperiments: [],\n          addExperiments: [{}],\n          deleteExperiments: [],\n          entitiesToAdd: []\n        };\n        $scope.form.curExperiments = $scope.data.project.experiment_set;\n\n        $scope.addExperiment = function () {\n          $scope.form.addExperiments.push({});\n        };\n\n        $scope.cancel = function () {\n          $uibModalInstance.dismiss();\n        };\n\n        $scope.delNewExperiment = function (index) {\n          $scope.form.addExperiments.splice(index, 1);\n        };\n\n        $scope.getEF = function (str) {\n          var efs = $scope.ui.efs[$scope.data.project.value.projectType];\n          var ef = _.find(efs, function (ef) {\n            return ef.name === str;\n          });\n          return ef;\n        };\n\n        $scope.getET = function (type, str) {\n          var ets = $scope.ui.experimentTypes[type];\n          var et = _.find(ets, function (et) {\n            return et.name === str;\n          });\n          return et;\n        };\n\n        $scope.getTagList = function (entity) {\n          var tags = angular.copy(entyt.tags);\n          var res = [];\n          _.forEach(entity.value.tags, function (val, tagsType) {\n            var r = _.map(Object.keys(val), function (v) {\n              return { tagType: tagsType, name: v, label: v };\n            });\n            res = res.concat(r);\n          });\n          return res;\n        };\n\n        $scope.editExp = function (exp) {\n          $scope.editExpForm = {\n            exp: exp,\n            title: exp.value.title,\n            facility: exp.getEF($scope.data.project.value.projectType, exp.value.experimentalFacility).label,\n            type: exp.value.experimentType,\n            equipment: exp.getET(exp.value.experimentalFacility, exp.value.equipmentType).label,\n            description: exp.value.description\n          };\n          $scope.ui.showEditExperimentForm = true;\n        };\n\n        $scope.moveOrderUp = function ($index, ent, list) {\n          if (typeof ent._ui.order === 'undefined') {\n            ent._ui.order = 0;\n          } else if (ent._ui.order > 0) {\n            var order = ent._ui.order;\n            var _ent = _.find(list, function (e) {\n              return e._ui.order === order - 1;\n            });\n            ent._ui.order -= 1;\n            _ent._ui.order += 1;\n          }\n        };\n\n        $scope.moveOrderDown = function ($index, ent, list) {\n          if (typeof ent._ui.order === 'undefined') {\n            ent._ui.order = 0;\n          } else if (ent._ui.order < list.length - 1) {\n            var _ent = _.find(list, function (e) {\n              return e._ui.order === ent._ui.order + 1;\n            });\n            ent._ui.order += 1;\n            _ent._ui.order -= 1;\n          }\n        };\n\n        $scope.saveEditExperiment = function () {\n          var exp = $scope.editExpForm.exp;\n          exp.value.title = $scope.editExpForm.title;\n          exp.value.description = $scope.editExpForm.description;\n          $scope.ui.savingEditExp = true;\n          ProjectEntitiesService.update({ data: {\n              uuid: exp.uuid,\n              entity: exp\n            } }).then(function (e) {\n            var ent = $scope.data.project.getRelatedByUuid(e.uuid);\n            ent.update(e);\n            $scope.ui.savingEditExp = false;\n            $scope.data.experiments = $scope.data.project.experiment_set;\n            $scope.ui.showEditExperimentForm = false;\n            return e;\n          });\n        };\n\n        $scope.toggleDeleteExperiment = function (uuid) {\n          if (uuid in $scope.ui.experiments && $scope.ui.experiments[uuid].deleted) {\n            var index = $scope.form.deleteExperiments.indexOf(uuid);\n            $scope.form.deleteExperiments.splice(index, 1);\n            $scope.ui.experiments[uuid].deleted = false;\n          } else {\n            $scope.form.deleteExperiments.push(uuid);\n            $scope.ui.experiments[uuid] = {};\n            $scope.ui.experiments[uuid].deleted = true;\n          }\n        };\n\n        $scope.saveExperiment = function ($event) {\n          $event.preventDefault();\n          $scope.data.busy = true;\n          var addActions = _.map($scope.form.addExperiments, function (exp) {\n            exp.description = exp.description || '';\n            if (exp.title && exp.experimentalFacility && exp.experimentType) {\n              return ProjectEntitiesService.create({\n                data: {\n                  uuid: $scope.data.project.uuid,\n                  name: 'designsafe.project.experiment',\n                  entity: exp\n                }\n              }).then(function (res) {\n                $scope.data.project.addEntity(res);\n                //$scope.data.experiments.push(res);\n              });\n            }\n          });\n\n          //var tasks = addActions.concat(removeActions);\n\n          $q.all(addActions).then(function (results) {\n            $scope.data.busy = false;\n            $scope.form.addExperiments = [{}];\n            //$uibModalInstance.close(results);\n          }, function (error) {\n            $scope.data.error = error;\n            //$uibModalInstance.reject(error.data);\n          });\n        };\n\n        $scope.removeExperiments = function ($event) {\n          $scope.data.busy = true;\n\n          var removeActions = _.map($scope.form.deleteExperiments, function (uuid) {\n            return ProjectEntitiesService.delete({\n              data: {\n                uuid: uuid\n              }\n            }).then(function (entity) {\n              var entityAttr = $scope.data.project.getRelatedAttrName(entity.name);\n              var entitiesArray = $scope.data.project[entityAttr];\n              entitiesArray = _.filter(entitiesArray, function (e) {\n                return e.uuid !== entity.uuid;\n              });\n              $scope.data.project[entityAttr] = entitiesArray;\n              $scope.data.experiments = $scope.data.project[entityAttr];\n            });\n          });\n\n          $q.all(removeActions).then(function (results) {\n            $scope.data.busy = false;\n            $scope.form.addExperiments = [{}];\n            //$uibModalInstance.close(results);\n          }, function (error) {\n            $scope.data.busy = false;\n            $scope.data.error = error;\n            //$uibModalInstance.reject(error.data);\n          });\n        };\n\n        $scope.removeAnalysis = function (uuid) {\n          $scope.data.busy = true;\n          ProjectEntitiesService.delete({\n            data: {\n              uuid: uuid\n            }\n          }).then(function (entity) {\n            var entityAttr = $scope.data.project.getRelatedAttrName(entity.name);\n            var entitiesArray = $scope.data.project[entityAttr];\n            entitiesArray = _.filter(entitiesArray, function (e) {\n              return e.uuid !== entity.uuid;\n            });\n            $scope.data.project[entityAttr] = entitiesArray;\n            $scope.data.busy = false;\n          }, function (error) {\n            $scope.data.busy = false;\n            $scope.data.error = error;\n          });\n        };\n\n        $scope.delRelEntity = function (entity, rels) {\n          var _entity = angular.copy(entity);\n          _.each(rels, function (rel, relName) {\n            _entity.associationIds = _.without(_entity.associationIds, rel);\n            _entity.value[relName] = _.without(_entity.value[relName], rel);\n          });\n          ProjectEntitiesService.update({ data: { uuid: entity.uuid, entity: _entity } }).then(function (res) {\n            options.project.getRelatedByUuid(res.uuid).update(res);\n          }, function (err) {\n            $uibModalInstance.reject(err.data);\n          });\n        };\n\n        $scope.saveRelEntity = function (entity, rels) {\n          var _entity = angular.copy(entity);\n          _.each(rels, function (rel, relName) {\n            _entity.associationIds.push(rel);\n            _entity.value[relName].push(rel);\n          });\n          ProjectEntitiesService.update({ data: { uuid: entity.uuid, entity: _entity } }).then(function (res) {\n            var attrName = '';\n            for (var name in options.project._related) {\n              if (options.project._related[name] === res.name) {\n                attrName = name;\n                break;\n              }\n            }\n            var entity = _.find(options.project[attrName], function (entity) {\n              if (entity.uuid === res.uuid) {\n                return entity;\n              }\n            });\n            entity.update(res);\n            $scope.form.updateExperiments = {};\n          }, function (err) {\n            $uibModalInstance.reject(err.data);\n          });\n        };\n\n        $scope.ui.addingTag = false;\n        $scope.ui.tagTypes = [{ label: 'Model Config',\n          name: 'designsafe.project.model_config',\n          yamzId: 'h1312' }, { label: 'Sensor Info',\n          name: 'designsafe.project.sensor_list',\n          yamzId: 'h1557' }, { label: 'Event',\n          name: 'designsafe.project.event',\n          yamzId: 'h1253' }, { label: 'Analysis',\n          name: 'designsafe.project.analysis',\n          yamzId: 'h1333' }, { label: 'Report',\n          name: 'designsafe.project.report',\n          yamzId: '' }];\n        $scope.ui.analysisData = [{ name: 'graph', label: 'Graph' }, { name: 'visualization', label: 'Visualization' }, { name: 'table', label: 'Table' }, { name: 'other', label: 'Other' }];\n        $scope.ui.analysisApplication = [{ name: 'matlab', label: 'Matlab' }, { name: 'r', label: 'R' }, { name: 'jupyter', label: 'Jupyter' }, { name: 'other', label: 'Other' }];\n\n        $scope.data.form.projectTagToAdd = { optional: {} };\n\n        $scope.addProjectTag = function () {\n          var newTag = $scope.data.form.projectTagToAdd;\n          var nameComps = newTag.tagType.split('.');\n          var name = nameComps[nameComps.length - 1];\n          var entity = {};\n          entity.name = newTag.tagType;\n          if (name === 'event') {\n            entity.eventType = newTag.tagAttribute;\n          } else if (name === 'analysis') {\n            entity.analysisType = newTag.tagAttribute;\n          } else if (name === 'sensor_list') {\n            entity.sensorListType = newTag.tagAttibute;\n          } else if (name === 'model_config') {\n            entity.coverage = newTag.tagAttribute;\n          }\n          for (var attr in $scope.data.form.projectTagToAdd.optional) {\n            entity[attr] = $scope.data.form.projectTagToAdd.optional[attr];\n          }\n          $scope.ui.addingTag = true;\n          entity.title = newTag.tagTitle;\n          entity.description = newTag.tagDescription || '';\n          if (typeof $scope.data.files !== 'undefined') {\n            entity.filePaths = _.map($scope.data.files, function (file) {\n              return file.path;\n            });\n          }\n          $scope.ui.addingTag = true;\n          ProjectEntitiesService.create({ data: {\n              uuid: $scope.data.project.uuid,\n              name: newTag.tagType,\n              entity: entity\n            } }).then(function (resp) {\n            $scope.data.form.projectTagToAdd = { optional: {} };\n            //currentState.project.addEntity(resp);\n            $scope.data.project.addEntity(resp);\n            $scope.ui.error = false;\n            $scope.ui.addingTag = false;\n          }, function (err) {\n            $scope.ui.error = true;\n            $scope.error = err;\n          });\n        };\n      }],\n      size: 'lg'\n    });\n\n    return modal.result;\n  };\n\n  /**\n   *\n   * @param options\n   * @param {string} options.uuid The Project uuid\n   * @returns {Promise}\n   */\n  service.manageCollaborators = function (project) {\n    var modal = $uibModal.open({\n      templateUrl: '/static/scripts/ng-designsafe/html/modals/project-service-add-collaborator.html',\n      controller: ['$scope', '$uibModalInstance', '$q', 'Django', 'UserService', function ($scope, $uibModalInstance, $q, Django, UserService) {\n        $scope.data = {\n          busy: true,\n          project: project\n        };\n\n        $scope.initForm = function () {\n          $scope.form = {\n            curUsers: [],\n            addUsers: [{}],\n            curCoPis: [],\n            addCoPis: [{}],\n            authors: {}\n          };\n        };\n        $scope.initForm();\n\n        $scope.loadData = function () {\n          var loads = [\n          //projectResource.get({params: angular.copy(options)}),\n          //service.get(angular.copy(options)),\n          collabResource.get({ params: { uuid: project.uuid } }), ProjectEntitiesService.listEntities({ uuid: project.uuid,\n            name: 'designsafe.project.experiment' })];\n          $q.all(loads).then(function (results) {\n            $scope.data.busy = false;\n            $scope.data.experiments = results[1];\n\n            _.each($scope.data.experiments, function (exp) {\n              $scope.form.authors[exp.uuid] = {};\n              _.each(exp.value.authors, function (auth) {\n                $scope.form.authors[exp.uuid][auth] = true;\n              });\n            });\n\n            $scope.form.curUsers = _.map(results[0].data.teamMembers, function (collab) {\n              return {\n                user: { username: collab },\n                remove: false\n              };\n            });\n            $scope.form.curCoPis = _.map(results[0].data.coPis, function (collab) {\n              return {\n                user: { username: collab },\n                remove: false\n              };\n            });\n          }, function (error) {\n            $scope.data.busy = false;\n            $scope.data.error = error.data.message || error.data;\n          });\n        };\n\n        $scope.loadData();\n\n        $scope.canManage = function (user) {\n          var noManage = $scope.data.project.value.pi === user || Django.user === user || user === 'ds_admin';\n          return !noManage;\n        };\n\n        $scope.formatSelection = function () {\n          if (this.add.user) {\n            return this.add.user.first_name + ' ' + this.add.user.last_name + ' (' + this.add.user.username + ')';\n          }\n        };\n\n        $scope.addAnother = function () {\n          $scope.form.addUsers.push({});\n        };\n\n        $scope.addAnotherCoPi = function () {\n          $scope.form.addCoPis.push({});\n        };\n\n        $scope.searchUsers = function (q) {\n          return UserService.search({ q: q });\n        };\n\n        $scope.authorship = [];\n\n        $scope.toggleUserToExp = function (exp, username) {\n          var add = $scope.form.authors[exp.uuid][username];\n          $scope.authorship.push(exp);\n          if (add) {\n            exp.value.authors.push(username);\n          } else {\n            // $scope.authorship = _.reject($scope.authorship, function(obj){\n            // return obj.username === username; });\n            exp.value.authors = _.filter(exp.value.authors, function (d) {\n              return d !== username;\n            });\n          }\n        };\n\n        $scope.saveCollaborators = function ($event) {\n          if ($event) {\n            $event.preventDefault();\n          }\n          $scope.data.busy = true;\n\n          var removeActions = _.map($scope.form.curUsers, function (cur) {\n            if (cur.remove) {\n              return collabResource.delete({ data: {\n                  uuid: $scope.data.project.uuid,\n                  username: cur.user.username\n                } });\n            }\n          });\n\n          var coPIsRemoveActions = _.map($scope.form.curCoPis, function (cur) {\n            if (cur.remove) {\n              return collabResource.delete({ data: {\n                  uuid: $scope.data.project.uuid,\n                  username: cur.user.username\n                } });\n            }\n          });\n\n          removeActions = removeActions.concat(coPIsRemoveActions);\n\n          var addActions = _.map($scope.form.addUsers, function (add) {\n            if (add.user && add.user.username) {\n              return collabResource.post({ data: {\n                  uuid: $scope.data.project.uuid,\n                  username: add.user.username\n                } });\n            }\n          });\n\n          addActions.concat(_.map($scope.form.addCoPis, function (add) {\n            if (add.user && add.user.username) {\n              return collabResource.post({ data: {\n                  uuid: $scope.data.project.uuid,\n                  username: add.user.username,\n                  memberType: 'coPis'\n                } });\n            }\n          }));\n\n          var expsToUpdate = [];\n          _.each($scope.authorship, function (obj) {\n            expsToUpdate.push(obj);\n          });\n\n          // TODO This should probably be a stack or something...\n          // expsToUpdate = _.uniq(expsToUpdate, function (d) { return d.uuid;});\n          var updateExps = _.map(expsToUpdate, function (_exp) {\n            // var _exp = $scope.data.project.getRelatedByUuid(uuid);\n            return ProjectEntitiesService.update({ data: {\n                uuid: _exp.uuid,\n                entity: _exp\n              } }).then(function (e) {\n              var ent = $scope.data.project.getRelatedByUuid(e.uuid);\n              ent.update(e);\n              return e;\n            });\n          });\n\n          //ProjectEntitiesService.update(\n          //    {data: {uuid: entity.uuid, entity: entity}}\n          //)\n          var tasks = removeActions.concat(addActions);\n          tasks = tasks.concat(updateExps);\n          $q.all(tasks).then(function (results) {\n            // $uibModalInstance.close(results);\n            // $scope.data.busy = true;\n            $scope.initForm();\n            $scope.loadData();\n          }, function (error) {\n            // $uibModalInstance.reject(error.data);\n            $scope.data.busy = true;\n            $scope.initForm();\n            $scope.loadData();\n          });\n        };\n\n        $scope.cancel = function () {\n          $uibModalInstance.close($scope.data.project);\n        };\n      }]\n    });\n\n    return modal.result;\n  };\n\n  /**\n   * @param {Project} [project]\n   * @return {Promise}\n   */\n  service.editProject = function (_project) {\n    var modal = $uibModal.open({\n      size: 'md',\n      templateUrl: '/static/scripts/ng-designsafe/html/modals/project-service-edit-project.html',\n      controller: ['$scope', '$uibModalInstance', 'UserService', 'project', function ($scope, $uibModalInstance, UserService, project) {\n        $scope.ui = { busy: false,\n          error: null };\n        $scope.form = { associatedProjectsAdded: [{}] };\n        $scope.projectTypes = [{\n          id: 'experimental',\n          label: 'Experimental' }, {\n          id: 'simulation',\n          label: 'Simulation' }, {\n          id: 'hybrid_simulation',\n          label: 'Hybrid Simulation' }, {\n          id: 'field_reconnaissance',\n          label: 'Field Reconnaissance' }, {\n          id: 'other',\n          label: 'Other' }];\n        $scope.efs = efs;\n\n        if (project) {\n          $scope.form.uuid = project.uuid;\n          $scope.form.title = project.value.title;\n          $scope.form.awardNumber = project.value.awardNumber || '';\n          $scope.form.projectId = project.value.projectId || '';\n          $scope.form.description = project.value.description || '';\n          $scope.form.experimentalFacility = project.value.experimentalFacility || '';\n          $scope.form.keywords = project.value.keywords || '';\n          if (typeof project.value.projectType !== 'undefined') {\n            $scope.form.projectType = _.find($scope.projectTypes, function (projectType) {\n              return projectType.id === project.value.projectType;\n            });\n          }\n          if (typeof project.value.associatedProjects !== 'undefined') {\n            $scope.form.associatedProjects = _.filter(project.value.associatedProjects, function (associatedProject) {\n              return typeof associatedProject.title !== 'undefined' && associatedProject.title.length > 0;\n            });\n          }\n          UserService.get(project.value.pi).then(function (user) {\n            $scope.form.pi = user;\n          });\n        }\n\n        $scope.searchUsers = function (q) {\n          return UserService.search({ q: q });\n        };\n\n        $scope.formatSelection = function () {\n          if (this.form.pi) {\n            return this.form.pi.first_name + ' ' + this.form.pi.last_name + ' (' + this.form.pi.username + ')';\n          }\n        };\n\n        $scope.addAssociatedProject = function () {\n          $scope.form.associatedProjectsAdded.push({});\n        };\n\n        $scope.cancel = function () {\n          $uibModalInstance.dismiss();\n        };\n\n        $scope.save = function () {\n          $scope.ui.busy = true;\n          var projectData = {\n            title: $scope.form.title,\n            awardNumber: $scope.form.awardNumber,\n            description: $scope.form.description,\n            projectId: $scope.form.projectId\n          };\n          if ($scope.form.pi && $scope.form.pi.username) {\n            projectData.pi = $scope.form.pi.username;\n          }\n\n          //if (typeof $scope.form.experimentalFacility !== 'undefined'){\n          //  projectData.experimentalFacility = $scope.form.experimentalFacility;\n          //}\n          if (typeof $scope.form.projectType.id !== 'undefined') {\n            projectData.projectType = $scope.form.projectType.id;\n          }\n          if ($scope.form.uuid) {\n            projectData.uuid = $scope.form.uuid;\n          }\n          if (typeof $scope.form.associatedProjectsAdded !== 'undefined') {\n            $scope.form.associatedProjectsAdded = _.filter($scope.form.associatedProjectsAdded, function (associatedProject) {\n              return typeof associatedProject.title !== 'undefined' && associatedProject.title.length > 0;\n            });\n            projectData.associatedProjects = $scope.form.associatedProjects || [];\n            projectData.associatedProjects = _.filter(projectData.associatedProjects, function (associatedProject) {\n              return !associatedProject.delete;\n            });\n            projectData.associatedProjects = projectData.associatedProjects.concat($scope.form.associatedProjectsAdded);\n          }\n          if (typeof $scope.form.keywords !== 'undefined') {\n            projectData.keywords = $scope.form.keywords;\n          }\n          service.save(projectData).then(function (project) {\n            $uibModalInstance.close(project);\n            $scope.ui.busy = false;\n          });\n        };\n      }],\n      resolve: {\n        project: function project() {\n          return _project;\n        }\n      }\n    });\n\n    return modal.result;\n  };\n\n  return service;\n};\n\nexports.default = ProjectService;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n\nfunction SystemsService($http, $q) {\n  'ngInject';\n\n  var self = this;\n  self.systems = null;\n\n  this.listing = function () {\n    return $http.get('/api/data-depot/systems/list').then(function (resp) {\n      self.systems = resp.data.response;\n      return resp.data.response;\n    });\n  };\n}\n\nexports.default = SystemsService;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvZGF0YV9kZXBvdC9zZXJ2aWNlcy9zeXN0ZW1zLXNlcnZpY2UuanM/NmQ1YSJdLCJuYW1lcyI6WyJTeXN0ZW1zU2VydmljZSIsIiRodHRwIiwiJHEiLCJzZWxmIiwic3lzdGVtcyIsImxpc3RpbmciLCJnZXQiLCJ0aGVuIiwicmVzcCIsImRhdGEiLCJyZXNwb25zZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBLFNBQVNBLGNBQVQsQ0FBd0JDLEtBQXhCLEVBQStCQyxFQUEvQixFQUFtQztBQUNqQzs7QUFDQSxNQUFJQyxPQUFPLElBQVg7QUFDQUEsT0FBS0MsT0FBTCxHQUFlLElBQWY7O0FBRUEsT0FBS0MsT0FBTCxHQUFlLFlBQVk7QUFDekIsV0FBT0osTUFBTUssR0FBTixDQUFVLDhCQUFWLEVBQTBDQyxJQUExQyxDQUErQyxVQUFVQyxJQUFWLEVBQWdCO0FBQ3BFTCxXQUFLQyxPQUFMLEdBQWVJLEtBQUtDLElBQUwsQ0FBVUMsUUFBekI7QUFDQSxhQUFPRixLQUFLQyxJQUFMLENBQVVDLFFBQWpCO0FBQ0QsS0FITSxDQUFQO0FBSUQsR0FMRDtBQU1EOztrQkFFY1YsYyIsImZpbGUiOiIyMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG5mdW5jdGlvbiBTeXN0ZW1zU2VydmljZSgkaHR0cCwgJHEpIHtcbiAgJ25nSW5qZWN0JztcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBzZWxmLnN5c3RlbXMgPSBudWxsO1xuXG4gIHRoaXMubGlzdGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2RhdGEtZGVwb3Qvc3lzdGVtcy9saXN0JykudGhlbihmdW5jdGlvbiAocmVzcCkge1xuICAgICAgc2VsZi5zeXN0ZW1zID0gcmVzcC5kYXRhLnJlc3BvbnNlO1xuICAgICAgcmV0dXJuIHJlc3AuZGF0YS5yZXNwb25zZTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU3lzdGVtc1NlcnZpY2U7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvZGF0YV9kZXBvdC9zZXJ2aWNlcy9zeXN0ZW1zLXNlcnZpY2UuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar mod = angular.module('portal.directives', []);\n\n//sdfsdfsdf\nmod.directive('iframeOnload', [function () {\n  return {\n    scope: {\n      callBack: '&iframeOnload'\n    },\n    link: function link(scope, element, attrs) {\n      element.on('load', function () {\n        return scope.callBack();\n      });\n    }\n  };\n}]);\n\nmod.directive('fileModel', ['$parse', function ($parse) {\n  return {\n    restrict: 'A',\n    link: function link(scope, element, attrs) {\n      var model = $parse(attrs.fileModel);\n      var modelSetter = model.assign;\n      element.bind('change', function () {\n        scope.$apply(function () {\n          if (attrs.multiple) {\n            modelSetter(scope, element[0].files);\n          } else {\n            modelSetter(scope, element[0].files[0]);\n          }\n        });\n      });\n    }\n  };\n}]);\n\nmod.directive('spinnerOnLoad', function () {\n  return {\n    restrict: 'A',\n    link: function link(scope, element) {\n      element.parent().prepend(\"<div class='text-center spinner'><i class='fa fa-spinner fa-pulse fa-3x fa-fw'></i></div>\");\n      element.css('display', 'none');\n      element.on('load', function (ev) {\n        element.parent().find(\".spinner\").remove();\n        element.css('display', 'block');\n      });\n    }\n  };\n});\n\nmod.directive('httpSrc', ['$http', function ($http) {\n  return {\n    restrict: 'A',\n    link: function link(scope, element, attrs) {\n      var conf = {\n        responseType: 'arraybuffer'\n      };\n\n      $http.get(attrs.httpSrc, conf).success(function (data) {\n        var arr = new Uint8Array(data);\n\n        var raw = '';\n        var i,\n            j,\n            subArray,\n            chunk = 5000;\n        for (i = 0, j = arr.length; i < j; i += chunk) {\n          subArray = arr.subarray(i, i + chunk);\n          raw += String.fromCharCode.apply(null, subArray);\n        }\n\n        var b64 = btoa(raw);\n        attrs.$set('src', \"data:image/jpeg;base64,\" + b64);\n      }).error(function (error) {\n        console.log(error);\n      });\n    }\n  };\n}]);\n\nmod.directive('accessfiles', function () {\n  return {\n    scope: {\n      accessfiles: '='\n    },\n    link: function link(scope, element, attributes) {\n\n      element.bind('change', function (event) {\n        scope.$apply(function () {\n          scope.accessfiles = event.target.files;\n        });\n      });\n    }\n  };\n});\n\nmod.directive('selectOnFocus', function () {\n  return {\n    restrict: 'A',\n    link: function link(scope, element, attrs) {\n      element.on('focus', function () {\n        this.select();\n      });\n    }\n  };\n});\n\nmod.directive('dsDataDraggable', function () {\n  function dragStart(e) {\n    var ele = this;\n    ele.style.opacity = '0.4';\n    e.dataTransfer.effectAllowed = 'copyLink';\n    e.dataTransfer.setData('text/plain', ele.getAttribute('data-ds-data'));\n    this.classList.add('drag');\n  }\n\n  function dragOver(e) {\n    e.preventDefault();\n    var ele = this;\n    ele.style.opacity = '1';\n  }\n\n  function onDrop(e) {\n    e.stopPropagation();\n    var ele = this;\n    ele.style.opacity = '1';\n  }\n\n  function dataDraggable($scope, $element) {\n    var el = $element[0];\n    el.draggable = true;\n    el.addEventListener('dragstart', dragStart);\n    el.addEventListener('dragover', dragOver);\n    el.addEventListener('dragend', dragOver);\n    el.addEventListener('drop', onDrop);\n  }\n  return dataDraggable;\n});\n\nmod.directive('dsDraggable', function () {\n\n  return {\n    restrict: 'A',\n    scope: {\n      transferData: '=dsDragTransfer',\n      dragStart: '&dsDragStart',\n      dragEnter: '&dsDragEnter',\n      dragOver: '&dsDragOver',\n      dragLeave: '&dsDragLeave',\n      dragEnd: '&dsDragEnd',\n      dragDrop: '&dsDragDrop',\n      allowDrag: '=dsDragEnabled'\n    },\n    link: function link(scope, element) {\n      if (scope.allowDrag) {\n        element[0].draggable = true;\n      }\n\n      element.addClass('ds-drop-target');\n\n      element[0].addEventListener('dragstart', function (e) {\n        var handler = scope.dragStart();\n        if (handler) {\n          handler(e, scope.transferData);\n        }\n      });\n\n      element[0].addEventListener('dragenter', function (e) {\n        var handler = scope.dragEnter();\n        if (handler) {\n          handler(e, scope.transferData);\n        }\n      });\n\n      element[0].addEventListener('dragover', function (e) {\n        var handler = scope.dragOver();\n        if (handler) {\n          handler(e, scope.transferData);\n        }\n      });\n\n      var dragLeaveHandler = function dragLeaveHandler(e) {\n        var handler = scope.dragLeave();\n        if (handler) {\n          handler(e, scope.transferData);\n        }\n      };\n      element[0].addEventListener('dragleave', dragLeaveHandler);\n      element[0].addEventListener('dragexit', dragLeaveHandler);\n\n      element[0].addEventListener('dragend', function (e) {\n        var handler = scope.dragEnd();\n        if (handler) {\n          handler(e, scope.transferData);\n        }\n      });\n\n      element[0].addEventListener('drop', function (e) {\n        var handler = scope.dragDrop();\n        if (handler) {\n          handler(e, scope.transferData);\n        }\n      });\n    }\n  };\n});\n\nmod.directive('dsInfiniteScroll', function () {\n  return {\n    restrict: 'A',\n    scope: {\n      scrollBottom: '&',\n      scrollTop: '&',\n      bottomHeight: '='\n    },\n    link: function link(scope, element, attrs) {\n      var el = element[0];\n      el.addEventListener('scroll', function (e) {\n        var pos = el.offsetHeight + el.scrollTop;\n        if (pos >= el.scrollHeight - scope.bottomHeight) {\n          scope.scrollBottom(el, pos);\n        }\n        if (pos <= el.offsetHeight) {\n          if (scope.scrollTop) {\n            scope.scrollTop(el, pos);\n          }\n        }\n      });\n    }\n  };\n});\n\nmod.directive('dsUser', ['UserService', function (UserService) {\n  return {\n    restrict: 'EA',\n    scope: {\n      username: '=',\n      format: '@'\n    },\n    link: function link(scope, element) {\n      var format = scope.format || 'name';\n\n      UserService.get(scope.username).then(function (user) {\n        switch (format) {\n          case 'lname':\n            element.text(user.last_name + ', ' + user.first_name + ';');\n            break;\n          case 'name':\n            element.text(user.first_name + ' ' + user.last_name);\n            break;\n          case 'email':\n            element.text(user.email);\n            break;\n          case 'name-email':\n            element.text(user.first_name + ' ' + user.last_name + ' <' + user.email + '>');\n            break;\n          case 'name-username':\n            element.text(user.first_name + ' ' + user.last_name + ' (' + user.username + ')');\n            break;\n          case 'name-username-email':\n            element.text(user.first_name + ' ' + user.last_name + ' (' + user.username + ') <' + user.email + '>');\n            break;\n          default:\n            element.text(user.username);\n        }\n      });\n    }\n  };\n}]);\n\nmod.directive('dsFixTop', function ($window) {\n  var $win = angular.element($window); // wrap window object as jQuery object\n\n  return {\n    restrict: 'A',\n    link: function link(scope, element, attrs) {\n      var topClass = attrs.dsFixTop; // get CSS class from directive's attribute value\n\n      var navbar = $('.navbar-ds');\n      var offsetTop = 0;\n      $win.on('scroll', function (e) {\n        offsetTop = $('.site-banner').height() + navbar.height() / 2;\n        if ($win.scrollTop() >= offsetTop) {\n          element.addClass(topClass);\n          element.css({ top: navbar.position().top + navbar.height() });\n        } else {\n          element.removeClass(topClass);\n        }\n      });\n    }\n  };\n});\n\nmod.directive('yamzTerm', ['$http', function ($http) {\n  return {\n    restrict: 'EA',\n    scope: {\n      termId: '@',\n      title: '='\n    },\n    link: function link(scope, element, attrs) {\n      element.attr('data-toggle', 'tooltip');\n      element.tooltip({ container: 'body',\n        html: true,\n        title: 'Loading...',\n        placement: function placement(tip, el) {\n          var $el = $(el);\n          var pos = $el.position();\n          if (pos.left > $el.width() + 10 && pos.top > $el.height() + 10) {\n            return \"left\";\n          } else if (pos.left < $el.width() + 10 && pos.top > $el.height() + 10) {\n            return \"right\";\n          } else if (pos.top < $el.height() + 10 && pos) {\n            return \"bottom\";\n          } else {\n            return \"top\";\n          }\n        } });\n      element.on('mouseover', function (env) {\n        var title = element.attr('data-original-title');\n        if (typeof title === 'undefined' || title.length === 0 || title === 'Loading...') {\n          $http.get('/api/projects/yamz/' + scope.termId).then(function (res) {\n            var data = res.data;\n            var content = '<p> <strong>Definition: </strong>' + data.definition + '<br/> <br/>' + '<strong>Examples: </strong>' + data.examples + '</p>';\n            element.attr('title', content);\n            element.tooltip('fixTitle');\n            //element.tooltip('show');\n          });\n        }\n      });\n      element.on('mouseleave', function () {\n        //element.tooltip('hide');\n      });\n    }\n  };\n}]);\n\nexports.default = mod;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar mod = angular.module('portal.filters', []);\n\nmod.filter('bytes', function () {\n  return function (bytes, precision) {\n    if (isNaN(parseFloat(bytes)) || !isFinite(bytes)) return '-';\n    if (typeof precision === 'undefined') precision = 1;\n    var units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n    var number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n    return (bytes / Math.pow(1024, Math.floor(number))).toFixed(precision) + ' ' + units[number];\n  };\n});\n\nmod.filter('agaveperms', function () {\n  return function (pems) {\n    var options = {\n      'READ': 'Read',\n      'WRITE': 'Write',\n      'READ_WRITE': 'Read/Write',\n      'READ_EXECUTE': 'Read/Execute',\n      'WRITE_EXECUTE': 'Write/Execute',\n      'ALL': 'All',\n      'NONE': 'none'\n    };\n\n    return options[pems];\n  };\n});\n\nmod.filter('keys', function () {\n  return function (obj) {\n    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {\n      return Object.keys(obj);\n    }\n    return [];\n  };\n});\n\nmod.filter('length', function () {\n  return function (obj) {\n    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {\n      if (obj instanceof Array) {\n        return obj.length;\n      } else {\n        return Object.keys(obj).length;\n      }\n    } else if (typeof obj === \"string\") {\n      return obj.length;\n    } else if (typeof obj === \"number\") {\n      return String(obj).length;\n    }\n    return 0;\n  };\n});\n\nmod.filter('toTrusted', function ($sce) {\n  return function (value) {\n    return $sce.trustAsHtml(value);\n  };\n});\n\nexports.default = mod;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvbmctZGVzaWduc2FmZS1maWx0ZXJzLmpzPzFjZjciXSwibmFtZXMiOlsibW9kIiwiYW5ndWxhciIsIm1vZHVsZSIsImZpbHRlciIsImJ5dGVzIiwicHJlY2lzaW9uIiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwiaXNGaW5pdGUiLCJ1bml0cyIsIm51bWJlciIsIk1hdGgiLCJmbG9vciIsImxvZyIsInBvdyIsInRvRml4ZWQiLCJwZW1zIiwib3B0aW9ucyIsIm9iaiIsIk9iamVjdCIsImtleXMiLCJBcnJheSIsImxlbmd0aCIsIlN0cmluZyIsIiRzY2UiLCJ2YWx1ZSIsInRydXN0QXNIdG1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUlBLE1BQU1DLFFBQVFDLE1BQVIsQ0FBZSxnQkFBZixFQUFpQyxFQUFqQyxDQUFWOztBQUVBRixJQUFJRyxNQUFKLENBQVcsT0FBWCxFQUFvQixZQUFXO0FBQzdCLFNBQU8sVUFBU0MsS0FBVCxFQUFnQkMsU0FBaEIsRUFBMkI7QUFDaEMsUUFBSUMsTUFBTUMsV0FBV0gsS0FBWCxDQUFOLEtBQTRCLENBQUNJLFNBQVNKLEtBQVQsQ0FBakMsRUFBa0QsT0FBTyxHQUFQO0FBQ2xELFFBQUksT0FBT0MsU0FBUCxLQUFxQixXQUF6QixFQUFzQ0EsWUFBWSxDQUFaO0FBQ3RDLFFBQUlJLFFBQVEsQ0FBQyxPQUFELEVBQVUsSUFBVixFQUFnQixJQUFoQixFQUFzQixJQUF0QixFQUE0QixJQUE1QixFQUFrQyxJQUFsQyxDQUFaO0FBQ0EsUUFBSUMsU0FBU04sVUFBVSxDQUFWLEdBQWMsQ0FBZCxHQUFrQk8sS0FBS0MsS0FBTCxDQUFXRCxLQUFLRSxHQUFMLENBQVNULEtBQVQsSUFBa0JPLEtBQUtFLEdBQUwsQ0FBUyxJQUFULENBQTdCLENBQS9CO0FBQ0EsV0FBTyxDQUFDVCxRQUFRTyxLQUFLRyxHQUFMLENBQVMsSUFBVCxFQUFlSCxLQUFLQyxLQUFMLENBQVdGLE1BQVgsQ0FBZixDQUFULEVBQTZDSyxPQUE3QyxDQUFxRFYsU0FBckQsSUFBbUUsR0FBbkUsR0FBeUVJLE1BQU1DLE1BQU4sQ0FBaEY7QUFDRCxHQU5EO0FBT0QsQ0FSRDs7QUFVQVYsSUFBSUcsTUFBSixDQUFXLFlBQVgsRUFBeUIsWUFBWTtBQUNuQyxTQUFPLFVBQVVhLElBQVYsRUFBZ0I7QUFDckIsUUFBTUMsVUFBVTtBQUNkLGNBQVEsTUFETTtBQUVkLGVBQVMsT0FGSztBQUdkLG9CQUFjLFlBSEE7QUFJZCxzQkFBZ0IsY0FKRjtBQUtkLHVCQUFpQixlQUxIO0FBTWQsYUFBTyxLQU5PO0FBT2QsY0FBUTtBQVBNLEtBQWhCOztBQVVBLFdBQU9BLFFBQVFELElBQVIsQ0FBUDtBQUNELEdBWkQ7QUFhRCxDQWREOztBQWdCQWhCLElBQUlHLE1BQUosQ0FBVyxNQUFYLEVBQW1CLFlBQVc7QUFDNUIsU0FBTyxVQUFTZSxHQUFULEVBQWM7QUFDbkIsUUFBSSxRQUFPQSxHQUFQLHlDQUFPQSxHQUFQLE9BQWUsUUFBbkIsRUFBNkI7QUFDM0IsYUFBT0MsT0FBT0MsSUFBUCxDQUFZRixHQUFaLENBQVA7QUFDRDtBQUNELFdBQU8sRUFBUDtBQUNELEdBTEQ7QUFNRCxDQVBEOztBQVNBbEIsSUFBSUcsTUFBSixDQUFXLFFBQVgsRUFBcUIsWUFBVztBQUM5QixTQUFPLFVBQVNlLEdBQVQsRUFBYztBQUNuQixRQUFJLFFBQU9BLEdBQVAseUNBQU9BLEdBQVAsT0FBZSxRQUFuQixFQUE2QjtBQUMzQixVQUFJQSxlQUFlRyxLQUFuQixFQUEwQjtBQUN4QixlQUFPSCxJQUFJSSxNQUFYO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsZUFBT0gsT0FBT0MsSUFBUCxDQUFZRixHQUFaLEVBQWlCSSxNQUF4QjtBQUNEO0FBQ0YsS0FORCxNQU1PLElBQUksT0FBT0osR0FBUCxLQUFlLFFBQW5CLEVBQTZCO0FBQ2xDLGFBQU9BLElBQUlJLE1BQVg7QUFDRCxLQUZNLE1BRUEsSUFBSSxPQUFPSixHQUFQLEtBQWUsUUFBbkIsRUFBNkI7QUFDbEMsYUFBT0ssT0FBT0wsR0FBUCxFQUFZSSxNQUFuQjtBQUNEO0FBQ0QsV0FBTyxDQUFQO0FBQ0QsR0FiRDtBQWNELENBZkQ7O0FBaUJBdEIsSUFBSUcsTUFBSixDQUFXLFdBQVgsRUFBd0IsVUFBVXFCLElBQVYsRUFBZ0I7QUFDdEMsU0FBTyxVQUFVQyxLQUFWLEVBQWlCO0FBQ3BCLFdBQU9ELEtBQUtFLFdBQUwsQ0FBaUJELEtBQWpCLENBQVA7QUFDSCxHQUZEO0FBR0QsQ0FKRDs7a0JBTWV6QixHIiwiZmlsZSI6IjI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IG1vZCA9IGFuZ3VsYXIubW9kdWxlKCdwb3J0YWwuZmlsdGVycycsIFtdKTtcblxubW9kLmZpbHRlcignYnl0ZXMnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGJ5dGVzLCBwcmVjaXNpb24pIHtcbiAgICBpZiAoaXNOYU4ocGFyc2VGbG9hdChieXRlcykpIHx8ICFpc0Zpbml0ZShieXRlcykpIHJldHVybiAnLSc7XG4gICAgaWYgKHR5cGVvZiBwcmVjaXNpb24gPT09ICd1bmRlZmluZWQnKSBwcmVjaXNpb24gPSAxO1xuICAgIHZhciB1bml0cyA9IFsnYnl0ZXMnLCAna0InLCAnTUInLCAnR0InLCAnVEInLCAnUEInXTtcbiAgICB2YXIgbnVtYmVyID0gYnl0ZXMgPT09IDAgPyAwIDogTWF0aC5mbG9vcihNYXRoLmxvZyhieXRlcykgLyBNYXRoLmxvZygxMDI0KSk7XG4gICAgcmV0dXJuIChieXRlcyAvIE1hdGgucG93KDEwMjQsIE1hdGguZmxvb3IobnVtYmVyKSkpLnRvRml4ZWQocHJlY2lzaW9uKSArICAnICcgKyB1bml0c1tudW1iZXJdO1xuICB9O1xufSk7XG5cbm1vZC5maWx0ZXIoJ2FnYXZlcGVybXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocGVtcykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAnUkVBRCc6ICdSZWFkJyxcbiAgICAgICdXUklURSc6ICdXcml0ZScsXG4gICAgICAnUkVBRF9XUklURSc6ICdSZWFkL1dyaXRlJyxcbiAgICAgICdSRUFEX0VYRUNVVEUnOiAnUmVhZC9FeGVjdXRlJyxcbiAgICAgICdXUklURV9FWEVDVVRFJzogJ1dyaXRlL0V4ZWN1dGUnLFxuICAgICAgJ0FMTCc6ICdBbGwnLFxuICAgICAgJ05PTkUnOiAnbm9uZSdcbiAgICB9O1xuXG4gICAgcmV0dXJuIG9wdGlvbnNbcGVtc107XG4gIH07XG59KTtcblxubW9kLmZpbHRlcigna2V5cycsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xuICB9O1xufSk7XG5cbm1vZC5maWx0ZXIoJ2xlbmd0aCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAob2JqIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIG9iai5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGg7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gb2JqLmxlbmd0aDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJldHVybiBTdHJpbmcob2JqKS5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9O1xufSk7XG5cbm1vZC5maWx0ZXIoJ3RvVHJ1c3RlZCcsIGZ1bmN0aW9uICgkc2NlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiAkc2NlLnRydXN0QXNIdG1sKHZhbHVlKTtcbiAgfTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtb2Q7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvbmctZGVzaWduc2FmZS1maWx0ZXJzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar mod = angular.module('ng.modernizr', []);\nmod.provider('Modernizr', function () {\n  this.$get = function () {\n    return window.Modernizr || {};\n  };\n});\n\nexports.default = mod;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvbmctbW9kZXJuaXpyLmpzPzgxM2UiXSwibmFtZXMiOlsibW9kIiwiYW5ndWxhciIsIm1vZHVsZSIsInByb3ZpZGVyIiwiJGdldCIsIndpbmRvdyIsIk1vZGVybml6ciJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFJQSxNQUFNQyxRQUFRQyxNQUFSLENBQWUsY0FBZixFQUErQixFQUEvQixDQUFWO0FBQ0FGLElBQUlHLFFBQUosQ0FBYSxXQUFiLEVBQTBCLFlBQVc7QUFDbkMsT0FBS0MsSUFBTCxHQUFZLFlBQVc7QUFDckIsV0FBT0MsT0FBT0MsU0FBUCxJQUFvQixFQUEzQjtBQUNELEdBRkQ7QUFHRCxDQUpEOztrQkFNZU4sRyIsImZpbGUiOiIyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBtb2QgPSBhbmd1bGFyLm1vZHVsZSgnbmcubW9kZXJuaXpyJywgW10pO1xubW9kLnByb3ZpZGVyKCdNb2Rlcm5penInLCBmdW5jdGlvbigpIHtcbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5Nb2Rlcm5penIgfHwge307XG4gIH07XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbW9kO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcG9ydGFsL3N0YXRpYy9wb3J0YWwvc2NyaXB0cy9hbmd1bGFyL25nLW1vZGVybml6ci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _nav = __webpack_require__(28);\n\nvar _nav2 = _interopRequireDefault(_nav);\n\nvar _searchView = __webpack_require__(29);\n\nvar _searchView2 = _interopRequireDefault(_searchView);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar mod = angular.module('portal.search.controllers', []);\n\nmod.controller('NavSearchCtrl', _nav2.default);\nmod.controller('SearchViewCtrl', _searchView2.default);\n\nexports.default = mod;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvc2VhcmNoL2NvbnRyb2xsZXJzL2luZGV4LmpzP2RmZTUiXSwibmFtZXMiOlsibW9kIiwiYW5ndWxhciIsIm1vZHVsZSIsImNvbnRyb2xsZXIiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7OztBQUNBLElBQUlBLE1BQU1DLFFBQVFDLE1BQVIsQ0FBZSwyQkFBZixFQUE0QyxFQUE1QyxDQUFWOztBQUVBRixJQUFJRyxVQUFKLENBQWUsZUFBZjtBQUNBSCxJQUFJRyxVQUFKLENBQWUsZ0JBQWY7O2tCQUVlSCxHIiwiZmlsZSI6IjI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE5hdlNlYXJjaEN0cmwgZnJvbSAnLi9uYXYnO1xuaW1wb3J0IFNlYXJjaFZpZXdDdHJsIGZyb20gJy4vc2VhcmNoLXZpZXcnO1xubGV0IG1vZCA9IGFuZ3VsYXIubW9kdWxlKCdwb3J0YWwuc2VhcmNoLmNvbnRyb2xsZXJzJywgW10pO1xuXG5tb2QuY29udHJvbGxlcignTmF2U2VhcmNoQ3RybCcsIE5hdlNlYXJjaEN0cmwpO1xubW9kLmNvbnRyb2xsZXIoJ1NlYXJjaFZpZXdDdHJsJywgU2VhcmNoVmlld0N0cmwpO1xuXG5leHBvcnQgZGVmYXVsdCBtb2Q7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvc2VhcmNoL2NvbnRyb2xsZXJzL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar NavSearchCtrl = function () {\n  function NavSearchCtrl(SearchService, $window) {\n    'ngInject';\n\n    _classCallCheck(this, NavSearchCtrl);\n\n    this.SearchService = SearchService;\n    this.$window = $window;\n  }\n\n  _createClass(NavSearchCtrl, [{\n    key: 'search',\n    value: function search(text) {\n      this.$window.location.href = '/search?q=' + text;\n    }\n  }]);\n\n  return NavSearchCtrl;\n}();\n\nexports.default = NavSearchCtrl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvc2VhcmNoL2NvbnRyb2xsZXJzL25hdi5qcz84MDEwIl0sIm5hbWVzIjpbIk5hdlNlYXJjaEN0cmwiLCJTZWFyY2hTZXJ2aWNlIiwiJHdpbmRvdyIsInRleHQiLCJsb2NhdGlvbiIsImhyZWYiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFDcUJBLGE7QUFFbkIseUJBQWFDLGFBQWIsRUFBNEJDLE9BQTVCLEVBQXFDO0FBQ25DOztBQURtQzs7QUFFbkMsU0FBS0QsYUFBTCxHQUFxQkEsYUFBckI7QUFDQSxTQUFLQyxPQUFMLEdBQWVBLE9BQWY7QUFDRDs7OzsyQkFFTUMsSSxFQUFNO0FBQ1gsV0FBS0QsT0FBTCxDQUFhRSxRQUFiLENBQXNCQyxJQUF0QixHQUE2QixlQUFhRixJQUExQztBQUNEOzs7Ozs7a0JBVmtCSCxhIiwiZmlsZSI6IjI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOYXZTZWFyY2hDdHJsIHtcblxuICBjb25zdHJ1Y3RvciAoU2VhcmNoU2VydmljZSwgJHdpbmRvdykge1xuICAgICduZ0luamVjdCc7XG4gICAgdGhpcy5TZWFyY2hTZXJ2aWNlID0gU2VhcmNoU2VydmljZTtcbiAgICB0aGlzLiR3aW5kb3cgPSAkd2luZG93O1xuICB9XG5cbiAgc2VhcmNoKHRleHQpIHtcbiAgICB0aGlzLiR3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvc2VhcmNoP3E9Jyt0ZXh0O1xuICB9XG5cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BvcnRhbC9zdGF0aWMvcG9ydGFsL3NjcmlwdHMvYW5ndWxhci9zZWFyY2gvY29udHJvbGxlcnMvbmF2LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SearchViewCtrl = function () {\n  function SearchViewCtrl(SearchService, $window, $location, $state) {\n    'ngInject';\n\n    _classCallCheck(this, SearchViewCtrl);\n\n    this.SearchService = SearchService;\n    this.$window = $window;\n    this.$state = $state;\n    this.$location = $location;\n    this.query = this.$location.search();\n    this.text = this.query.q;\n    if (this.text) this.search(this.text);\n  }\n\n  _createClass(SearchViewCtrl, [{\n    key: 'search',\n    value: function search(text) {\n      var _this = this;\n\n      this.SearchService.search(text).then(function (resp) {\n        _this.results = resp;\n      });\n    }\n  }, {\n    key: 'makeUrl',\n    value: function makeUrl(listing) {\n      var url = this.$state.href('db.communityData', { systemId: listing.system, filePath: listing.path });\n      return url;\n    }\n  }]);\n\n  return SearchViewCtrl;\n}();\n\nexports.default = SearchViewCtrl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvc2VhcmNoL2NvbnRyb2xsZXJzL3NlYXJjaC12aWV3LmpzPzZmYTIiXSwibmFtZXMiOlsiU2VhcmNoVmlld0N0cmwiLCJTZWFyY2hTZXJ2aWNlIiwiJHdpbmRvdyIsIiRsb2NhdGlvbiIsIiRzdGF0ZSIsInF1ZXJ5Iiwic2VhcmNoIiwidGV4dCIsInEiLCJ0aGVuIiwicmVzcCIsInJlc3VsdHMiLCJsaXN0aW5nIiwidXJsIiwiaHJlZiIsInN5c3RlbUlkIiwic3lzdGVtIiwiZmlsZVBhdGgiLCJwYXRoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBQ3FCQSxjO0FBRW5CLDBCQUFhQyxhQUFiLEVBQTRCQyxPQUE1QixFQUFxQ0MsU0FBckMsRUFBZ0RDLE1BQWhELEVBQXdEO0FBQ3REOztBQURzRDs7QUFFdEQsU0FBS0gsYUFBTCxHQUFxQkEsYUFBckI7QUFDQSxTQUFLQyxPQUFMLEdBQWVBLE9BQWY7QUFDQSxTQUFLRSxNQUFMLEdBQWNBLE1BQWQ7QUFDQSxTQUFLRCxTQUFMLEdBQWlCQSxTQUFqQjtBQUNBLFNBQUtFLEtBQUwsR0FBYSxLQUFLRixTQUFMLENBQWVHLE1BQWYsRUFBYjtBQUNBLFNBQUtDLElBQUwsR0FBWSxLQUFLRixLQUFMLENBQVdHLENBQXZCO0FBQ0EsUUFBSSxLQUFLRCxJQUFULEVBQWUsS0FBS0QsTUFBTCxDQUFZLEtBQUtDLElBQWpCO0FBQ2hCOzs7OzJCQUVNQSxJLEVBQU07QUFBQTs7QUFDWCxXQUFLTixhQUFMLENBQW1CSyxNQUFuQixDQUEwQkMsSUFBMUIsRUFBZ0NFLElBQWhDLENBQXNDLFVBQUNDLElBQUQsRUFBVTtBQUM5QyxjQUFLQyxPQUFMLEdBQWVELElBQWY7QUFDRCxPQUZEO0FBR0Q7Ozs0QkFFT0UsTyxFQUFTO0FBQ2YsVUFBSUMsTUFBTSxLQUFLVCxNQUFMLENBQVlVLElBQVosQ0FBaUIsa0JBQWpCLEVBQXFDLEVBQUNDLFVBQVVILFFBQVFJLE1BQW5CLEVBQTJCQyxVQUFTTCxRQUFRTSxJQUE1QyxFQUFyQyxDQUFWO0FBQ0EsYUFBT0wsR0FBUDtBQUNEOzs7Ozs7a0JBdEJrQmIsYyIsImZpbGUiOiIyOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VhcmNoVmlld0N0cmwge1xuXG4gIGNvbnN0cnVjdG9yIChTZWFyY2hTZXJ2aWNlLCAkd2luZG93LCAkbG9jYXRpb24sICRzdGF0ZSkge1xuICAgICduZ0luamVjdCc7XG4gICAgdGhpcy5TZWFyY2hTZXJ2aWNlID0gU2VhcmNoU2VydmljZTtcbiAgICB0aGlzLiR3aW5kb3cgPSAkd2luZG93O1xuICAgIHRoaXMuJHN0YXRlID0gJHN0YXRlO1xuICAgIHRoaXMuJGxvY2F0aW9uID0gJGxvY2F0aW9uO1xuICAgIHRoaXMucXVlcnkgPSB0aGlzLiRsb2NhdGlvbi5zZWFyY2goKTtcbiAgICB0aGlzLnRleHQgPSB0aGlzLnF1ZXJ5LnE7XG4gICAgaWYgKHRoaXMudGV4dCkgdGhpcy5zZWFyY2godGhpcy50ZXh0KTtcbiAgfVxuXG4gIHNlYXJjaCh0ZXh0KSB7XG4gICAgdGhpcy5TZWFyY2hTZXJ2aWNlLnNlYXJjaCh0ZXh0KS50aGVuKCAocmVzcCkgPT4ge1xuICAgICAgdGhpcy5yZXN1bHRzID0gcmVzcDtcbiAgICB9KTtcbiAgfVxuXG4gIG1ha2VVcmwobGlzdGluZykge1xuICAgIGxldCB1cmwgPSB0aGlzLiRzdGF0ZS5ocmVmKCdkYi5jb21tdW5pdHlEYXRhJywge3N5c3RlbUlkOiBsaXN0aW5nLnN5c3RlbSwgZmlsZVBhdGg6bGlzdGluZy5wYXRofSk7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvc2VhcmNoL2NvbnRyb2xsZXJzL3NlYXJjaC12aWV3LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _searchResult = __webpack_require__(31);\n\nvar _searchResult2 = _interopRequireDefault(_searchResult);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar mod = angular.module('portal.search.directives', []);\nconsole.log(_searchResult2.default);\n\nmod.directive('searchResult', _searchResult2.default);\n\nexports.default = mod;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvc2VhcmNoL2RpcmVjdGl2ZXMvaW5kZXguanM/MWY1MCJdLCJuYW1lcyI6WyJtb2QiLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uc29sZSIsImxvZyIsImRpcmVjdGl2ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7OztBQUNBLElBQUlBLE1BQU1DLFFBQVFDLE1BQVIsQ0FBZSwwQkFBZixFQUEyQyxFQUEzQyxDQUFWO0FBQ0FDLFFBQVFDLEdBQVI7O0FBRUFKLElBQUlLLFNBQUosQ0FBYyxjQUFkOztrQkFFZUwsRyIsImZpbGUiOiIzMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzZWFyY2hSZXN1bHQgZnJvbSAnLi9zZWFyY2gtcmVzdWx0JztcbmxldCBtb2QgPSBhbmd1bGFyLm1vZHVsZSgncG9ydGFsLnNlYXJjaC5kaXJlY3RpdmVzJywgW10pO1xuY29uc29sZS5sb2coc2VhcmNoUmVzdWx0KVxuXG5tb2QuZGlyZWN0aXZlKCdzZWFyY2hSZXN1bHQnLCBzZWFyY2hSZXN1bHQpO1xuXG5leHBvcnQgZGVmYXVsdCBtb2Q7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvc2VhcmNoL2RpcmVjdGl2ZXMvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = searchResult;\nfunction searchResult() {\n  return {\n    restrict: 'E',\n    scope: {\n      listing: '=data',\n      click: '&click',\n      makeUrl: '&makeUrl'\n    },\n    templateUrl: '/static/portal/scripts/angular/search/templates/search-result.html',\n    link: function link($scope, elem, attrs) {\n      $scope.onClick = function (listing) {\n        $scope.click(listing);\n      };\n\n      $scope.url = function (listing) {\n        return $scope.makeUrl(listing);\n      };\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvc2VhcmNoL2RpcmVjdGl2ZXMvc2VhcmNoLXJlc3VsdC5qcz9mMDk0Il0sIm5hbWVzIjpbInNlYXJjaFJlc3VsdCIsInJlc3RyaWN0Iiwic2NvcGUiLCJsaXN0aW5nIiwiY2xpY2siLCJtYWtlVXJsIiwidGVtcGxhdGVVcmwiLCJsaW5rIiwiJHNjb3BlIiwiZWxlbSIsImF0dHJzIiwib25DbGljayIsInVybCJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBQXdCQSxZO0FBQVQsU0FBU0EsWUFBVCxHQUF3QjtBQUNuQyxTQUFPO0FBQ0xDLGNBQVUsR0FETDtBQUVMQyxXQUFPO0FBQ0xDLGVBQVMsT0FESjtBQUVMQyxhQUFPLFFBRkY7QUFHTEMsZUFBUztBQUhKLEtBRkY7QUFPTEMsaUJBQWEsb0VBUFI7QUFRTEMsVUFBTSxjQUFVQyxNQUFWLEVBQWtCQyxJQUFsQixFQUF3QkMsS0FBeEIsRUFBK0I7QUFDbkNGLGFBQU9HLE9BQVAsR0FBaUIsVUFBVVIsT0FBVixFQUFtQjtBQUNsQ0ssZUFBT0osS0FBUCxDQUFhRCxPQUFiO0FBQ0QsT0FGRDs7QUFJQUssYUFBT0ksR0FBUCxHQUFhLFVBQVVULE9BQVYsRUFBbUI7QUFDOUIsZUFBT0ssT0FBT0gsT0FBUCxDQUFlRixPQUFmLENBQVA7QUFDRCxPQUZEO0FBR0Q7QUFoQkksR0FBUDtBQWtCSCIsImZpbGUiOiIzMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNlYXJjaFJlc3VsdCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGxpc3Rpbmc6ICc9ZGF0YScsXG4gICAgICAgIGNsaWNrOiAnJmNsaWNrJyxcbiAgICAgICAgbWFrZVVybDogJyZtYWtlVXJsJ1xuICAgICAgfSxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL3N0YXRpYy9wb3J0YWwvc2NyaXB0cy9hbmd1bGFyL3NlYXJjaC90ZW1wbGF0ZXMvc2VhcmNoLXJlc3VsdC5odG1sJyxcbiAgICAgIGxpbms6IGZ1bmN0aW9uICgkc2NvcGUsIGVsZW0sIGF0dHJzKSB7XG4gICAgICAgICRzY29wZS5vbkNsaWNrID0gZnVuY3Rpb24gKGxpc3RpbmcpIHtcbiAgICAgICAgICAkc2NvcGUuY2xpY2sobGlzdGluZyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnVybCA9IGZ1bmN0aW9uIChsaXN0aW5nKSB7XG4gICAgICAgICAgcmV0dXJuICRzY29wZS5tYWtlVXJsKGxpc3RpbmcpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvc2VhcmNoL2RpcmVjdGl2ZXMvc2VhcmNoLXJlc3VsdC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _services = __webpack_require__(33);\n\nvar _controllers = __webpack_require__(27);\n\nvar _directives = __webpack_require__(30);\n\nvar mod = angular.module('portal.search', ['portal.search.services', 'portal.search.controllers', 'portal.search.directives']);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvc2VhcmNoL2luZGV4LmpzP2NhNTciXSwibmFtZXMiOlsibW9kIiwiYW5ndWxhciIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQSxJQUFJQSxNQUFNQyxRQUFRQyxNQUFSLENBQWUsZUFBZixFQUFnQyxDQUN4Qyx3QkFEd0MsRUFFeEMsMkJBRndDLEVBR3hDLDBCQUh3QyxDQUFoQyxDQUFWIiwiZmlsZSI6IjMyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHttb2QgYXMgc2VydmljZXN9IGZyb20gJy4vc2VydmljZXMnO1xuaW1wb3J0IHttb2QgYXMgY29udHJvbGxlcnN9IGZyb20gJy4vY29udHJvbGxlcnMnO1xuaW1wb3J0IHttb2QgYXMgZGlyZWN0aXZlc30gZnJvbSAnLi9kaXJlY3RpdmVzJ1xuXG5sZXQgbW9kID0gYW5ndWxhci5tb2R1bGUoJ3BvcnRhbC5zZWFyY2gnLCBbXG4gICdwb3J0YWwuc2VhcmNoLnNlcnZpY2VzJyxcbiAgJ3BvcnRhbC5zZWFyY2guY29udHJvbGxlcnMnLFxuICAncG9ydGFsLnNlYXJjaC5kaXJlY3RpdmVzJ1xuXSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvc2VhcmNoL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///32\n");

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _searchService = __webpack_require__(34);\n\nvar _searchService2 = _interopRequireDefault(_searchService);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar mod = angular.module('portal.search.services', []);\n\nmod.service('SearchService', _searchService2.default);\n\nexports.default = mod;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvc2VhcmNoL3NlcnZpY2VzL2luZGV4LmpzP2IzMzciXSwibmFtZXMiOlsibW9kIiwiYW5ndWxhciIsIm1vZHVsZSIsInNlcnZpY2UiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7Ozs7QUFDQSxJQUFJQSxNQUFNQyxRQUFRQyxNQUFSLENBQWUsd0JBQWYsRUFBeUMsRUFBekMsQ0FBVjs7QUFFQUYsSUFBSUcsT0FBSixDQUFZLGVBQVo7O2tCQUVlSCxHIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNlYXJjaFNlcnZpY2UgZnJvbSAnLi9zZWFyY2gtc2VydmljZSc7XG5sZXQgbW9kID0gYW5ndWxhci5tb2R1bGUoJ3BvcnRhbC5zZWFyY2guc2VydmljZXMnLCBbXSk7XG5cbm1vZC5zZXJ2aWNlKCdTZWFyY2hTZXJ2aWNlJywgU2VhcmNoU2VydmljZSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1vZDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BvcnRhbC9zdGF0aWMvcG9ydGFsL3NjcmlwdHMvYW5ndWxhci9zZWFyY2gvc2VydmljZXMvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///33\n");

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SearchService = function () {\n  function SearchService($http) {\n    'ngInject';\n\n    _classCallCheck(this, SearchService);\n\n    this.$http = $http;\n  }\n\n  _createClass(SearchService, [{\n    key: 'search',\n    value: function search(text) {\n      return this.$http.get('/api/search/', { q: text }).then(function (resp) {\n        resp.data.response.forEach(function (d) {\n          d.lastModified = new Date(d.lastModified);\n        });\n        return resp.data.response;\n      });\n    }\n  }]);\n\n  return SearchService;\n}();\n\nexports.default = SearchService;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvc2VhcmNoL3NlcnZpY2VzL3NlYXJjaC1zZXJ2aWNlLmpzPzg3OTIiXSwibmFtZXMiOlsiU2VhcmNoU2VydmljZSIsIiRodHRwIiwidGV4dCIsImdldCIsInEiLCJ0aGVuIiwicmVzcCIsImRhdGEiLCJyZXNwb25zZSIsImZvckVhY2giLCJkIiwibGFzdE1vZGlmaWVkIiwiRGF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUNxQkEsYTtBQUVuQix5QkFBWUMsS0FBWixFQUFtQjtBQUNqQjs7QUFEaUI7O0FBRWpCLFNBQUtBLEtBQUwsR0FBYUEsS0FBYjtBQUNEOzs7OzJCQUVNQyxJLEVBQU07QUFDWCxhQUFPLEtBQUtELEtBQUwsQ0FBV0UsR0FBWCxDQUFlLGNBQWYsRUFBK0IsRUFBQ0MsR0FBR0YsSUFBSixFQUEvQixFQUEwQ0csSUFBMUMsQ0FBZ0QsVUFBQ0MsSUFBRCxFQUFRO0FBQzdEQSxhQUFLQyxJQUFMLENBQVVDLFFBQVYsQ0FBbUJDLE9BQW5CLENBQTJCLFVBQUNDLENBQUQsRUFBTztBQUNoQ0EsWUFBRUMsWUFBRixHQUFpQixJQUFJQyxJQUFKLENBQVNGLEVBQUVDLFlBQVgsQ0FBakI7QUFDRCxTQUZEO0FBR0EsZUFBT0wsS0FBS0MsSUFBTCxDQUFVQyxRQUFqQjtBQUNELE9BTE0sQ0FBUDtBQU1EOzs7Ozs7a0JBZGtCUixhIiwiZmlsZSI6IjM0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2hTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcigkaHR0cCkge1xuICAgICduZ0luamVjdCc7XG4gICAgdGhpcy4kaHR0cCA9ICRodHRwO1xuICB9XG5cbiAgc2VhcmNoKHRleHQpIHtcbiAgICByZXR1cm4gdGhpcy4kaHR0cC5nZXQoJy9hcGkvc2VhcmNoLycsIHtxOiB0ZXh0fSkudGhlbiggKHJlc3ApPT57XG4gICAgICByZXNwLmRhdGEucmVzcG9uc2UuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBkLmxhc3RNb2RpZmllZCA9IG5ldyBEYXRlKGQubGFzdE1vZGlmaWVkKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3AuZGF0YS5yZXNwb25zZTtcbiAgICB9KTtcbiAgfVxuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvc2VhcmNoL3NlcnZpY2VzL3NlYXJjaC1zZXJ2aWNlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///34\n");

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n\nfunction ApplicationFormCtrl($scope, $rootScope, $localStorage, $location, $anchorScroll, $translate, Apps, Jobs, SystemsService, Systems) {\n  \"ngInject\";\n\n  $localStorage.systemChecks = {};\n\n  $scope.data = {\n    messages: [],\n    submitting: false,\n    needsLicense: false,\n    app: null,\n    form: {}\n  };\n\n  $scope.$on('launch-app', function (e, app) {\n    $scope.error = '';\n\n    if ($scope.data.app) {\n      $rootScope.$broadcast('close-app', $scope.data.app.id);\n    }\n\n    if (app.value.type === 'agave') {\n      $scope.data.type = app.value.type;\n      Apps.get(app.value.definition.id).then(function (resp) {\n        // check app execution system\n        // Systems.getMonitor(resp.data.response.executionSystem)\n        //   .then(\n        //     function(response){\n        //       if (response.data.response.length > 0){\n        //           // perform check only when monitor is active\n        //           if (response.data[0].active){\n        //             if (response.data[0].lastSuccess !== null){\n        //               var currentDate = new Date();\n        //               var monitorLastSuccessDate = Date.parse(response.data[0].lastSuccess);\n        //               var diff = Math.abs((currentDate - monitorLastSuccessDate) / 60000);\n        //\n        //               if (diff > response.data[0].frequency){\n        //                 toastr.warning($translate.instant('error_system_monitor'));\n        //               }\n        //             } else {\n        //               toastr.warning($translate.instant('error_system_monitor'));\n        //             }\n        //         }\n        //       }\n        //     });\n\n        $scope.data.app = resp.data.response;\n        $scope.resetForm();\n      });\n    } else if (app.value.type === 'html') {\n      Apps.getMeta(app.value.definition.id).then(function (resp) {\n        if (resp.data.length > 0) {\n          $scope.data.type = app.value.type;\n          $scope.data.app = resp.data.response[0].value.definition.html;\n        }\n      });\n    }\n  });\n\n  $scope.resetForm = function () {\n    $scope.data.needsLicense = $scope.data.app.license.type && !$scope.data.app.license.enabled;\n    $scope.form = { model: {}, readonly: $scope.data.needsLicense };\n    $scope.form.schema = Apps.formSchema($scope.data.app);\n    $scope.form.form = [];\n\n    /* inputs */\n    var items = [];\n    if ($scope.form.schema.properties.inputs) {\n      items.push('inputs');\n    }\n    if ($scope.form.schema.properties.parameters) {\n      items.push('parameters');\n    }\n    $scope.form.form.push({\n      type: 'fieldset',\n      readonly: $scope.data.needsLicense,\n      title: 'Inputs',\n      items: items\n    });\n\n    /* job details */\n    $scope.form.form.push({\n      type: 'fieldset',\n      readonly: $scope.data.needsLicense,\n      title: 'Job details',\n      items: ['requestedTime', 'name', 'archivePath']\n    });\n\n    /* buttons */\n    items = [];\n    if (!$scope.data.needsLicense) {\n      items.push({ type: 'submit', title: 'Run', style: 'btn-primary' });\n    }\n    items.push({ type: 'button', title: 'Close', style: 'btn-link', onClick: 'closeApp()' });\n    $scope.form.form.push({\n      type: 'actions',\n      items: items\n    });\n  };\n\n  $scope.onSubmit = function (form) {\n    $scope.data.messages = [];\n    $scope.$broadcast('schemaFormValidate');\n    if (form.$valid) {\n      var jobData = {\n        appId: $scope.data.app.id,\n        archive: true,\n        inputs: {},\n        parameters: {}\n      };\n\n      /* copy form model to disconnect from $scope */\n      _.extend(jobData, angular.copy($scope.form.model));\n\n      /* remove falsy input/parameter */\n      _.each(jobData.inputs, function (v, k) {\n        if (_.isArray(v)) {\n          v = _.compact(v);\n          if (v.length === 0) {\n            delete jobData.inputs[k];\n          }\n        }\n      });\n      _.each(jobData.parameters, function (v, k) {\n        if (_.isArray(v)) {\n          v = _.compact(v);\n          if (v.length === 0) {\n            delete jobData.parameters[k];\n          }\n        }\n      });\n\n      $scope.data.submitting = true;\n      Jobs.submit(jobData).then(function (resp) {\n        $scope.data.submitting = false;\n        $rootScope.$broadcast('job-submitted', resp.data.response);\n        $scope.data.messages.push({\n          type: 'success',\n          header: 'Job Submitted Successfully',\n          body: 'Your job <em>' + resp.data.name + '</em> has been submitted. Monitor its status on the right.'\n        });\n        $scope.resetForm();\n        refocus();\n      }, function (err) {\n        $scope.data.submitting = false;\n        $scope.data.messages.push({\n          type: 'danger',\n          header: 'Job Submit Failed',\n          body: 'Your job submission failed with the following message:<br>' + '<em>' + (err.data.message || 'Unexpected error') + '</em><br>' + 'Please try again. If this problem persists, please ' + '<a href=\"/help\" target=\"_blank\">submit a support ticket</a>.'\n        });\n        refocus();\n      });\n    }\n  };\n\n  function refocus() {\n    $location.hash('workspace');\n    $anchorScroll();\n  }\n\n  function closeApp() {\n    $scope.data.app = null;\n    $scope.data.appLicenseEnabled = false;\n  }\n\n  $scope.$on('close-app', closeApp);\n\n  $scope.closeApp = function () {\n    $rootScope.$broadcast('close-app', $scope.data.app.id);\n    closeApp();\n  };\n};\n\nexports.default = ApplicationFormCtrl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///35\n");

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction ApplicationTrayCtrl($location, $scope, $rootScope, $q, $timeout, $uibModal, $state, $stateParams, $translate, Apps, SimpleList, MultipleList, Notifications) {\n  'ngInject';\n\n  $scope.tabs = [];\n\n  $scope.simpleList = new SimpleList();\n\n  $scope.addDefaultTabs = function (query) {\n    $scope.error = '';\n    var self = this;\n    var deferred = $q.defer();\n\n    $scope.simpleList.getDefaultLists(query).then(function (response) {\n      deferred.resolve(response);\n    }).catch(function (response) {\n      $scope.error = $translate.instant('error_tab_get') + response.data;\n      deferred.reject(response);\n    });\n    return deferred.promise;\n  };\n\n  $scope.addUserTabs = function (query, active) {\n    $scope.error = '';\n    var self = this;\n    var deferred = $q.defer();\n    var query = { 'name': $translate.instant('apps_metadata_list_name') };\n\n    $scope.simpleList.getUserLists(query).then(function (response) {\n      deferred.resolve(response);\n    }).catch(function (response) {\n      $scope.error = $translate.instant('error_tab_get') + response.data;\n      deferred.reject(response);\n    });;\n\n    return deferred.promise;\n  };\n\n  $scope.data = {\n    activeApp: null,\n    publicOnly: false,\n    type: null\n  };\n\n  function closeApp(label) {\n    $rootScope.$broadcast('close-app', label);\n    $scope.data.activeApp = null;\n  }\n\n  $scope.$on('close-app', function (e, label) {\n    if ($scope.data.activeApp && $scope.data.activeApp.label === label) {\n      $scope.data.activeApp = null;\n    }\n  });\n\n  $scope.refreshApps = function () {\n    $scope.error = '';\n    $scope.requesting = true;\n    $scope.tabs = [];\n\n    if ($stateParams.appId) {\n      Apps.getMeta($stateParams.appId).then(function (response) {\n        if (response.data.length > 0) {\n          if (response.data[0].value.definition.available) {\n            $scope.launchApp(response.data[0]);\n          } else {\n            toastr.warning($translate.instant('error_app_disabled'));\n          }\n        } else {\n          toastr.warning($translate.instant('error_app_run'));\n        }\n      }, function (response) {\n        toastr.warning($translate.instant('error_app_run'));\n      });\n    }\n\n    $scope.addDefaultTabs({ 'name': $translate.instant('apps_metadata_name') }).then(function () {\n      var deferred = $q.defer();\n\n      $scope.addUserTabs({ 'name': $translate.instant('apps_metadata_list_name') }).then(function (response) {\n        deferred.resolve(response);\n      });\n\n      return deferred.promise;\n    }).then(function (response) {\n      $scope.tabs.push({\n        title: 'Private',\n        content: $scope.simpleList.lists['Private']\n      });\n\n      $scope.tabs.push({\n        title: 'Public',\n        content: $scope.simpleList.lists['Public']\n      });\n\n      angular.forEach($scope.simpleList.lists, function (list, key) {\n        if (key !== 'Public' && key !== 'Private') {\n          $scope.tabs.push({\n            title: key,\n            content: list\n          });\n        }\n      });\n\n      $scope.requesting = false;\n    });\n  };\n\n  $scope.refreshApps();\n\n  $scope.launchApp = function (app) {\n    $state.go('tray', { appId: app.value.definition.id }, { notify: false });\n\n    if (!$scope.data.activeApp || $scope.data.activeApp.value.definition.id !== app.value.definition.id) {\n      $scope.data.activeApp = app;\n      $rootScope.$broadcast('launch-app', app);\n    }\n  };\n};\n\nexports.default = ApplicationTrayCtrl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///36\n");

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction DataBrowserCtrl($scope, $controller, $rootScope, SystemsService, DataBrowserService, ProjectService) {\n  'ngInject';\n\n  $controller('WorkspacePanelCtrl', { $scope: $scope });\n\n  if ($(window).width() < 992) {\n    $scope.panel.collapsed = true;\n  }\n\n  $scope.data = {\n    loading: false,\n    wants: null,\n    systemList: [],\n    filesListing: null,\n    system: null,\n    dirPath: [],\n    filePath: '',\n    loadingMore: false,\n    reachedEnd: false,\n    page: 0\n  };\n\n  SystemsService.listing().then(function (data) {\n    var mydata_system = _.find(data, { name: 'My Data' });\n    var comdata_system = _.find(data, { name: 'Community Data' });\n    $scope.data.options = [{ label: 'My Data',\n      conf: { system: mydata_system.systemId, path: '' },\n      apiParams: { fileMgr: 'my-data', baseUrl: '/api/data-depot/files' } }, { label: 'Community Data',\n      conf: { system: comdata_system.systemId, path: '' },\n      apiParams: { fileMgr: 'shared', baseUrl: '/api/data-depot/files' } }, { label: 'My Projects',\n      conf: { system: 'projects', path: '' },\n      apiParams: { fileMgr: 'shared', baseUrl: '/api/data-depot/files' } }];\n    $scope.data.cOption = $scope.data.options[0];\n    $scope.dataSourceUpdated();\n  });\n\n  $scope.dataSourceUpdated = function dataSourceUpdated() {\n    $scope.data.busy = true;\n    DataBrowserService.apiParams.fileMgr = $scope.data.cOption.apiParams.fileMgr;\n    DataBrowserService.apiParams.baseUrl = $scope.data.cOption.apiParams.baseUrl;\n    if ($scope.data.cOption.label !== 'My Projects') {\n      $scope.data.listingProjects = false;\n      $scope.data.project = null;\n      DataBrowserService.browse($scope.data.cOption.conf).then(function (listing) {\n        $scope.data.filesListing = listing;\n        if ($scope.data.filesListing.children.length > 0) {\n          $scope.data.filePath = $scope.data.filesListing.path;\n          $scope.data.dirPath = $scope.data.filePath.split('/');\n        }\n        $scope.data.loading = false;\n      }, function (err) {\n        $scope.data.error = 'Unable to list the selected data source: ' + err.statusText;\n        $scope.data.loading = false;\n      });\n    } else {\n      $scope.data.listingProjects = true;\n      ProjectService.list().then(function (projects) {\n        $scope.data.projects = projects;\n        $scope.data.loading = false;\n      });\n    }\n\n    $scope.data.filesListing = null;\n    $scope.data.loading = true;\n    $scope.data.filePath = '';\n    $scope.data.dirPath = [];\n    // DataBrowserService.apiParams.fileMgr = $scope.data.system.fileMgr;\n    // DataBrowserService.apiParams.baseUrl = '/api/data-depot/files';\n  };\n\n  $scope.scrollToTop = function () {\n    return;\n  };\n\n  $scope.scrollToBottom = function () {\n    if ($scope.data.loadingMore || $scope.data.reachedEnd) {\n      return;\n    }\n    $scope.data.loadingMore = true;\n    if ($scope.data.filesListing && $scope.data.filesListing.children && $scope.data.filesListing.children.length < 95) {\n      $scope.data.reachedEnd = true;\n      return;\n    }\n    $scope.data.page += 1;\n    $scope.data.loadingMore = true;\n    DataBrowserService.browsePage({ system: $scope.data.filesListing.system,\n      path: $scope.data.filesListing.path,\n      page: $scope.data.page }).then(function (listing) {\n      $scope.data.filesListing = listing;\n      $scope.data.filePath = $scope.data.filesListing.path;\n      $scope.data.dirPath = $scope.data.filePath.split('/');\n      $scope.data.loadingMore = false;\n      if (listing.children.length < 95) {\n        $scope.data.reachedEnd = true;\n      }\n      $scope.data.loading = false;\n    }, function (err) {\n      $scope.data.loadingMore = false;\n      $scope.data.reachedEnd = true;\n      $scope.data.loading = false;\n    });\n  };\n\n  $scope.browseTrail = function ($event, index) {\n    $event.stopPropagation();\n    $event.preventDefault();\n    if ($scope.data.dirPath.length <= index + 1) {\n      return;\n    }\n    $scope.browseFile({ type: 'dir',\n      system: $scope.data.filesListing.system,\n      resource: $scope.data.filesListing.resource,\n      path: $scope.data.dirPath.slice(0, index + 1).join('/') });\n  };\n\n  $scope.selectProject = function (project) {\n    $scope.data.project = project;\n    DataBrowserService.apiParams.fileMgr = 'shared';\n    DataBrowserService.apiParams.baseUrl = '/api/data-depot/files';\n    $scope.data.loading = true;\n    DataBrowserService.browse({ system: project.id, path: '' }).then(function (listing) {\n      $scope.data.listingProjects = false;\n      $scope.data.loading = false;\n      $scope.data.filesListing = listing;\n    });\n  };\n\n  $scope.browseFile = function (file) {\n    if (file.type !== 'folder' && file.type !== 'dir') {\n      return;\n    }\n    $scope.data.filesListing = null;\n    $scope.data.loading = true;\n    DataBrowserService.browse(file).then(function (listing) {\n      $scope.data.filesListing = listing;\n      if ($scope.data.filesListing.children.length > 0) {\n        $scope.data.filePath = $scope.data.filesListing.path;\n        $scope.data.dirPath = $scope.data.filePath.split('/');\n        $scope.browser.listing = $scope.data.filesListing;\n      }\n      $scope.data.loading = false;\n    }, function (err) {\n      logger.log(err);\n      $scope.data.error = 'Unable to list the selected data source: ' + error.statusText;\n      $scope.data.loading = false;\n    });\n  };\n\n  $scope.chooseFile = function (file) {\n    if ($scope.data.wants) {\n      $rootScope.$broadcast('provides-file', { requestKey: $scope.data.wants.requestKey, file: file });\n    }\n  };\n\n  $rootScope.$on('wants-file', function ($event, wantArgs) {\n    $scope.data.wants = wantArgs;\n    if ($scope.panel.collapsed) {\n      $scope.data.wants.wasCollapsed = true;\n      $scope.panel.collapsed = false;\n    }\n  });\n\n  $rootScope.$on('cancel-wants-file', function ($event, args) {\n    if ($scope.data.wants && $scope.data.wants.requestKey === args.requestKey) {\n      if ($scope.data.wants.wasCollapsed) {\n        $scope.panel.collapsed = true;\n      }\n      $scope.data.wants = null;\n    }\n  });\n}\n\nexports.default = DataBrowserCtrl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///37\n");

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _applicationForm = __webpack_require__(35);\n\nvar _applicationForm2 = _interopRequireDefault(_applicationForm);\n\nvar _applicationTray = __webpack_require__(36);\n\nvar _applicationTray2 = _interopRequireDefault(_applicationTray);\n\nvar _dataBrowser = __webpack_require__(37);\n\nvar _dataBrowser2 = _interopRequireDefault(_dataBrowser);\n\nvar _jobsStatus = __webpack_require__(39);\n\nvar _workspacePanel = __webpack_require__(40);\n\nvar _workspacePanel2 = _interopRequireDefault(_workspacePanel);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar mod = angular.module('portal.workspace.controllers', []);\n\nmod.controller('ApplicationFormCtrl', _applicationForm2.default);\nmod.controller('ApplicationTrayCtrl', _applicationTray2.default);\nmod.controller('DataBrowserCtrl', _dataBrowser2.default);\nmod.controller('JobDetailsModalCtrl', _jobsStatus.JobDetailsModalCtrl);\nmod.controller('WorkspacePanelCtrl', _workspacePanel2.default);\nmod.controller('JobsStatusCtrl', _jobsStatus.JobsStatusCtrl);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvd29ya3NwYWNlL2NvbnRyb2xsZXJzL2luZGV4LmpzP2I3NDAiXSwibmFtZXMiOlsibW9kIiwiYW5ndWxhciIsIm1vZHVsZSIsImNvbnRyb2xsZXIiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7O0FBRUE7Ozs7OztBQUdBLElBQUlBLE1BQU1DLFFBQVFDLE1BQVIsQ0FBZSw4QkFBZixFQUErQyxFQUEvQyxDQUFWOztBQUVBRixJQUFJRyxVQUFKLENBQWUscUJBQWY7QUFDQUgsSUFBSUcsVUFBSixDQUFlLHFCQUFmO0FBQ0FILElBQUlHLFVBQUosQ0FBZSxpQkFBZjtBQUNBSCxJQUFJRyxVQUFKLENBQWUscUJBQWY7QUFDQUgsSUFBSUcsVUFBSixDQUFlLG9CQUFmO0FBQ0FILElBQUlHLFVBQUosQ0FBZSxnQkFBZiIsImZpbGUiOiIzOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBcHBsaWNhdGlvbkZvcm1DdHJsIGZyb20gJy4vYXBwbGljYXRpb24tZm9ybSc7XG5pbXBvcnQgQXBwbGljYXRpb25UcmF5Q3RybCBmcm9tICcuL2FwcGxpY2F0aW9uLXRyYXknO1xuaW1wb3J0IERhdGFCcm93c2VyQ3RybCBmcm9tICcuL2RhdGEtYnJvd3Nlcic7XG5pbXBvcnQge0pvYnNTdGF0dXNDdHJsfSBmcm9tICcuL2pvYnMtc3RhdHVzJztcbmltcG9ydCB7Sm9iRGV0YWlsc01vZGFsQ3RybH0gZnJvbSAnLi9qb2JzLXN0YXR1cyc7XG5pbXBvcnQgV29ya3NwYWNlUGFuZWxDdHJsIGZyb20gJy4vd29ya3NwYWNlLXBhbmVsJztcblxuXG5sZXQgbW9kID0gYW5ndWxhci5tb2R1bGUoJ3BvcnRhbC53b3Jrc3BhY2UuY29udHJvbGxlcnMnLCBbXSk7XG5cbm1vZC5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkZvcm1DdHJsJywgQXBwbGljYXRpb25Gb3JtQ3RybCk7XG5tb2QuY29udHJvbGxlcignQXBwbGljYXRpb25UcmF5Q3RybCcsIEFwcGxpY2F0aW9uVHJheUN0cmwpO1xubW9kLmNvbnRyb2xsZXIoJ0RhdGFCcm93c2VyQ3RybCcsIERhdGFCcm93c2VyQ3RybCk7XG5tb2QuY29udHJvbGxlcignSm9iRGV0YWlsc01vZGFsQ3RybCcsIEpvYkRldGFpbHNNb2RhbEN0cmwpO1xubW9kLmNvbnRyb2xsZXIoJ1dvcmtzcGFjZVBhbmVsQ3RybCcsIFdvcmtzcGFjZVBhbmVsQ3RybCk7XG5tb2QuY29udHJvbGxlcignSm9ic1N0YXR1c0N0cmwnLCBKb2JzU3RhdHVzQ3RybCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvd29ya3NwYWNlL2NvbnRyb2xsZXJzL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///38\n");

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction JobsStatusCtrl($scope, $controller, $rootScope, $uibModal, Jobs) {\n  'ngInject';\n  // NotificationService.processors.vnc = {\n  //   'process': function notifyProcessor(msg){\n  //     if('event_type' in msg && msg.event_type === 'VNC') {\n  //       $uibModal.open({\n  //         templateUrl: 'local/vncjob-details-modal.html',\n  //         controller: 'VNCJobDetailsModalCtrl',\n  //         scope: $scope,\n  //         resolve: {\n  //           msg: msg\n  //         }\n  //       });\n  //     }\n  //     else {\n  //       for (var i=0; i < $scope.data.jobs.length; i++){\n  //           if ($scope.data.jobs[i]['id'] == msg.extra.id) {\n  //             $scope.data.jobs[i]['status'] = msg.extra.status;\n  //             $scope.$apply();\n  //             break;\n  //           }\n  //       }\n  //     }\n  //     return msg.extra;\n  //   },\n  //   // 'renderLink': function renderLink(msg){\n  //   //   logger.log('rendering link: ', msg);\n  //   //   return msg.extra['target_path'] // this will only be present when indexing is complete\n  //   // }\n  // };\n\n  $controller('WorkspacePanelCtrl', { $scope: $scope });\n  $scope.data = {\n    hasMoreJobs: true,\n    limit: 10\n  };\n\n  $scope.jobDetails = function (job) {\n    Jobs.get(job.id).then(function (resp) {\n      $scope.data.interactive = false;\n      if (resp.status === 'RUNNING' && resp._embedded.metadata) {\n        for (var i = 0; i < resp._embedded.metadata.length; i++) {\n          if (resp._embedded.metadata[i].name === 'interactiveJobDetails') {\n            var meta = resp._embedded.metadata[i];\n            $scope.data.interactive = true;\n            $scope.data.connection_address = meta.value.extra.target_uri;\n            break;\n          }\n        }\n      }\n\n      $uibModal.open({\n        templateUrl: '/static/portal/scripts/angular/workspace/templates/job-details-modal.html',\n        controller: 'JobDetailsModalCtrl',\n        scope: $scope,\n        resolve: {\n          job: resp\n        }\n      });\n    });\n  };\n\n  $scope.refresh = function () {\n    $scope.data.loading = true;\n    Jobs.list({ limit: $scope.data.limit }).then(function (resp) {\n      $scope.data.loading = false;\n      $scope.data.jobs = resp;\n    });\n  };\n  $scope.refresh();\n\n  $scope.loadMore = function () {\n    $scope.data.limit += 10;\n    $scope.refresh();\n  };\n\n  $scope.$on('job-submitted', function (e, data) {\n    $scope.refresh();\n  });\n\n  $scope.$on('jobs-refresh', function (e, data) {\n    $scope.refresh();\n  });\n\n  /*\n   * Receives the webhook notification from the vnc-type job and opens the\n   * modal dialog in the workspace letting the user know their job is ready\n   * to connect to.\n   */\n  // $scope.$on('ds.wsBus:default', function update_job(e, msg){\n  // $scope.$on('ds.wsBus:notify', function update_job(e, msg){\n  //   if('event_type' in msg && msg.event_type === 'VNC') {\n  //     $uibModal.open({\n  //       templateUrl: 'local/vncjob-details-modal.html',\n  //       controller: 'VNCJobDetailsModalCtrl',\n  //       scope: $scope,\n  //       resolve: {\n  //         msg: msg\n  //       }\n  //     });\n  //   }\n  //   else {\n  //     for (var i=0; i < $scope.data.jobs.length; i++){\n  //         if ($scope.data.jobs[i]['id'] == msg.extra.id) {\n  //           $scope.data.jobs[i]['status'] = msg.extra.status;\n  //           $scope.$apply();\n  //           break;\n  //         }\n  //     }\n  //   }\n  // });\n\n};\n\nfunction JobDetailsModalCtrl($scope, $uibModalInstance, $http, Jobs, job) {\n  'ngInject';\n\n  $scope.job = job;\n  console.log(job);\n\n  $scope.dismiss = function () {\n    $uibModalInstance.dismiss('cancel');\n  };\n\n  $scope.deleteJob = function () {\n    logger.log('deleteJob button clicked with jobId=', job.id);\n    $http.delete('/api/workspace/jobs/', {\n      params: { 'job_id': job.id }\n    }).then(function (response) {\n      $uibModalInstance.dismiss('cancel');\n      $scope.$parent.$broadcast('jobs-refresh');\n    }, function (error) {\n      logger.log('nope!', error); //todo make error handling UI\n    });\n  };\n\n  $scope.cancelJob = function () {\n    logger.log('cancelJob button clicked with jobId=', job.id);\n    $http.post('/api/workspace/jobs/', {\n      'job_id': job.id, params: { 'job_id': job.id, 'action': 'cancel', 'body': '{\"action\":\"stop\"}' }\n    }).then(function (response) {\n      $uibModalInstance.dismiss('cancel');\n      $scope.$parent.$broadcast('jobs-refresh');\n    }, function (error) {\n      logger.log('nope!', error); //todo make error handling UI\n    });\n  };\n};\n\nfunction VNCJobDetailsModalCtrl($scope, $uibModalInstance, msg) {\n  'ngInject';\n\n  $scope.msg = msg;\n  $scope.dismiss = function () {\n    $uibModalInstance.dismiss('cancel');\n  };\n}\n\nexports.JobsStatusCtrl = JobsStatusCtrl;\nexports.JobDetailsModalCtrl = JobDetailsModalCtrl;\nexports.VNCJobDetailsModalCtrl = VNCJobDetailsModalCtrl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///39\n");

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction WorkspacePanelCtrl($scope) {\n  'ngInject';\n\n  $scope.panel = {\n    collapsed: false\n  };\n\n  $scope.togglePanel = function togglePanel() {\n    $scope.panel.collapsed = !$scope.panel.collapsed;\n  };\n\n  $scope.openPanel = function openPanel() {\n    $scope.panel.collapsed = false;\n  };\n\n  $scope.$on('job-submitted', function (e, data) {\n    $scope.openPanel();\n  });\n};\n\nexports.default = WorkspacePanelCtrl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvd29ya3NwYWNlL2NvbnRyb2xsZXJzL3dvcmtzcGFjZS1wYW5lbC5qcz8zZTZkIl0sIm5hbWVzIjpbIldvcmtzcGFjZVBhbmVsQ3RybCIsIiRzY29wZSIsInBhbmVsIiwiY29sbGFwc2VkIiwidG9nZ2xlUGFuZWwiLCJvcGVuUGFuZWwiLCIkb24iLCJlIiwiZGF0YSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsU0FBU0Esa0JBQVQsQ0FBNEJDLE1BQTVCLEVBQW9DO0FBQ2xDOztBQUNBQSxTQUFPQyxLQUFQLEdBQWU7QUFDYkMsZUFBVztBQURFLEdBQWY7O0FBSUFGLFNBQU9HLFdBQVAsR0FBcUIsU0FBU0EsV0FBVCxHQUF1QjtBQUMxQ0gsV0FBT0MsS0FBUCxDQUFhQyxTQUFiLEdBQXlCLENBQUVGLE9BQU9DLEtBQVAsQ0FBYUMsU0FBeEM7QUFDRCxHQUZEOztBQUlBRixTQUFPSSxTQUFQLEdBQW1CLFNBQVNBLFNBQVQsR0FBcUI7QUFDdENKLFdBQU9DLEtBQVAsQ0FBYUMsU0FBYixHQUF5QixLQUF6QjtBQUNELEdBRkQ7O0FBSUFGLFNBQU9LLEdBQVAsQ0FBVyxlQUFYLEVBQTRCLFVBQVNDLENBQVQsRUFBWUMsSUFBWixFQUFrQjtBQUM1Q1AsV0FBT0ksU0FBUDtBQUNELEdBRkQ7QUFNRDs7a0JBRWNMLGtCIiwiZmlsZSI6IjQwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5mdW5jdGlvbiBXb3Jrc3BhY2VQYW5lbEN0cmwoJHNjb3BlKSB7XG4gICduZ0luamVjdCc7XG4gICRzY29wZS5wYW5lbCA9IHtcbiAgICBjb2xsYXBzZWQ6IGZhbHNlXG4gIH07XG5cbiAgJHNjb3BlLnRvZ2dsZVBhbmVsID0gZnVuY3Rpb24gdG9nZ2xlUGFuZWwoKSB7XG4gICAgJHNjb3BlLnBhbmVsLmNvbGxhcHNlZCA9ICEgJHNjb3BlLnBhbmVsLmNvbGxhcHNlZDtcbiAgfTtcblxuICAkc2NvcGUub3BlblBhbmVsID0gZnVuY3Rpb24gb3BlblBhbmVsKCkge1xuICAgICRzY29wZS5wYW5lbC5jb2xsYXBzZWQgPSBmYWxzZTtcbiAgfTtcblxuICAkc2NvcGUuJG9uKCdqb2Itc3VibWl0dGVkJywgZnVuY3Rpb24oZSwgZGF0YSkge1xuICAgICRzY29wZS5vcGVuUGFuZWwoKTtcbiAgfSk7XG5cblxuXG59O1xuXG5leHBvcnQgZGVmYXVsdCBXb3Jrc3BhY2VQYW5lbEN0cmw7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvd29ya3NwYWNlL2NvbnRyb2xsZXJzL3dvcmtzcGFjZS1wYW5lbC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///40\n");

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction agaveFilePicker() {\n  return {\n    restrict: 'EA',\n    require: 'ngModel',\n    replace: true,\n    templateUrl: '/static/portal/scripts/angular/workspace/templates/agave-file-picker.html',\n    link: function link($scope, $element, attrs, $ngModel) {\n      var formKey = $scope.form.key.join('.');\n\n      $scope.requesting = false;\n\n      $scope.data = {\n        input: null\n      };\n\n      $scope.wantFile = function wantFile($event) {\n        $event.preventDefault();\n        $element.parent().addClass('wants');\n        $scope.$emit('wants-file', {\n          requestKey: formKey,\n          title: $scope.form.title || formKey,\n          description: $scope.form.description || ''\n        });\n        $scope.requesting = true;\n      };\n\n      function stopWant() {\n        $element.parent().removeClass('wants');\n        $scope.$emit('cancel-wants-file', { requestKey: formKey });\n        $scope.requesting = false;\n      }\n\n      $scope.stopWant = function ($event) {\n        $event.preventDefault();\n        stopWant();\n      };\n\n      $scope.$on('provides-file', function ($event, args) {\n        var requestKey = args.requestKey || '';\n        var file = args.file || {};\n        var agavePath = 'agave://' + file.system + file.path;\n        if (formKey === requestKey) {\n          $scope.data.input = agavePath;\n          $ngModel.$setViewValue(agavePath);\n          stopWant();\n        }\n      });\n\n      $element.find('input').on('change', function () {\n        $ngModel.$setViewValue($scope.data.input);\n      });\n    }\n  };\n};\n\nexports.default = agaveFilePicker;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvd29ya3NwYWNlL2RpcmVjdGl2ZXMvYWdhdmUtZmlsZS1waWNrZXIuanM/ZThiMCJdLCJuYW1lcyI6WyJhZ2F2ZUZpbGVQaWNrZXIiLCJyZXN0cmljdCIsInJlcXVpcmUiLCJyZXBsYWNlIiwidGVtcGxhdGVVcmwiLCJsaW5rIiwiJHNjb3BlIiwiJGVsZW1lbnQiLCJhdHRycyIsIiRuZ01vZGVsIiwiZm9ybUtleSIsImZvcm0iLCJrZXkiLCJqb2luIiwicmVxdWVzdGluZyIsImRhdGEiLCJpbnB1dCIsIndhbnRGaWxlIiwiJGV2ZW50IiwicHJldmVudERlZmF1bHQiLCJwYXJlbnQiLCJhZGRDbGFzcyIsIiRlbWl0IiwicmVxdWVzdEtleSIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJzdG9wV2FudCIsInJlbW92ZUNsYXNzIiwiJG9uIiwiYXJncyIsImZpbGUiLCJhZ2F2ZVBhdGgiLCJzeXN0ZW0iLCJwYXRoIiwiJHNldFZpZXdWYWx1ZSIsImZpbmQiLCJvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBRSxTQUFTQSxlQUFULEdBQTJCO0FBQ3pCLFNBQU87QUFDTEMsY0FBVSxJQURMO0FBRUxDLGFBQVMsU0FGSjtBQUdMQyxhQUFTLElBSEo7QUFJTEMsaUJBQWEsMkVBSlI7QUFLTEMsVUFBTSxjQUFTQyxNQUFULEVBQWlCQyxRQUFqQixFQUEyQkMsS0FBM0IsRUFBa0NDLFFBQWxDLEVBQTRDO0FBQ2hELFVBQUlDLFVBQVVKLE9BQU9LLElBQVAsQ0FBWUMsR0FBWixDQUFnQkMsSUFBaEIsQ0FBcUIsR0FBckIsQ0FBZDs7QUFFQVAsYUFBT1EsVUFBUCxHQUFvQixLQUFwQjs7QUFFQVIsYUFBT1MsSUFBUCxHQUFjO0FBQ1pDLGVBQU87QUFESyxPQUFkOztBQUlBVixhQUFPVyxRQUFQLEdBQWtCLFNBQVNBLFFBQVQsQ0FBa0JDLE1BQWxCLEVBQTBCO0FBQzFDQSxlQUFPQyxjQUFQO0FBQ0FaLGlCQUFTYSxNQUFULEdBQWtCQyxRQUFsQixDQUEyQixPQUEzQjtBQUNBZixlQUFPZ0IsS0FBUCxDQUFhLFlBQWIsRUFBMkI7QUFDekJDLHNCQUFZYixPQURhO0FBRXpCYyxpQkFBT2xCLE9BQU9LLElBQVAsQ0FBWWEsS0FBWixJQUFxQmQsT0FGSDtBQUd6QmUsdUJBQWFuQixPQUFPSyxJQUFQLENBQVljLFdBQVosSUFBMkI7QUFIZixTQUEzQjtBQUtBbkIsZUFBT1EsVUFBUCxHQUFvQixJQUFwQjtBQUNELE9BVEQ7O0FBV0EsZUFBU1ksUUFBVCxHQUFvQjtBQUNsQm5CLGlCQUFTYSxNQUFULEdBQWtCTyxXQUFsQixDQUE4QixPQUE5QjtBQUNBckIsZUFBT2dCLEtBQVAsQ0FBYSxtQkFBYixFQUFrQyxFQUFDQyxZQUFZYixPQUFiLEVBQWxDO0FBQ0FKLGVBQU9RLFVBQVAsR0FBb0IsS0FBcEI7QUFDRDs7QUFFRFIsYUFBT29CLFFBQVAsR0FBa0IsVUFBU1IsTUFBVCxFQUFpQjtBQUNqQ0EsZUFBT0MsY0FBUDtBQUNBTztBQUNELE9BSEQ7O0FBS0FwQixhQUFPc0IsR0FBUCxDQUFXLGVBQVgsRUFBNEIsVUFBU1YsTUFBVCxFQUFpQlcsSUFBakIsRUFBdUI7QUFDakQsWUFBSU4sYUFBYU0sS0FBS04sVUFBTCxJQUFtQixFQUFwQztBQUNBLFlBQUlPLE9BQU9ELEtBQUtDLElBQUwsSUFBYSxFQUF4QjtBQUNBLFlBQUlDLFlBQVksYUFBYUQsS0FBS0UsTUFBbEIsR0FBMkJGLEtBQUtHLElBQWhEO0FBQ0EsWUFBSXZCLFlBQVlhLFVBQWhCLEVBQTRCO0FBQzFCakIsaUJBQU9TLElBQVAsQ0FBWUMsS0FBWixHQUFvQmUsU0FBcEI7QUFDQXRCLG1CQUFTeUIsYUFBVCxDQUF1QkgsU0FBdkI7QUFDQUw7QUFDRDtBQUNGLE9BVEQ7O0FBV0FuQixlQUFTNEIsSUFBVCxDQUFjLE9BQWQsRUFBdUJDLEVBQXZCLENBQTBCLFFBQTFCLEVBQW9DLFlBQVc7QUFDN0MzQixpQkFBU3lCLGFBQVQsQ0FBdUI1QixPQUFPUyxJQUFQLENBQVlDLEtBQW5DO0FBQ0QsT0FGRDtBQUdEO0FBbERJLEdBQVA7QUFvREQ7O2tCQUVjaEIsZSIsImZpbGUiOiI0MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiAgZnVuY3Rpb24gYWdhdmVGaWxlUGlja2VyKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0VBJyxcbiAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICB0ZW1wbGF0ZVVybDogJy9zdGF0aWMvcG9ydGFsL3NjcmlwdHMvYW5ndWxhci93b3Jrc3BhY2UvdGVtcGxhdGVzL2FnYXZlLWZpbGUtcGlja2VyLmh0bWwnLFxuICAgICAgbGluazogZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgYXR0cnMsICRuZ01vZGVsKSB7XG4gICAgICAgIHZhciBmb3JtS2V5ID0gJHNjb3BlLmZvcm0ua2V5LmpvaW4oJy4nKTtcblxuICAgICAgICAkc2NvcGUucmVxdWVzdGluZyA9IGZhbHNlO1xuXG4gICAgICAgICRzY29wZS5kYXRhID0ge1xuICAgICAgICAgIGlucHV0OiBudWxsXG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLndhbnRGaWxlID0gZnVuY3Rpb24gd2FudEZpbGUoJGV2ZW50KSB7XG4gICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgJGVsZW1lbnQucGFyZW50KCkuYWRkQ2xhc3MoJ3dhbnRzJyk7XG4gICAgICAgICAgJHNjb3BlLiRlbWl0KCd3YW50cy1maWxlJywge1xuICAgICAgICAgICAgcmVxdWVzdEtleTogZm9ybUtleSxcbiAgICAgICAgICAgIHRpdGxlOiAkc2NvcGUuZm9ybS50aXRsZSB8fCBmb3JtS2V5LFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICRzY29wZS5mb3JtLmRlc2NyaXB0aW9uIHx8ICcnXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgJHNjb3BlLnJlcXVlc3RpbmcgPSB0cnVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIHN0b3BXYW50KCkge1xuICAgICAgICAgICRlbGVtZW50LnBhcmVudCgpLnJlbW92ZUNsYXNzKCd3YW50cycpO1xuICAgICAgICAgICRzY29wZS4kZW1pdCgnY2FuY2VsLXdhbnRzLWZpbGUnLCB7cmVxdWVzdEtleTogZm9ybUtleX0pO1xuICAgICAgICAgICRzY29wZS5yZXF1ZXN0aW5nID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAkc2NvcGUuc3RvcFdhbnQgPSBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBzdG9wV2FudCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS4kb24oJ3Byb3ZpZGVzLWZpbGUnLCBmdW5jdGlvbigkZXZlbnQsIGFyZ3MpIHtcbiAgICAgICAgICB2YXIgcmVxdWVzdEtleSA9IGFyZ3MucmVxdWVzdEtleSB8fCAnJztcbiAgICAgICAgICB2YXIgZmlsZSA9IGFyZ3MuZmlsZSB8fCB7fTtcbiAgICAgICAgICB2YXIgYWdhdmVQYXRoID0gJ2FnYXZlOi8vJyArIGZpbGUuc3lzdGVtICsgZmlsZS5wYXRoO1xuICAgICAgICAgIGlmIChmb3JtS2V5ID09PSByZXF1ZXN0S2V5KSB7XG4gICAgICAgICAgICAkc2NvcGUuZGF0YS5pbnB1dCA9IGFnYXZlUGF0aDtcbiAgICAgICAgICAgICRuZ01vZGVsLiRzZXRWaWV3VmFsdWUoYWdhdmVQYXRoKTtcbiAgICAgICAgICAgIHN0b3BXYW50KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAkZWxlbWVudC5maW5kKCdpbnB1dCcpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKCRzY29wZS5kYXRhLmlucHV0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBleHBvcnQgZGVmYXVsdCBhZ2F2ZUZpbGVQaWNrZXI7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvd29ya3NwYWNlL2RpcmVjdGl2ZXMvYWdhdmUtZmlsZS1waWNrZXIuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///41\n");

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _agaveFilePicker = __webpack_require__(41);\n\nvar _agaveFilePicker2 = _interopRequireDefault(_agaveFilePicker);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar mod = angular.module('portal.workspace.directives', []);\n\nmod.directive('agaveFilePicker', _agaveFilePicker2.default);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvd29ya3NwYWNlL2RpcmVjdGl2ZXMvaW5kZXguanM/ZDQwNSJdLCJuYW1lcyI6WyJtb2QiLCJhbmd1bGFyIiwibW9kdWxlIiwiZGlyZWN0aXZlIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7QUFFQSxJQUFJQSxNQUFNQyxRQUFRQyxNQUFSLENBQWUsNkJBQWYsRUFBOEMsRUFBOUMsQ0FBVjs7QUFFQUYsSUFBSUcsU0FBSixDQUFjLGlCQUFkIiwiZmlsZSI6IjQyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFnYXZlRmlsZVBpY2tlciBmcm9tICcuL2FnYXZlLWZpbGUtcGlja2VyJztcblxubGV0IG1vZCA9IGFuZ3VsYXIubW9kdWxlKCdwb3J0YWwud29ya3NwYWNlLmRpcmVjdGl2ZXMnLCBbXSk7XG5cbm1vZC5kaXJlY3RpdmUoJ2FnYXZlRmlsZVBpY2tlcicsIGFnYXZlRmlsZVBpY2tlcik7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvd29ya3NwYWNlL2RpcmVjdGl2ZXMvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///42\n");

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _controllers = __webpack_require__(38);\n\nvar _directives = __webpack_require__(42);\n\nvar _services = __webpack_require__(45);\n\nvar _angular = __webpack_require__(52);\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction config($interpolateProvider, $httpProvider, $urlRouterProvider, $stateProvider, $translateProvider) {\n  'ngInject';\n\n  $stateProvider.state('tray', {\n    url: '/workspace/:appId',\n    templateUrl: '/static/portal/scripts/angular/workspace/templates/application-tray.html',\n    controller: 'ApplicationTrayCtrl'\n  });\n\n  $translateProvider.translations('en', {\n    error_system_monitor: \"The execution system for this app is currently unavailable. Your job submission may fail.\",\n    error_app_run: \"Could not find appId provided\",\n    error_app_disabled: \"The app you're trying to run is currently disabled. Please enable the app and try again\",\n    apps_metadata_name: \"portal_apps\",\n    apps_metadata_list_name: \"portal_apps_list\"\n  });\n  $translateProvider.preferredLanguage('en');\n}\n\nvar mod = _angular2.default.module('portal.workspace', ['portal.workspace.controllers', 'portal.workspace.services', 'portal.workspace.directives']).config(config).run(function (editableOptions) {\n  editableOptions.theme = 'bs3';\n});\n\n_angular2.default.module('schemaForm').config(['schemaFormProvider', 'schemaFormDecoratorsProvider', 'sfPathProvider', function (schemaFormProvider, schemaFormDecoratorsProvider, sfPathProvider) {\n\n  var filePicker = function filePicker(name, schema, options) {\n    if (schema.type === 'string' && schema.format === 'agaveFile') {\n      var f = schemaFormProvider.stdFormObj(name, schema, options);\n      f.key = options.path;\n      f.type = 'agaveFilePicker';\n      options.lookup[sfPathProvider.stringify(options.path)] = f;\n      return f;\n    }\n  };\n\n  schemaFormProvider.defaults.string.unshift(filePicker);\n\n  //Add to the bootstrap directive\n  schemaFormDecoratorsProvider.addMapping('bootstrapDecorator', 'agaveFilePicker', '/static/portal/scripts/angular/workspace/templates/asf-agave-file-picker.html');\n  schemaFormDecoratorsProvider.createDirective('agaveFilePicker', '/static/portal/scripts/angular/workspace/templates/asf-agave-file-picker.html');\n}]);\n\nexports.default = mod;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvd29ya3NwYWNlL2luZGV4LmpzPzVkY2EiXSwibmFtZXMiOlsiY29uZmlnIiwiJGludGVycG9sYXRlUHJvdmlkZXIiLCIkaHR0cFByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJHN0YXRlUHJvdmlkZXIiLCIkdHJhbnNsYXRlUHJvdmlkZXIiLCJzdGF0ZSIsInVybCIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsInRyYW5zbGF0aW9ucyIsImVycm9yX3N5c3RlbV9tb25pdG9yIiwiZXJyb3JfYXBwX3J1biIsImVycm9yX2FwcF9kaXNhYmxlZCIsImFwcHNfbWV0YWRhdGFfbmFtZSIsImFwcHNfbWV0YWRhdGFfbGlzdF9uYW1lIiwicHJlZmVycmVkTGFuZ3VhZ2UiLCJtb2QiLCJtb2R1bGUiLCJydW4iLCJlZGl0YWJsZU9wdGlvbnMiLCJ0aGVtZSIsInNjaGVtYUZvcm1Qcm92aWRlciIsInNjaGVtYUZvcm1EZWNvcmF0b3JzUHJvdmlkZXIiLCJzZlBhdGhQcm92aWRlciIsImZpbGVQaWNrZXIiLCJuYW1lIiwic2NoZW1hIiwib3B0aW9ucyIsInR5cGUiLCJmb3JtYXQiLCJmIiwic3RkRm9ybU9iaiIsImtleSIsInBhdGgiLCJsb29rdXAiLCJzdHJpbmdpZnkiLCJkZWZhdWx0cyIsInN0cmluZyIsInVuc2hpZnQiLCJhZGRNYXBwaW5nIiwiY3JlYXRlRGlyZWN0aXZlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQTs7Ozs7O0FBRUEsU0FBU0EsTUFBVCxDQUFnQkMsb0JBQWhCLEVBQXNDQyxhQUF0QyxFQUFxREMsa0JBQXJELEVBQXlFQyxjQUF6RSxFQUF5RkMsa0JBQXpGLEVBQTZHO0FBQzNHOztBQUNBRCxpQkFBZUUsS0FBZixDQUFxQixNQUFyQixFQUE2QjtBQUN6QkMsU0FBSyxtQkFEb0I7QUFFekJDLGlCQUFhLDBFQUZZO0FBR3pCQyxnQkFBWTtBQUhhLEdBQTdCOztBQU1BSixxQkFBbUJLLFlBQW5CLENBQWdDLElBQWhDLEVBQXNDO0FBQ2xDQywwQkFBc0IsMkZBRFk7QUFFbENDLG1CQUFlLCtCQUZtQjtBQUdsQ0Msd0JBQW9CLHlGQUhjO0FBSWxDQyx3QkFBb0IsYUFKYztBQUtsQ0MsNkJBQXlCO0FBTFMsR0FBdEM7QUFPQVYscUJBQW1CVyxpQkFBbkIsQ0FBcUMsSUFBckM7QUFDRDs7QUFHRCxJQUFJQyxNQUFNLGtCQUFRQyxNQUFSLENBQWUsa0JBQWYsRUFBbUMsQ0FDM0MsOEJBRDJDLEVBRTNDLDJCQUYyQyxFQUczQyw2QkFIMkMsQ0FBbkMsRUFJUGxCLE1BSk8sQ0FJQUEsTUFKQSxFQUtUbUIsR0FMUyxDQUtMLFVBQVNDLGVBQVQsRUFBMEI7QUFDN0JBLGtCQUFnQkMsS0FBaEIsR0FBd0IsS0FBeEI7QUFDRCxDQVBTLENBQVY7O0FBU0Esa0JBQVFILE1BQVIsQ0FBZSxZQUFmLEVBQTZCbEIsTUFBN0IsQ0FDQSxDQUFDLG9CQUFELEVBQXVCLDhCQUF2QixFQUF1RCxnQkFBdkQsRUFDRSxVQUFTc0Isa0JBQVQsRUFBOEJDLDRCQUE5QixFQUE0REMsY0FBNUQsRUFBNEU7O0FBRTFFLE1BQUlDLGFBQWEsU0FBYkEsVUFBYSxDQUFTQyxJQUFULEVBQWVDLE1BQWYsRUFBdUJDLE9BQXZCLEVBQWdDO0FBQy9DLFFBQUlELE9BQU9FLElBQVAsS0FBZ0IsUUFBaEIsSUFBNEJGLE9BQU9HLE1BQVAsS0FBa0IsV0FBbEQsRUFBK0Q7QUFDN0QsVUFBSUMsSUFBSVQsbUJBQW1CVSxVQUFuQixDQUE4Qk4sSUFBOUIsRUFBb0NDLE1BQXBDLEVBQTRDQyxPQUE1QyxDQUFSO0FBQ0FHLFFBQUVFLEdBQUYsR0FBU0wsUUFBUU0sSUFBakI7QUFDQUgsUUFBRUYsSUFBRixHQUFTLGlCQUFUO0FBQ0FELGNBQVFPLE1BQVIsQ0FBZVgsZUFBZVksU0FBZixDQUF5QlIsUUFBUU0sSUFBakMsQ0FBZixJQUF5REgsQ0FBekQ7QUFDQSxhQUFPQSxDQUFQO0FBQ0Q7QUFDRixHQVJEOztBQVVBVCxxQkFBbUJlLFFBQW5CLENBQTRCQyxNQUE1QixDQUFtQ0MsT0FBbkMsQ0FBMkNkLFVBQTNDOztBQUVBO0FBQ0FGLCtCQUE2QmlCLFVBQTdCLENBQ0Usb0JBREYsRUFFRSxpQkFGRixFQUdFLCtFQUhGO0FBS0FqQiwrQkFBNkJrQixlQUE3QixDQUNFLGlCQURGLEVBRUUsK0VBRkY7QUFJRCxDQXpCSCxDQURBOztrQkE2QmV4QixHIiwiZmlsZSI6IjQzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHttb2QgYXMgY29udHJvbGxlcnN9IGZyb20gJy4vY29udHJvbGxlcnMnO1xuaW1wb3J0IHttb2QgYXMgZGlyZWN0aXZlc30gZnJvbSAnLi9kaXJlY3RpdmVzJztcbmltcG9ydCB7bW9kIGFzIHNlcnZpY2VzfSBmcm9tICcuL3NlcnZpY2VzJztcblxuaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5cbmZ1bmN0aW9uIGNvbmZpZygkaW50ZXJwb2xhdGVQcm92aWRlciwgJGh0dHBQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyLCAkc3RhdGVQcm92aWRlciwgJHRyYW5zbGF0ZVByb3ZpZGVyKSB7XG4gICduZ0luamVjdCc7XG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCd0cmF5Jywge1xuICAgICAgdXJsOiAnL3dvcmtzcGFjZS86YXBwSWQnLFxuICAgICAgdGVtcGxhdGVVcmw6ICcvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvd29ya3NwYWNlL3RlbXBsYXRlcy9hcHBsaWNhdGlvbi10cmF5Lmh0bWwnLFxuICAgICAgY29udHJvbGxlcjogJ0FwcGxpY2F0aW9uVHJheUN0cmwnXG4gIH0pO1xuXG4gICR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoJ2VuJywge1xuICAgICAgZXJyb3Jfc3lzdGVtX21vbml0b3I6IFwiVGhlIGV4ZWN1dGlvbiBzeXN0ZW0gZm9yIHRoaXMgYXBwIGlzIGN1cnJlbnRseSB1bmF2YWlsYWJsZS4gWW91ciBqb2Igc3VibWlzc2lvbiBtYXkgZmFpbC5cIixcbiAgICAgIGVycm9yX2FwcF9ydW46IFwiQ291bGQgbm90IGZpbmQgYXBwSWQgcHJvdmlkZWRcIixcbiAgICAgIGVycm9yX2FwcF9kaXNhYmxlZDogXCJUaGUgYXBwIHlvdSdyZSB0cnlpbmcgdG8gcnVuIGlzIGN1cnJlbnRseSBkaXNhYmxlZC4gUGxlYXNlIGVuYWJsZSB0aGUgYXBwIGFuZCB0cnkgYWdhaW5cIixcbiAgICAgIGFwcHNfbWV0YWRhdGFfbmFtZTogXCJwb3J0YWxfYXBwc1wiLFxuICAgICAgYXBwc19tZXRhZGF0YV9saXN0X25hbWU6IFwicG9ydGFsX2FwcHNfbGlzdFwiXG4gIH0pO1xuICAkdHJhbnNsYXRlUHJvdmlkZXIucHJlZmVycmVkTGFuZ3VhZ2UoJ2VuJyk7XG59XG5cblxubGV0IG1vZCA9IGFuZ3VsYXIubW9kdWxlKCdwb3J0YWwud29ya3NwYWNlJywgW1xuICAncG9ydGFsLndvcmtzcGFjZS5jb250cm9sbGVycycsXG4gICdwb3J0YWwud29ya3NwYWNlLnNlcnZpY2VzJyxcbiAgJ3BvcnRhbC53b3Jrc3BhY2UuZGlyZWN0aXZlcydcbl0pLmNvbmZpZyhjb25maWcpXG4ucnVuKGZ1bmN0aW9uKGVkaXRhYmxlT3B0aW9ucykge1xuICBlZGl0YWJsZU9wdGlvbnMudGhlbWUgPSAnYnMzJztcbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgnc2NoZW1hRm9ybScpLmNvbmZpZyhcblsnc2NoZW1hRm9ybVByb3ZpZGVyJywgJ3NjaGVtYUZvcm1EZWNvcmF0b3JzUHJvdmlkZXInLCAnc2ZQYXRoUHJvdmlkZXInLFxuICBmdW5jdGlvbihzY2hlbWFGb3JtUHJvdmlkZXIsICBzY2hlbWFGb3JtRGVjb3JhdG9yc1Byb3ZpZGVyLCBzZlBhdGhQcm92aWRlcikge1xuXG4gICAgdmFyIGZpbGVQaWNrZXIgPSBmdW5jdGlvbihuYW1lLCBzY2hlbWEsIG9wdGlvbnMpIHtcbiAgICAgIGlmIChzY2hlbWEudHlwZSA9PT0gJ3N0cmluZycgJiYgc2NoZW1hLmZvcm1hdCA9PT0gJ2FnYXZlRmlsZScpIHtcbiAgICAgICAgdmFyIGYgPSBzY2hlbWFGb3JtUHJvdmlkZXIuc3RkRm9ybU9iaihuYW1lLCBzY2hlbWEsIG9wdGlvbnMpO1xuICAgICAgICBmLmtleSAgPSBvcHRpb25zLnBhdGg7XG4gICAgICAgIGYudHlwZSA9ICdhZ2F2ZUZpbGVQaWNrZXInO1xuICAgICAgICBvcHRpb25zLmxvb2t1cFtzZlBhdGhQcm92aWRlci5zdHJpbmdpZnkob3B0aW9ucy5wYXRoKV0gPSBmO1xuICAgICAgICByZXR1cm4gZjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2NoZW1hRm9ybVByb3ZpZGVyLmRlZmF1bHRzLnN0cmluZy51bnNoaWZ0KGZpbGVQaWNrZXIpO1xuXG4gICAgLy9BZGQgdG8gdGhlIGJvb3RzdHJhcCBkaXJlY3RpdmVcbiAgICBzY2hlbWFGb3JtRGVjb3JhdG9yc1Byb3ZpZGVyLmFkZE1hcHBpbmcoXG4gICAgICAnYm9vdHN0cmFwRGVjb3JhdG9yJyxcbiAgICAgICdhZ2F2ZUZpbGVQaWNrZXInLFxuICAgICAgJy9zdGF0aWMvcG9ydGFsL3NjcmlwdHMvYW5ndWxhci93b3Jrc3BhY2UvdGVtcGxhdGVzL2FzZi1hZ2F2ZS1maWxlLXBpY2tlci5odG1sJ1xuICAgICk7XG4gICAgc2NoZW1hRm9ybURlY29yYXRvcnNQcm92aWRlci5jcmVhdGVEaXJlY3RpdmUoXG4gICAgICAnYWdhdmVGaWxlUGlja2VyJyxcbiAgICAgICcvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvd29ya3NwYWNlL3RlbXBsYXRlcy9hc2YtYWdhdmUtZmlsZS1waWNrZXIuaHRtbCdcbiAgICApO1xuICB9XG5dKTtcblxuZXhwb3J0IGRlZmF1bHQgbW9kO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcG9ydGFsL3N0YXRpYy9wb3J0YWwvc2NyaXB0cy9hbmd1bGFyL3dvcmtzcGFjZS9pbmRleC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///43\n");

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction Apps($http, $q, $translate) {\n  'ngInject';\n\n  var service = {};\n\n  var default_list_opts = {\n    publicOnly: false\n  };\n\n  service.list = function (query) {\n    return $http({\n      url: '/api/workspace/meta',\n      method: 'GET',\n      params: { 'q': query },\n      cache: true\n    });\n  };\n\n  service.get = function (app_id) {\n    return $http({\n      url: '/api/workspace/apps',\n      method: 'GET',\n      params: { 'app_id': app_id }\n    });\n  };\n\n  service.getMeta = function (app_id) {\n    return $http({\n      url: '/api/workspace/meta',\n      method: 'GET',\n      params: { q: { 'name': $translate.instant('apps_metadata_name'), 'value.definition.id': app_id } }\n    });\n  };\n\n  service.formSchema = function (app) {\n    /**\n     * Generate a JSON.schema for the app ready for angular-schema-form\n     * https://github.com/json-schema-form/angular-schema-form\n     */\n    if (typeof app === 'string') {\n      app = service.get(app);\n    }\n    var params = app.parameters || [];\n    var inputs = app.inputs || [];\n\n    var schema = {\n      type: 'object',\n      properties: {}\n    };\n\n    if (params.length > 0) {\n      schema.properties.parameters = {\n        type: 'object',\n        properties: {}\n      };\n      _.each(params, function (param) {\n        if (!param.value.visible) {\n          return;\n        }\n        if (param.id.startsWith('_')) {\n          return;\n        }\n        var field = {\n          title: param.details.label,\n          description: param.details.description,\n          required: param.value.required\n        };\n        switch (param.value.type) {\n          case 'bool':\n          case 'flag':\n            field.type = 'boolean';\n            break;\n\n          case 'enumeration':\n            field.type = 'string';\n            field.enum = _.map(param.value.enum_values, function (enum_val) {\n              return Object.keys(enum_val)[0];\n            });\n            field['x-schema-form'] = {\n              'titleMap': _.map(param.value.enum_values, function (enum_val) {\n                var key = Object.keys(enum_val)[0];\n                return {\n                  'value': key,\n                  'name': enum_val[key]\n                };\n              })\n            };\n            break;\n\n          case 'number':\n            field.type = 'number';\n            break;\n\n          case 'string':\n          default:\n            field.type = 'string';\n        }\n        schema.properties.parameters.properties[param.id] = field;\n      });\n    }\n\n    if (inputs.length > 0) {\n\n      schema.properties.inputs = {\n        type: 'object',\n        properties: {}\n      };\n      _.each(inputs, function (input) {\n        if (!input.value.visible) {\n          return;\n        }\n        if (input.id.startsWith('_')) {\n          return;\n        }\n        var field = {\n          title: input.details.label,\n          description: input.details.description\n        };\n        if (input.semantics.maxCardinality === 1) {\n          field.type = 'string';\n          field.format = 'agaveFile';\n          field.required = input.value.required;\n        } else {\n          field.type = 'array';\n          field.items = {\n            type: 'string',\n            format: 'agaveFile',\n            'x-schema-form': { notitle: true }\n          };\n          if (input.semantics.maxCardinality > 1) {\n            field.maxItems = input.semantics.maxCardinality;\n          }\n        }\n        schema.properties.inputs.properties[input.id] = field;\n      });\n    }\n\n    schema.properties.requestedTime = {\n      title: 'Maximum job runtime',\n      description: 'In HH:MM:SS format. The maximum time you expect this job to run for. After this amount of time your job will be killed by the job scheduler. Shorter run times result in shorter queue wait times. Maximum possible time is 48:00:00 (48 hours).',\n      type: 'string',\n      \"pattern\": \"^(48:00:00)|([0-4][0-7]:[0-5][0-9]:[0-5][0-9])$\",\n      \"validationMessage\": \"Must be in format HH:MM:SS and be less than 48 hours (48:00:00)\",\n      required: true,\n      'x-schema-form': { placeholder: app.defaultMaxRunTime }\n    };\n\n    schema.properties.name = {\n      title: 'Job name',\n      description: 'A recognizable name for this job',\n      type: 'string',\n      required: true\n    };\n    schema.properties.archivePath = {\n      title: 'Job output archive location (optional)',\n      description: 'Specify a location where the job output should be archived. By default, job output will be archived at: <code>&lt;username&gt;/archive/jobs/${YYYY-MM-DD}/${JOB_NAME}-${JOB_ID}</code>.',\n      type: 'string',\n      format: 'agaveFile',\n      'x-schema-form': { placeholder: '<username>/archive/jobs/${YYYY-MM-DD}/${JOB_NAME}-${JOB_ID}' }\n    };\n\n    return schema;\n  };\n\n  return service;\n};\n\nexports.default = Apps;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///44\n");

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _appsService = __webpack_require__(44);\n\nvar _appsService2 = _interopRequireDefault(_appsService);\n\nvar _jobsService = __webpack_require__(46);\n\nvar _jobsService2 = _interopRequireDefault(_jobsService);\n\nvar _multipleListService = __webpack_require__(47);\n\nvar _multipleListService2 = _interopRequireDefault(_multipleListService);\n\nvar _notificationsService = __webpack_require__(48);\n\nvar _notificationsService2 = _interopRequireDefault(_notificationsService);\n\nvar _simpleListService = __webpack_require__(49);\n\nvar _simpleListService2 = _interopRequireDefault(_simpleListService);\n\nvar _systemsService = __webpack_require__(50);\n\nvar _systemsService2 = _interopRequireDefault(_systemsService);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar mod = angular.module('portal.workspace.services', []);\n\nmod.factory('Apps', _appsService2.default);\nmod.factory('Jobs', _jobsService2.default);\nmod.service('MultipleList', _multipleListService2.default);\nmod.service('Notifications', _notificationsService2.default);\nmod.service('SimpleList', _simpleListService2.default);\nmod.service('Systems', _systemsService2.default);\n\nexports.default = mod;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvd29ya3NwYWNlL3NlcnZpY2VzL2luZGV4LmpzPzczNzIiXSwibmFtZXMiOlsibW9kIiwiYW5ndWxhciIsIm1vZHVsZSIsImZhY3RvcnkiLCJzZXJ2aWNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQUlBLE1BQU1DLFFBQVFDLE1BQVIsQ0FBZSwyQkFBZixFQUE0QyxFQUE1QyxDQUFWOztBQUVBRixJQUFJRyxPQUFKLENBQVksTUFBWjtBQUNBSCxJQUFJRyxPQUFKLENBQVksTUFBWjtBQUNBSCxJQUFJSSxPQUFKLENBQVksY0FBWjtBQUNBSixJQUFJSSxPQUFKLENBQVksZUFBWjtBQUNBSixJQUFJSSxPQUFKLENBQVksWUFBWjtBQUNBSixJQUFJSSxPQUFKLENBQVksU0FBWjs7a0JBRWVKLEciLCJmaWxlIjoiNDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXBwcyBmcm9tICcuL2FwcHMtc2VydmljZSc7XG5pbXBvcnQgSm9icyBmcm9tICcuL2pvYnMtc2VydmljZSc7XG5pbXBvcnQgTXVsdGlwbGVMaXN0IGZyb20gJy4vbXVsdGlwbGUtbGlzdC1zZXJ2aWNlJztcbmltcG9ydCBOb3RpZmljYXRpb25zIGZyb20gJy4vbm90aWZpY2F0aW9ucy1zZXJ2aWNlJztcbmltcG9ydCBTaW1wbGVMaXN0IGZyb20gJy4vc2ltcGxlLWxpc3Qtc2VydmljZSc7XG5pbXBvcnQgU3lzdGVtcyBmcm9tICcuL3N5c3RlbXMtc2VydmljZSc7XG5cbmxldCBtb2QgPSBhbmd1bGFyLm1vZHVsZSgncG9ydGFsLndvcmtzcGFjZS5zZXJ2aWNlcycsIFtdKTtcblxubW9kLmZhY3RvcnkoJ0FwcHMnLCBBcHBzKTtcbm1vZC5mYWN0b3J5KCdKb2JzJywgSm9icyk7XG5tb2Quc2VydmljZSgnTXVsdGlwbGVMaXN0JywgTXVsdGlwbGVMaXN0KTtcbm1vZC5zZXJ2aWNlKCdOb3RpZmljYXRpb25zJywgTm90aWZpY2F0aW9ucyk7XG5tb2Quc2VydmljZSgnU2ltcGxlTGlzdCcsIFNpbXBsZUxpc3QpO1xubW9kLnNlcnZpY2UoJ1N5c3RlbXMnLCBTeXN0ZW1zKTtcblxuZXhwb3J0IGRlZmF1bHQgbW9kO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcG9ydGFsL3N0YXRpYy9wb3J0YWwvc2NyaXB0cy9hbmd1bGFyL3dvcmtzcGFjZS9zZXJ2aWNlcy9pbmRleC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///45\n");

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction Jobs($http) {\n  'ngInject';\n\n  var service = {};\n\n  service.list = function (options) {\n    var params = {\n      limit: options.limit || 10,\n      offset: options.offset || 0\n    };\n    return $http.get('/api/workspace/jobs/', {\n      params: params\n    }).then(function (resp) {\n      return resp.data.response;\n    });\n  };\n\n  service.get = function (uuid) {\n    return $http.get('/api/workspace/jobs/', {\n      params: { 'job_id': uuid }\n    }).then(function (resp) {\n      return resp.data.response;\n    });\n  };\n\n  service.submit = function (data) {\n    return $http.post('/api/workspace/jobs/', data);\n  };\n\n  return service;\n}\n\nexports.default = Jobs;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvd29ya3NwYWNlL3NlcnZpY2VzL2pvYnMtc2VydmljZS5qcz8yYjA5Il0sIm5hbWVzIjpbIkpvYnMiLCIkaHR0cCIsInNlcnZpY2UiLCJsaXN0Iiwib3B0aW9ucyIsInBhcmFtcyIsImxpbWl0Iiwib2Zmc2V0IiwiZ2V0IiwidGhlbiIsInJlc3AiLCJkYXRhIiwicmVzcG9uc2UiLCJ1dWlkIiwic3VibWl0IiwicG9zdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsU0FBU0EsSUFBVCxDQUFjQyxLQUFkLEVBQXFCO0FBQ25COztBQUVBLE1BQUlDLFVBQVUsRUFBZDs7QUFFQUEsVUFBUUMsSUFBUixHQUFlLFVBQVNDLE9BQVQsRUFBa0I7QUFDL0IsUUFBSUMsU0FBUztBQUNYQyxhQUFPRixRQUFRRSxLQUFSLElBQWlCLEVBRGI7QUFFWEMsY0FBUUgsUUFBUUcsTUFBUixJQUFrQjtBQUZmLEtBQWI7QUFJQSxXQUFPTixNQUFNTyxHQUFOLENBQVUsc0JBQVYsRUFBa0M7QUFDdkNILGNBQVFBO0FBRCtCLEtBQWxDLEVBRUpJLElBRkksQ0FFQyxVQUFVQyxJQUFWLEVBQWdCO0FBQ3RCLGFBQU9BLEtBQUtDLElBQUwsQ0FBVUMsUUFBakI7QUFDRCxLQUpNLENBQVA7QUFLRCxHQVZEOztBQVlBVixVQUFRTSxHQUFSLEdBQWMsVUFBU0ssSUFBVCxFQUFlO0FBQzNCLFdBQU9aLE1BQU1PLEdBQU4sQ0FBVSxzQkFBVixFQUFrQztBQUN2Q0gsY0FBUSxFQUFDLFVBQVVRLElBQVg7QUFEK0IsS0FBbEMsRUFFSkosSUFGSSxDQUVDLFVBQVVDLElBQVYsRUFBZ0I7QUFDdEIsYUFBT0EsS0FBS0MsSUFBTCxDQUFVQyxRQUFqQjtBQUNELEtBSk0sQ0FBUDtBQUtELEdBTkQ7O0FBUUFWLFVBQVFZLE1BQVIsR0FBaUIsVUFBU0gsSUFBVCxFQUFlO0FBQzlCLFdBQU9WLE1BQU1jLElBQU4sQ0FBVyxzQkFBWCxFQUFtQ0osSUFBbkMsQ0FBUDtBQUNELEdBRkQ7O0FBSUEsU0FBT1QsT0FBUDtBQUNEOztrQkFFY0YsSSIsImZpbGUiOiI0Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuZnVuY3Rpb24gSm9icygkaHR0cCkge1xuICAnbmdJbmplY3QnO1xuXG4gIHZhciBzZXJ2aWNlID0ge307XG5cbiAgc2VydmljZS5saXN0ID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICBsaW1pdDogb3B0aW9ucy5saW1pdCB8fCAxMCxcbiAgICAgIG9mZnNldDogb3B0aW9ucy5vZmZzZXQgfHwgMFxuICAgIH07XG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS93b3Jrc3BhY2Uvam9icy8nLCB7XG4gICAgICBwYXJhbXM6IHBhcmFtc1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHtcbiAgICAgIHJldHVybiByZXNwLmRhdGEucmVzcG9uc2U7XG4gICAgfSk7XG4gIH07XG5cbiAgc2VydmljZS5nZXQgPSBmdW5jdGlvbih1dWlkKSB7XG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS93b3Jrc3BhY2Uvam9icy8nLCB7XG4gICAgICBwYXJhbXM6IHsnam9iX2lkJzogdXVpZH1cbiAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwKSB7XG4gICAgICByZXR1cm4gcmVzcC5kYXRhLnJlc3BvbnNlO1xuICAgIH0pO1xuICB9O1xuXG4gIHNlcnZpY2Uuc3VibWl0ID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3dvcmtzcGFjZS9qb2JzLycsIGRhdGEpO1xuICB9O1xuXG4gIHJldHVybiBzZXJ2aWNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBKb2JzO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcG9ydGFsL3N0YXRpYy9wb3J0YWwvc2NyaXB0cy9hbmd1bGFyL3dvcmtzcGFjZS9zZXJ2aWNlcy9qb2JzLXNlcnZpY2UuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///46\n");

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction MultipleList($http, $q) {\n  'ngInject';\n\n  var MultipleList = function MultipleList() {\n    this.lists = [];\n  };\n\n  MultipleList.prototype.addEditLists = function (query, name, apps) {\n    var self = this;\n    var deferred = $q.defer();\n\n    $http({\n      url: '/api/workspace/meta',\n      method: 'GET',\n      params: { 'q': query }\n    }).then(function (response) {\n      // Push apps list\n      var appList = {};\n      appList.listName = 'Apps';\n      appList.dragging = false;\n      appList.items = [];\n      for (var i = 0; i < response.data.length; i++) {\n        var exists = false;\n        for (var j = 0; j < apps.length; j++) {\n          if (response.data[i].value.id === apps[j].label) {\n            exists = true;\n            break;\n          }\n        }\n        if (exists === false) {\n          appList.items.push({ label: response.data[i].value.id, type: response.data[i].value.type });\n        }\n      }\n      self.lists.push(appList);\n\n      // Push user new list\n      var userAppList = {};\n      userAppList.listName = name;\n      userAppList.dragging = false;\n      userAppList.items = [];\n      angular.forEach(apps, function (app) {\n        userAppList.items.push(app);\n      });\n      self.lists.push(userAppList);\n\n      deferred.resolve(self);\n    }, function (apps) {\n      deferred.reject();\n    });\n\n    return deferred.promise;\n  };\n\n  MultipleList.prototype.addMultipleLists = function (name, query) {\n    var self = this;\n    var deferred = $q.defer();\n\n    $http({\n      url: '/api/workspace/meta',\n      method: 'GET',\n      params: { 'q': query }\n    }).then(function (response) {\n      // Push apps list\n      var appList = {};\n      appList.listName = 'Apps';\n      appList.dragging = false;\n      appList.items = [];\n      angular.forEach(response.data, function (app) {\n        appList.items.push({ label: app.value.id, type: app.value.type });\n      });\n      self.lists.push(appList);\n\n      // Push user new list\n      var newAppList = {};\n      newAppList.listName = name;\n      newAppList.dragging = false;\n      newAppList.items = [];\n      self.lists.push(newAppList);\n\n      deferred.resolve(self);\n    }, function (apps) {\n      deferred.reject();\n    });\n\n    return deferred.promise;\n  };\n\n  return MultipleList;\n}\n\nexports.default = MultipleList;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvd29ya3NwYWNlL3NlcnZpY2VzL211bHRpcGxlLWxpc3Qtc2VydmljZS5qcz83ZWY4Il0sIm5hbWVzIjpbIk11bHRpcGxlTGlzdCIsIiRodHRwIiwiJHEiLCJsaXN0cyIsInByb3RvdHlwZSIsImFkZEVkaXRMaXN0cyIsInF1ZXJ5IiwibmFtZSIsImFwcHMiLCJzZWxmIiwiZGVmZXJyZWQiLCJkZWZlciIsInVybCIsIm1ldGhvZCIsInBhcmFtcyIsInRoZW4iLCJyZXNwb25zZSIsImFwcExpc3QiLCJsaXN0TmFtZSIsImRyYWdnaW5nIiwiaXRlbXMiLCJpIiwiZGF0YSIsImxlbmd0aCIsImV4aXN0cyIsImoiLCJ2YWx1ZSIsImlkIiwibGFiZWwiLCJwdXNoIiwidHlwZSIsInVzZXJBcHBMaXN0IiwiYW5ndWxhciIsImZvckVhY2giLCJhcHAiLCJyZXNvbHZlIiwicmVqZWN0IiwicHJvbWlzZSIsImFkZE11bHRpcGxlTGlzdHMiLCJuZXdBcHBMaXN0Il0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLFNBQVNBLFlBQVQsQ0FBdUJDLEtBQXZCLEVBQThCQyxFQUE5QixFQUFrQztBQUNoQzs7QUFDQSxNQUFJRixlQUFlLFNBQWZBLFlBQWUsR0FBVztBQUN4QixTQUFLRyxLQUFMLEdBQWEsRUFBYjtBQUNELEdBRkw7O0FBSUFILGVBQWFJLFNBQWIsQ0FBdUJDLFlBQXZCLEdBQXNDLFVBQVNDLEtBQVQsRUFBZ0JDLElBQWhCLEVBQXNCQyxJQUF0QixFQUE0QjtBQUM5RCxRQUFJQyxPQUFPLElBQVg7QUFDQSxRQUFJQyxXQUFXUixHQUFHUyxLQUFILEVBQWY7O0FBRUFWLFVBQU07QUFDSlcsV0FBSyxxQkFERDtBQUVKQyxjQUFRLEtBRko7QUFHSkMsY0FBUSxFQUFDLEtBQUtSLEtBQU47QUFISixLQUFOLEVBSUdTLElBSkgsQ0FLRSxVQUFTQyxRQUFULEVBQWtCO0FBQ2hCO0FBQ0EsVUFBSUMsVUFBVSxFQUFkO0FBQ0FBLGNBQVFDLFFBQVIsR0FBbUIsTUFBbkI7QUFDQUQsY0FBUUUsUUFBUixHQUFtQixLQUFuQjtBQUNBRixjQUFRRyxLQUFSLEdBQWdCLEVBQWhCO0FBQ0EsV0FBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlMLFNBQVNNLElBQVQsQ0FBY0MsTUFBbEMsRUFBMENGLEdBQTFDLEVBQThDO0FBQzVDLFlBQUlHLFNBQVMsS0FBYjtBQUNBLGFBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJakIsS0FBS2UsTUFBekIsRUFBaUNFLEdBQWpDLEVBQXFDO0FBQ25DLGNBQUlULFNBQVNNLElBQVQsQ0FBY0QsQ0FBZCxFQUFpQkssS0FBakIsQ0FBdUJDLEVBQXZCLEtBQThCbkIsS0FBS2lCLENBQUwsRUFBUUcsS0FBMUMsRUFBZ0Q7QUFDOUNKLHFCQUFTLElBQVQ7QUFDQTtBQUNEO0FBQ0Y7QUFDRCxZQUFJQSxXQUFXLEtBQWYsRUFBcUI7QUFDbkJQLGtCQUFRRyxLQUFSLENBQWNTLElBQWQsQ0FBbUIsRUFBQ0QsT0FBT1osU0FBU00sSUFBVCxDQUFjRCxDQUFkLEVBQWlCSyxLQUFqQixDQUF1QkMsRUFBL0IsRUFBbUNHLE1BQU1kLFNBQVNNLElBQVQsQ0FBY0QsQ0FBZCxFQUFpQkssS0FBakIsQ0FBdUJJLElBQWhFLEVBQW5CO0FBQ0Q7QUFDRjtBQUNEckIsV0FBS04sS0FBTCxDQUFXMEIsSUFBWCxDQUFnQlosT0FBaEI7O0FBRUE7QUFDQSxVQUFJYyxjQUFjLEVBQWxCO0FBQ0FBLGtCQUFZYixRQUFaLEdBQXVCWCxJQUF2QjtBQUNBd0Isa0JBQVlaLFFBQVosR0FBdUIsS0FBdkI7QUFDQVksa0JBQVlYLEtBQVosR0FBb0IsRUFBcEI7QUFDQVksY0FBUUMsT0FBUixDQUFnQnpCLElBQWhCLEVBQXNCLFVBQVMwQixHQUFULEVBQWE7QUFDakNILG9CQUFZWCxLQUFaLENBQWtCUyxJQUFsQixDQUF1QkssR0FBdkI7QUFDRCxPQUZEO0FBR0F6QixXQUFLTixLQUFMLENBQVcwQixJQUFYLENBQWdCRSxXQUFoQjs7QUFFQXJCLGVBQVN5QixPQUFULENBQWlCMUIsSUFBakI7QUFDRCxLQXBDSCxFQXFDRSxVQUFTRCxJQUFULEVBQWM7QUFDWkUsZUFBUzBCLE1BQVQ7QUFDRCxLQXZDSDs7QUEwQ0EsV0FBTzFCLFNBQVMyQixPQUFoQjtBQUNILEdBL0NEOztBQWtEQXJDLGVBQWFJLFNBQWIsQ0FBdUJrQyxnQkFBdkIsR0FBMEMsVUFBUy9CLElBQVQsRUFBZUQsS0FBZixFQUFzQjtBQUM1RCxRQUFJRyxPQUFPLElBQVg7QUFDQSxRQUFJQyxXQUFXUixHQUFHUyxLQUFILEVBQWY7O0FBRUFWLFVBQU07QUFDSlcsV0FBSyxxQkFERDtBQUVKQyxjQUFRLEtBRko7QUFHSkMsY0FBUSxFQUFDLEtBQUtSLEtBQU47QUFISixLQUFOLEVBSUdTLElBSkgsQ0FLRSxVQUFTQyxRQUFULEVBQWtCO0FBQ2hCO0FBQ0EsVUFBSUMsVUFBVSxFQUFkO0FBQ0FBLGNBQVFDLFFBQVIsR0FBbUIsTUFBbkI7QUFDQUQsY0FBUUUsUUFBUixHQUFtQixLQUFuQjtBQUNBRixjQUFRRyxLQUFSLEdBQWdCLEVBQWhCO0FBQ0FZLGNBQVFDLE9BQVIsQ0FBZ0JqQixTQUFTTSxJQUF6QixFQUErQixVQUFTWSxHQUFULEVBQWE7QUFDMUNqQixnQkFBUUcsS0FBUixDQUFjUyxJQUFkLENBQW1CLEVBQUNELE9BQU9NLElBQUlSLEtBQUosQ0FBVUMsRUFBbEIsRUFBc0JHLE1BQU1JLElBQUlSLEtBQUosQ0FBVUksSUFBdEMsRUFBbkI7QUFDRCxPQUZEO0FBR0FyQixXQUFLTixLQUFMLENBQVcwQixJQUFYLENBQWdCWixPQUFoQjs7QUFFQTtBQUNBLFVBQUlzQixhQUFhLEVBQWpCO0FBQ0FBLGlCQUFXckIsUUFBWCxHQUFzQlgsSUFBdEI7QUFDQWdDLGlCQUFXcEIsUUFBWCxHQUFzQixLQUF0QjtBQUNBb0IsaUJBQVduQixLQUFYLEdBQW1CLEVBQW5CO0FBQ0FYLFdBQUtOLEtBQUwsQ0FBVzBCLElBQVgsQ0FBZ0JVLFVBQWhCOztBQUVBN0IsZUFBU3lCLE9BQVQsQ0FBaUIxQixJQUFqQjtBQUNELEtBeEJILEVBeUJFLFVBQVNELElBQVQsRUFBYztBQUNaRSxlQUFTMEIsTUFBVDtBQUNELEtBM0JIOztBQThCQSxXQUFPMUIsU0FBUzJCLE9BQWhCO0FBQ0gsR0FuQ0Q7O0FBcUNBLFNBQU9yQyxZQUFQO0FBQ0Q7O2tCQUVjQSxZIiwiZmlsZSI6IjQ3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gTXVsdGlwbGVMaXN0ICgkaHR0cCwgJHEpIHtcbiAgJ25nSW5qZWN0JztcbiAgdmFyIE11bHRpcGxlTGlzdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmxpc3RzID0gW107XG4gICAgICB9O1xuXG4gIE11bHRpcGxlTGlzdC5wcm90b3R5cGUuYWRkRWRpdExpc3RzID0gZnVuY3Rpb24ocXVlcnksIG5hbWUsIGFwcHMpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICRodHRwKHtcbiAgICAgICAgdXJsOiAnL2FwaS93b3Jrc3BhY2UvbWV0YScsXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIHBhcmFtczogeydxJzogcXVlcnl9XG4gICAgICB9KS50aGVuKFxuICAgICAgICBmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgLy8gUHVzaCBhcHBzIGxpc3RcbiAgICAgICAgICB2YXIgYXBwTGlzdCA9IHt9O1xuICAgICAgICAgIGFwcExpc3QubGlzdE5hbWUgPSAnQXBwcyc7XG4gICAgICAgICAgYXBwTGlzdC5kcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICAgIGFwcExpc3QuaXRlbXMgPSBbXTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3BvbnNlLmRhdGEubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgdmFyIGV4aXN0cyA9IGZhbHNlO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBhcHBzLmxlbmd0aDsgaisrKXtcbiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGFbaV0udmFsdWUuaWQgPT09IGFwcHNbal0ubGFiZWwpe1xuICAgICAgICAgICAgICAgIGV4aXN0cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChleGlzdHMgPT09IGZhbHNlKXtcbiAgICAgICAgICAgICAgYXBwTGlzdC5pdGVtcy5wdXNoKHtsYWJlbDogcmVzcG9uc2UuZGF0YVtpXS52YWx1ZS5pZCwgdHlwZTogcmVzcG9uc2UuZGF0YVtpXS52YWx1ZS50eXBlfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlbGYubGlzdHMucHVzaChhcHBMaXN0KTtcblxuICAgICAgICAgIC8vIFB1c2ggdXNlciBuZXcgbGlzdFxuICAgICAgICAgIHZhciB1c2VyQXBwTGlzdCA9IHt9O1xuICAgICAgICAgIHVzZXJBcHBMaXN0Lmxpc3ROYW1lID0gbmFtZTtcbiAgICAgICAgICB1c2VyQXBwTGlzdC5kcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICAgIHVzZXJBcHBMaXN0Lml0ZW1zID0gW107XG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGFwcHMsIGZ1bmN0aW9uKGFwcCl7XG4gICAgICAgICAgICB1c2VyQXBwTGlzdC5pdGVtcy5wdXNoKGFwcCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2VsZi5saXN0cy5wdXNoKHVzZXJBcHBMaXN0KTtcblxuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoc2VsZik7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uKGFwcHMpe1xuICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgpO1xuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfTtcblxuXG4gIE11bHRpcGxlTGlzdC5wcm90b3R5cGUuYWRkTXVsdGlwbGVMaXN0cyA9IGZ1bmN0aW9uKG5hbWUsIHF1ZXJ5KSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAkaHR0cCh7XG4gICAgICAgIHVybDogJy9hcGkvd29ya3NwYWNlL21ldGEnLFxuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICBwYXJhbXM6IHsncSc6IHF1ZXJ5fVxuICAgICAgfSkudGhlbihcbiAgICAgICAgZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgIC8vIFB1c2ggYXBwcyBsaXN0XG4gICAgICAgICAgdmFyIGFwcExpc3QgPSB7fTtcbiAgICAgICAgICBhcHBMaXN0Lmxpc3ROYW1lID0gJ0FwcHMnO1xuICAgICAgICAgIGFwcExpc3QuZHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgICBhcHBMaXN0Lml0ZW1zID0gW107XG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHJlc3BvbnNlLmRhdGEsIGZ1bmN0aW9uKGFwcCl7XG4gICAgICAgICAgICBhcHBMaXN0Lml0ZW1zLnB1c2goe2xhYmVsOiBhcHAudmFsdWUuaWQsIHR5cGU6IGFwcC52YWx1ZS50eXBlfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2VsZi5saXN0cy5wdXNoKGFwcExpc3QpO1xuXG4gICAgICAgICAgLy8gUHVzaCB1c2VyIG5ldyBsaXN0XG4gICAgICAgICAgdmFyIG5ld0FwcExpc3QgPSB7fTtcbiAgICAgICAgICBuZXdBcHBMaXN0Lmxpc3ROYW1lID0gbmFtZTtcbiAgICAgICAgICBuZXdBcHBMaXN0LmRyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgICAgbmV3QXBwTGlzdC5pdGVtcyA9IFtdO1xuICAgICAgICAgIHNlbGYubGlzdHMucHVzaChuZXdBcHBMaXN0KTtcblxuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoc2VsZik7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uKGFwcHMpe1xuICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgpO1xuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfTtcblxuICByZXR1cm4gTXVsdGlwbGVMaXN0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBNdWx0aXBsZUxpc3Q7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvd29ya3NwYWNlL3NlcnZpY2VzL211bHRpcGxlLWxpc3Qtc2VydmljZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///47\n");

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction Notifications($websocket, $location, $mdToast) {\n    'ngInject';\n\n    var protocol = $location.protocol();\n    var host = $location.host();\n    var port = $location.port();\n    var wsurl = 'wss://' + host + '/ws/notifications?subscribe-broadcast&subscribe-user';\n    var ws = $websocket(wsurl);\n    ws.onMessage(function (message) {\n        var data = JSON.parse(message.data);\n        $mdToast.show({\n            template: '<md-toast>\\\n            {{ vm.content }}\\\n        </md-toast>',\n            controller: [function () {\n                this.content = data.event_data.message;\n            }],\n            controllerAs: 'vm',\n            hideDelay: 3000\n        });\n    });\n}\n\nexports.default = Notifications;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvd29ya3NwYWNlL3NlcnZpY2VzL25vdGlmaWNhdGlvbnMtc2VydmljZS5qcz9hMzI0Il0sIm5hbWVzIjpbIk5vdGlmaWNhdGlvbnMiLCIkd2Vic29ja2V0IiwiJGxvY2F0aW9uIiwiJG1kVG9hc3QiLCJwcm90b2NvbCIsImhvc3QiLCJwb3J0Iiwid3N1cmwiLCJ3cyIsIm9uTWVzc2FnZSIsIm1lc3NhZ2UiLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwic2hvdyIsInRlbXBsYXRlIiwiY29udHJvbGxlciIsImNvbnRlbnQiLCJldmVudF9kYXRhIiwiY29udHJvbGxlckFzIiwiaGlkZURlbGF5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxTQUFTQSxhQUFULENBQXVCQyxVQUF2QixFQUFtQ0MsU0FBbkMsRUFBOENDLFFBQTlDLEVBQXdEO0FBQ3REOztBQUNBLFFBQUlDLFdBQVdGLFVBQVVFLFFBQVYsRUFBZjtBQUNBLFFBQUlDLE9BQU9ILFVBQVVHLElBQVYsRUFBWDtBQUNBLFFBQUlDLE9BQU9KLFVBQVVJLElBQVYsRUFBWDtBQUNBLFFBQUlDLFFBQVEsV0FBV0YsSUFBWCxHQUFrQixzREFBOUI7QUFDQSxRQUFJRyxLQUFLUCxXQUFXTSxLQUFYLENBQVQ7QUFDQUMsT0FBR0MsU0FBSCxDQUFhLFVBQVVDLE9BQVYsRUFBbUI7QUFDOUIsWUFBSUMsT0FBT0MsS0FBS0MsS0FBTCxDQUFXSCxRQUFRQyxJQUFuQixDQUFYO0FBQ0FSLGlCQUFTVyxJQUFULENBQWM7QUFDVkMsc0JBQVU7O29CQURBO0FBSVZDLHdCQUFZLENBQUMsWUFBYTtBQUN0QixxQkFBS0MsT0FBTCxHQUFlTixLQUFLTyxVQUFMLENBQWdCUixPQUEvQjtBQUNILGFBRlcsQ0FKRjtBQU9WUywwQkFBYyxJQVBKO0FBUVZDLHVCQUFXO0FBUkQsU0FBZDtBQVVELEtBWkQ7QUFjRDs7a0JBRWNwQixhIiwiZmlsZSI6IjQ4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5mdW5jdGlvbiBOb3RpZmljYXRpb25zKCR3ZWJzb2NrZXQsICRsb2NhdGlvbiwgJG1kVG9hc3QpIHtcbiAgJ25nSW5qZWN0JztcbiAgdmFyIHByb3RvY29sID0gJGxvY2F0aW9uLnByb3RvY29sKCk7XG4gIHZhciBob3N0ID0gJGxvY2F0aW9uLmhvc3QoKTtcbiAgdmFyIHBvcnQgPSAkbG9jYXRpb24ucG9ydCgpO1xuICB2YXIgd3N1cmwgPSAnd3NzOi8vJyArIGhvc3QgKyAnL3dzL25vdGlmaWNhdGlvbnM/c3Vic2NyaWJlLWJyb2FkY2FzdCZzdWJzY3JpYmUtdXNlcic7XG4gIHZhciB3cyA9ICR3ZWJzb2NrZXQod3N1cmwpO1xuICB3cy5vbk1lc3NhZ2UoZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UobWVzc2FnZS5kYXRhKTtcbiAgICAkbWRUb2FzdC5zaG93KHtcbiAgICAgICAgdGVtcGxhdGU6ICc8bWQtdG9hc3Q+XFxcbiAgICAgICAgICAgIHt7IHZtLmNvbnRlbnQgfX1cXFxuICAgICAgICA8L21kLXRvYXN0PicsXG4gICAgICAgIGNvbnRyb2xsZXI6IFtmdW5jdGlvbiAgKCkge1xuICAgICAgICAgICAgdGhpcy5jb250ZW50ID0gZGF0YS5ldmVudF9kYXRhLm1lc3NhZ2U7XG4gICAgICAgIH1dLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgIGhpZGVEZWxheTogMzAwMFxuICAgIH0pO1xuICB9KTtcblxufVxuXG5leHBvcnQgZGVmYXVsdCBOb3RpZmljYXRpb25zO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcG9ydGFsL3N0YXRpYy9wb3J0YWwvc2NyaXB0cy9hbmd1bGFyL3dvcmtzcGFjZS9zZXJ2aWNlcy9ub3RpZmljYXRpb25zLXNlcnZpY2UuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///48\n");

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction SimpleList($http, $q) {\n  'ngInject';\n\n  var SimpleList = function SimpleList() {\n    this.selected = null, this.lists = {}, this.map = {};\n  };\n\n  SimpleList.prototype.getDefaultLists = function (query) {\n    var self = this;\n    var deferred = $q.defer();\n    $http({\n      url: \"/api/workspace/meta\",\n      method: 'GET',\n      params: { 'q': query }\n    }).then(function (response) {\n      self.lists['Private'] = [];\n      self.lists['Public'] = [];\n\n      angular.forEach(response.data.response, function (appMeta) {\n        self.map[appMeta.value.definition.id] = appMeta;\n        if (appMeta.value.definition.isPublic) {\n          if (appMeta.value.definition.available) {\n            self.lists['Public'].push(appMeta);\n          }\n        } else {\n          if (appMeta.value.definition.available) {\n            self.lists['Private'].push(appMeta);\n          }\n        }\n      });\n\n      deferred.resolve(self);\n    }, function (apps) {\n      deferred.reject();\n    });\n    return deferred.promise;\n  };\n\n  SimpleList.prototype.getUserLists = function (query) {\n    var self = this;\n    var deferred = $q.defer();\n\n    $http({\n      url: '/api/workspace/meta',\n      method: 'GET',\n      params: { 'q': query }\n    }).then(function (response) {\n      if (response.data.response.length > 0) {\n        _.each(response.data.response, function (appListMeta) {\n          self.lists[appListMeta.value.label] = [];\n          _.each(appListMeta.value.apps, function (app) {\n            self.lists[appListMeta.value.label].push(self.map[app.value.definition.id]);\n          });\n        });\n      }\n      deferred.resolve(self);\n    }, function (apps) {\n      deferred.reject();\n    });\n    return deferred.promise;\n  };\n\n  return SimpleList;\n}\n\nexports.default = SimpleList;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvd29ya3NwYWNlL3NlcnZpY2VzL3NpbXBsZS1saXN0LXNlcnZpY2UuanM/ZDJhMyJdLCJuYW1lcyI6WyJTaW1wbGVMaXN0IiwiJGh0dHAiLCIkcSIsInNlbGVjdGVkIiwibGlzdHMiLCJtYXAiLCJwcm90b3R5cGUiLCJnZXREZWZhdWx0TGlzdHMiLCJxdWVyeSIsInNlbGYiLCJkZWZlcnJlZCIsImRlZmVyIiwidXJsIiwibWV0aG9kIiwicGFyYW1zIiwidGhlbiIsInJlc3BvbnNlIiwiYW5ndWxhciIsImZvckVhY2giLCJkYXRhIiwiYXBwTWV0YSIsInZhbHVlIiwiZGVmaW5pdGlvbiIsImlkIiwiaXNQdWJsaWMiLCJhdmFpbGFibGUiLCJwdXNoIiwicmVzb2x2ZSIsImFwcHMiLCJyZWplY3QiLCJwcm9taXNlIiwiZ2V0VXNlckxpc3RzIiwibGVuZ3RoIiwiXyIsImVhY2giLCJhcHBMaXN0TWV0YSIsImxhYmVsIiwiYXBwIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLFNBQVNBLFVBQVQsQ0FBcUJDLEtBQXJCLEVBQTRCQyxFQUE1QixFQUFnQztBQUM5Qjs7QUFDQSxNQUFJRixhQUFhLFNBQWJBLFVBQWEsR0FBVTtBQUN6QixTQUFLRyxRQUFMLEdBQWdCLElBQWhCLEVBQ0EsS0FBS0MsS0FBTCxHQUFhLEVBRGIsRUFFQSxLQUFLQyxHQUFMLEdBQVcsRUFGWDtBQUdELEdBSkQ7O0FBTUFMLGFBQVdNLFNBQVgsQ0FBcUJDLGVBQXJCLEdBQXVDLFVBQVNDLEtBQVQsRUFBZ0I7QUFDckQsUUFBSUMsT0FBTyxJQUFYO0FBQ0EsUUFBSUMsV0FBV1IsR0FBR1MsS0FBSCxFQUFmO0FBQ0FWLFVBQU07QUFDSlcsV0FBSyxxQkFERDtBQUVKQyxjQUFRLEtBRko7QUFHSkMsY0FBUSxFQUFDLEtBQUtOLEtBQU47QUFISixLQUFOLEVBSUdPLElBSkgsQ0FLRSxVQUFTQyxRQUFULEVBQWtCO0FBQ2hCUCxXQUFLTCxLQUFMLENBQVcsU0FBWCxJQUF3QixFQUF4QjtBQUNBSyxXQUFLTCxLQUFMLENBQVcsUUFBWCxJQUF1QixFQUF2Qjs7QUFHQWEsY0FBUUMsT0FBUixDQUFnQkYsU0FBU0csSUFBVCxDQUFjSCxRQUE5QixFQUF3QyxVQUFTSSxPQUFULEVBQWlCO0FBQ3ZEWCxhQUFLSixHQUFMLENBQVNlLFFBQVFDLEtBQVIsQ0FBY0MsVUFBZCxDQUF5QkMsRUFBbEMsSUFBd0NILE9BQXhDO0FBQ0EsWUFBSUEsUUFBUUMsS0FBUixDQUFjQyxVQUFkLENBQXlCRSxRQUE3QixFQUFzQztBQUNwQyxjQUFJSixRQUFRQyxLQUFSLENBQWNDLFVBQWQsQ0FBeUJHLFNBQTdCLEVBQXVDO0FBQ3JDaEIsaUJBQUtMLEtBQUwsQ0FBVyxRQUFYLEVBQXFCc0IsSUFBckIsQ0FDRU4sT0FERjtBQUdEO0FBQ0YsU0FORCxNQU1PO0FBQ0wsY0FBSUEsUUFBUUMsS0FBUixDQUFjQyxVQUFkLENBQXlCRyxTQUE3QixFQUF1QztBQUNyQ2hCLGlCQUFLTCxLQUFMLENBQVcsU0FBWCxFQUFzQnNCLElBQXRCLENBQ0VOLE9BREY7QUFHRDtBQUNGO0FBQ0YsT0FmRDs7QUFpQkFWLGVBQVNpQixPQUFULENBQWlCbEIsSUFBakI7QUFDRCxLQTVCSCxFQTZCRSxVQUFTbUIsSUFBVCxFQUFjO0FBQ1psQixlQUFTbUIsTUFBVDtBQUNELEtBL0JIO0FBaUNBLFdBQU9uQixTQUFTb0IsT0FBaEI7QUFDRCxHQXJDRDs7QUF1Q0E5QixhQUFXTSxTQUFYLENBQXFCeUIsWUFBckIsR0FBb0MsVUFBU3ZCLEtBQVQsRUFBZ0I7QUFDbEQsUUFBSUMsT0FBTyxJQUFYO0FBQ0EsUUFBSUMsV0FBV1IsR0FBR1MsS0FBSCxFQUFmOztBQUVBVixVQUFNO0FBQ0pXLFdBQUsscUJBREQ7QUFFSkMsY0FBUSxLQUZKO0FBR0pDLGNBQVEsRUFBQyxLQUFLTixLQUFOO0FBSEosS0FBTixFQUlHTyxJQUpILENBS0UsVUFBU0MsUUFBVCxFQUFrQjtBQUNoQixVQUFJQSxTQUFTRyxJQUFULENBQWNILFFBQWQsQ0FBdUJnQixNQUF2QixHQUFnQyxDQUFwQyxFQUFzQztBQUNwQ0MsVUFBRUMsSUFBRixDQUFPbEIsU0FBU0csSUFBVCxDQUFjSCxRQUFyQixFQUErQixVQUFTbUIsV0FBVCxFQUFxQjtBQUNsRDFCLGVBQUtMLEtBQUwsQ0FBVytCLFlBQVlkLEtBQVosQ0FBa0JlLEtBQTdCLElBQXNDLEVBQXRDO0FBQ0FILFlBQUVDLElBQUYsQ0FBT0MsWUFBWWQsS0FBWixDQUFrQk8sSUFBekIsRUFBK0IsVUFBU1MsR0FBVCxFQUFhO0FBQzFDNUIsaUJBQUtMLEtBQUwsQ0FBVytCLFlBQVlkLEtBQVosQ0FBa0JlLEtBQTdCLEVBQW9DVixJQUFwQyxDQUF5Q2pCLEtBQUtKLEdBQUwsQ0FBU2dDLElBQUloQixLQUFKLENBQVVDLFVBQVYsQ0FBcUJDLEVBQTlCLENBQXpDO0FBQ0QsV0FGRDtBQUdELFNBTEQ7QUFNRDtBQUNEYixlQUFTaUIsT0FBVCxDQUFpQmxCLElBQWpCO0FBQ0QsS0FmSCxFQWdCRSxVQUFTbUIsSUFBVCxFQUFjO0FBQ1psQixlQUFTbUIsTUFBVDtBQUNELEtBbEJIO0FBb0JBLFdBQU9uQixTQUFTb0IsT0FBaEI7QUFDRCxHQXpCRDs7QUE0QkEsU0FBTzlCLFVBQVA7QUFDRDs7a0JBRWNBLFUiLCJmaWxlIjoiNDkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBTaW1wbGVMaXN0ICgkaHR0cCwgJHEpIHtcbiAgJ25nSW5qZWN0JztcbiAgdmFyIFNpbXBsZUxpc3QgPSBmdW5jdGlvbigpe1xuICAgIHRoaXMuc2VsZWN0ZWQgPSBudWxsLFxuICAgIHRoaXMubGlzdHMgPSB7fSxcbiAgICB0aGlzLm1hcCA9IHt9O1xuICB9O1xuXG4gIFNpbXBsZUxpc3QucHJvdG90eXBlLmdldERlZmF1bHRMaXN0cyA9IGZ1bmN0aW9uKHF1ZXJ5KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgJGh0dHAoe1xuICAgICAgdXJsOiBcIi9hcGkvd29ya3NwYWNlL21ldGFcIixcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBwYXJhbXM6IHsncSc6IHF1ZXJ5fVxuICAgIH0pLnRoZW4oXG4gICAgICBmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgIHNlbGYubGlzdHNbJ1ByaXZhdGUnXSA9IFtdO1xuICAgICAgICBzZWxmLmxpc3RzWydQdWJsaWMnXSA9IFtdO1xuXG5cbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKHJlc3BvbnNlLmRhdGEucmVzcG9uc2UsIGZ1bmN0aW9uKGFwcE1ldGEpe1xuICAgICAgICAgIHNlbGYubWFwW2FwcE1ldGEudmFsdWUuZGVmaW5pdGlvbi5pZF0gPSBhcHBNZXRhO1xuICAgICAgICAgIGlmIChhcHBNZXRhLnZhbHVlLmRlZmluaXRpb24uaXNQdWJsaWMpe1xuICAgICAgICAgICAgaWYgKGFwcE1ldGEudmFsdWUuZGVmaW5pdGlvbi5hdmFpbGFibGUpe1xuICAgICAgICAgICAgICBzZWxmLmxpc3RzWydQdWJsaWMnXS5wdXNoKFxuICAgICAgICAgICAgICAgIGFwcE1ldGFcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFwcE1ldGEudmFsdWUuZGVmaW5pdGlvbi5hdmFpbGFibGUpe1xuICAgICAgICAgICAgICBzZWxmLmxpc3RzWydQcml2YXRlJ10ucHVzaChcbiAgICAgICAgICAgICAgICBhcHBNZXRhXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHNlbGYpO1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uKGFwcHMpe1xuICAgICAgICBkZWZlcnJlZC5yZWplY3QoKTtcbiAgICAgIH1cbiAgICApO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9O1xuXG4gIFNpbXBsZUxpc3QucHJvdG90eXBlLmdldFVzZXJMaXN0cyA9IGZ1bmN0aW9uKHF1ZXJ5KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAkaHR0cCh7XG4gICAgICB1cmw6ICcvYXBpL3dvcmtzcGFjZS9tZXRhJyxcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBwYXJhbXM6IHsncSc6IHF1ZXJ5fVxuICAgIH0pLnRoZW4oXG4gICAgICBmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnJlc3BvbnNlLmxlbmd0aCA+IDApe1xuICAgICAgICAgIF8uZWFjaChyZXNwb25zZS5kYXRhLnJlc3BvbnNlLCBmdW5jdGlvbihhcHBMaXN0TWV0YSl7XG4gICAgICAgICAgICBzZWxmLmxpc3RzW2FwcExpc3RNZXRhLnZhbHVlLmxhYmVsXSA9IFtdO1xuICAgICAgICAgICAgXy5lYWNoKGFwcExpc3RNZXRhLnZhbHVlLmFwcHMsIGZ1bmN0aW9uKGFwcCl7XG4gICAgICAgICAgICAgIHNlbGYubGlzdHNbYXBwTGlzdE1ldGEudmFsdWUubGFiZWxdLnB1c2goc2VsZi5tYXBbYXBwLnZhbHVlLmRlZmluaXRpb24uaWRdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUoc2VsZik7XG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24oYXBwcyl7XG4gICAgICAgIGRlZmVycmVkLnJlamVjdCgpO1xuICAgICAgfVxuICAgICk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gIH07XG5cblxuICByZXR1cm4gU2ltcGxlTGlzdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2ltcGxlTGlzdDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BvcnRhbC9zdGF0aWMvcG9ydGFsL3NjcmlwdHMvYW5ndWxhci93b3Jrc3BhY2Uvc2VydmljZXMvc2ltcGxlLWxpc3Qtc2VydmljZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///49\n");

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * This service is currently a stub service static data. We don't need dynamic system\n * lookup right now, but it will be nicer to go ahead and code against this service\n * rather than having stubs all over the place.\n */\nfunction Systems($q, $http) {\n  'ngInject';\n\n  this.getMonitor = function (system_id) {\n    return $http({\n      url: '/api/workspace/monitors',\n      method: 'GET',\n      params: { 'target': system_id },\n      cache: false\n    });\n  };\n}\n\nexports.default = Systems;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2FuZ3VsYXIvd29ya3NwYWNlL3NlcnZpY2VzL3N5c3RlbXMtc2VydmljZS5qcz9hOGEyIl0sIm5hbWVzIjpbIlN5c3RlbXMiLCIkcSIsIiRodHRwIiwiZ2V0TW9uaXRvciIsInN5c3RlbV9pZCIsInVybCIsIm1ldGhvZCIsInBhcmFtcyIsImNhY2hlIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7OztBQUtBLFNBQVNBLE9BQVQsQ0FBaUJDLEVBQWpCLEVBQXFCQyxLQUFyQixFQUE0QjtBQUN4Qjs7QUFDQSxPQUFLQyxVQUFMLEdBQWtCLFVBQVNDLFNBQVQsRUFBb0I7QUFDcEMsV0FBT0YsTUFBTTtBQUNYRyxXQUFLLHlCQURNO0FBRVhDLGNBQVEsS0FGRztBQUdYQyxjQUFRLEVBQUMsVUFBVUgsU0FBWCxFQUhHO0FBSVhJLGFBQU87QUFKSSxLQUFOLENBQVA7QUFNRCxHQVBEO0FBVUg7O2tCQUVjUixPIiwiZmlsZSI6IjUwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIHNlcnZpY2UgaXMgY3VycmVudGx5IGEgc3R1YiBzZXJ2aWNlIHN0YXRpYyBkYXRhLiBXZSBkb24ndCBuZWVkIGR5bmFtaWMgc3lzdGVtXG4gKiBsb29rdXAgcmlnaHQgbm93LCBidXQgaXQgd2lsbCBiZSBuaWNlciB0byBnbyBhaGVhZCBhbmQgY29kZSBhZ2FpbnN0IHRoaXMgc2VydmljZVxuICogcmF0aGVyIHRoYW4gaGF2aW5nIHN0dWJzIGFsbCBvdmVyIHRoZSBwbGFjZS5cbiAqL1xuZnVuY3Rpb24gU3lzdGVtcygkcSwgJGh0dHApIHtcbiAgICAnbmdJbmplY3QnO1xuICAgIHRoaXMuZ2V0TW9uaXRvciA9IGZ1bmN0aW9uKHN5c3RlbV9pZCkge1xuICAgICAgcmV0dXJuICRodHRwKHtcbiAgICAgICAgdXJsOiAnL2FwaS93b3Jrc3BhY2UvbW9uaXRvcnMnLFxuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICBwYXJhbXM6IHsndGFyZ2V0Jzogc3lzdGVtX2lkfSxcbiAgICAgICAgY2FjaGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9O1xuXG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3lzdGVtcztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BvcnRhbC9zdGF0aWMvcG9ydGFsL3NjcmlwdHMvYW5ndWxhci93b3Jrc3BhY2Uvc2VydmljZXMvc3lzdGVtcy1zZXJ2aWNlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///50\n");

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _mainModule = __webpack_require__(0);\n\nvar _mainModule2 = _interopRequireDefault(_mainModule);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wb3J0YWwvc3RhdGljL3BvcnRhbC9zY3JpcHRzL2luZGV4LmpzPzllMWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSIsImZpbGUiOiI1MS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSAnLi9hbmd1bGFyL21haW4ubW9kdWxlLmpzJztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BvcnRhbC9zdGF0aWMvcG9ydGFsL3NjcmlwdHMvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///51\n");

/***/ }),
/* 52 */
/***/ (function(module, exports) {

eval("module.exports = angular;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJhbmd1bGFyXCI/MTFkMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI1Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gYW5ndWxhcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcImFuZ3VsYXJcIlxuLy8gbW9kdWxlIGlkID0gNTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///52\n");

/***/ })
/******/ ]);